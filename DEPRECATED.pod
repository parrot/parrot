=head1 Purpose

Provide a list of deprecated and experimental items in parrot.
All items in this list should have a corresponding Trac ticket[1].

=head1 Experimental Status

These features are not considered supported, even though they may
have shipped in a supported release of parrot[2]. Use them at your own
risk, as they can be removed or changed in any release. These
items are marked below with C<[experimental]>.

=head1 Deprecated Status

Please see F<docs/project/support_policy.pod> for the parrot
project's policy regarding deprecated features.

Each item shows the first release in which it is eligible for removal, e.g.
C<[eligible in 1.5]>.  If the release listed is one that has already
shipped, this feature may be removed in B<any> upcoming release, and
you should no longer rely on it.

If you find a feature you once used was removed after a deprecation
cycle, L<https://trac.parrot.org/parrot/wiki/Deprecation>. Otherwise
please open a documentation ticket via Trac[1].

=head1 Are you using any Deprecated Features?

When running parrot, you can receive warnings about deprecations.
Either run parrot with the C<-w> option to enable all warnings, or
deprecations specifically by including this snippet:

=begin PIR_FRAGMENT

 .include 'warnings.pasm'
 warningson .PARROT_WARNINGS_DEPRECATED_FLAG

=end PIR_FRAGMENT

=head1 PMCS

=over 4

=item PackfileDebug [experimental]

L<https://trac.parrot.org/parrot/ticket/1599>

=item MappedByteArray [experimental]

L<https://trac.parrot.org/parrot/ticket/1877>

=item multiple dispatch within core PMCs [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/452>

=item Overriding vtable invoke in PIR objects [experimental]

The VTABLE invoke in object.pmc puts SELF at the start of the
signature call arguments when there is no current object and is
not already here. This allows the usage of $P0() instead of $P0($P0).

L<https://trac.parrot.org/parrot/ticket/103>

=item UnManagedStruct handling nested structure [eligible in 2.4]

UnManagedStruct will be simplified to only support flat structures. This means
that elements which themselves have structure - struct pointers and function
pointers will be stored as C<void *> and C<void (*)(void)> respectively. To use
these, they will need to be cast to the appropriate signature on access.

L<https://trac.parrot.org/parrot/ticket/1551>

=item UnManagedStruct initializer structure [eligible in 2.4]

The initializer structure will cease to be an array of triples. Instead, an
array of flags (no counts or offsets), or a string representation of the same
information may be used.

L<https://trac.parrot.org/parrot/ticket/1552>

=item UnManagedStruct get_integer, set_integer_native [eligible in 2.4]

These will no longer refer to the byte length of the buffer, but to the number
of times the struct is repeated; emulating an array of structs.

L<https://trac.parrot.org/parrot/ticket/1553>

=item ManagedStruct reallocations based on shape changes [eligible in 2.4]

Since shape changes may simply be used for re-interpreting data, and may also
occur in several steps, re-allocating after any one shape change may be
undesirable. In stead, an explicit allocate/reallocate method will be provided.

L<https://trac.parrot.org/parrot/ticket/1554>

=item Auto-vivification of nested aggregates [eligible in 2.4]

E.g.

  $P0 = new ['Hash']
  $S1 = $P0['foo';'bar';'baz']

will not auto-vivify nested hashes and return PMCNULL early.

L<https://trac.parrot.org/parrot/ticket/1561>

=item logical_* vtables [eligiblie in 2.7]

These can be replaced by C<get_bool> and intval ops unless you're using them for
things that aren't really logical ops (don't do that!).

Logical vtables are removed in r49012, and logical ops on PMCs are converted to
use C<get_bool> internally. Rakudo seems to depend on logical ops on PMCs.

L<https://trac.parrot.org/parrot/ticket/1655>

=item Complex PMC [eligible in 3.1]

This perennially broken PMC will be removed.

L<http://trac.parrot.org/parrot/ticket/1892>

=back

=head1 Opcodes

=over 4

=item charset, charsetname, find_charset, trans_charset [eligible in 2.10]

L<https://trac.parrot.org/parrot/ticket/1778>

These opcodes will be removed. The corresponding encoding opcodes should be
used instead.

=item fixed_8 encoding [eligible in 2.10]

L<https://trac.parrot.org/parrot/ticket/1778>

The 'fixed_8' encoding is going away. Use 'ascii' instead. If you want to test
for a fixed_8 encoding, you have to compare the encoding to 'ascii',
'iso-8859-1' and 'binary' separately.

=item open and close opcodes will be removed [eligible in 2.7]

L<https://trac.parrot.org/parrot/ticket/1697>

These opcodes will be removed. The open/close methods on File or
the FileHandle PMC should be used instead.

=item get_addr and set_addr [eligible in 1.5]

L<https://trac.parrot.org/parrot/ticket/218>

These opcodes are being repurposed. They will always return a unique memory
address of the PMC. Uses of get_addr and set_addr that would set label values
for Sub, Exception, and related PMC types will instead be handled by
get_label and set_label.

=item get_results opcode order and features [eligible in 2.1]

get_results no longer used to fetch exception object.

L<https://trac.parrot.org/parrot/ticket/1406>

=item GC_SYS_NAME option to interpinfo_s_i [experimental]

Ability to get the string name of the current GC core from the interpinfo_s_i.
See r43900 and r43904 for details.

L<https://trac.parrot.org/parrot/ticket/1581>

=item NCI_FB_CB and NCI_FB_UD in iglobals [experimental]

Hooks allowing a runtime-loadable dynamic frame builder.

L<https://trac.parrot.org/parrot/ticket/1582>

=item loadlib_p_s_p [experimental]

Ability to use non-default dynamic loading behaviour.

L<https://trac.parrot.org/parrot/ticket/1583>

=item new_callback_p_p_p_s [eligible in 2.4]

To be replaced with new_callback_p_p_p_p_s.

L<https://trac.parrot.org/parrot/ticket/1548>

=item dlfunc and new_callback signature string format [eligible in 2.4]

These will be changed to allow more flexibility in types.

L<https://trac.parrot.org/parrot/ticket/1565>

=item finalize [experimental]

Finalize exception handler, unrolling inner runloops if needed.

L<https://trac.parrot.org/parrot/ticket/1635>

=item logical PMC ops [eligible in 2.7]

These fall out from the logical vtables deprecation.

L<https://trac.parrot.org/parrot/ticket/1655>

=back

=head1 Bytecode

=over 4

=item packfile structure [experimental]

L<https://trac.parrot.org/parrot/ticket/451>

=item opcode numbering [experimental]

L<https://trac.parrot.org/parrot/ticket/451>

=item PMC numbering [experimental]

L<https://trac.parrot.org/parrot/ticket/451>

=back

=head1 Debugger

Assigning to registers [experimental]

=head1 PIR syntax

=over 4

=item continuation-based ExceptionHandlers [eligible in 2.1]

L<https://trac.parrot.org/parrot/ticket/1091>

=item implicit optional named parameters [eligible in 2.1]

L<https://trac.parrot.org/parrot/ticket/1103>

=item :main Sub behaviour and selection. [eligible in 2.7]

Currently, if no :main sub is found, the first .sub in a file is used as
main. Also, arguments are passed to the main sub regardless of the .param
declarations in that sub.

After this change, if no sub is marked with :main, an exception will be
raised. Multiple :main declarations will be still be allowed, and all but the
first will be ignored.

This change will also force all subs, including :main, to have their
arguments checked - to allow an arbitrary number of arguments, have
this be the only .param declaration in the sub.

 .param pmc args :slurpy


L<https://trac.parrot.org/parrot/ticket/1033>
L<https://trac.parrot.org/parrot/ticket/1704>
L<https://trac.parrot.org/parrot/ticket/1705>

=item C<:load> and C<:init> Sub flags doing different things [eligible in 3.1]

Currently, C<:init> and C<:load> flagged Subs get called depending on the way a
PIR file has been loaded. This distinction is silly and will cease to be. The
C<:load> flag will be triggered both for scenarios. C<:init> becomes a no-op for
a deprecation cycle (see below).

L<https://trac.parrot.org/parrot/ticket/1895>

=item C<:init> Sub flag [eligible in 3.4]

At this point, C<:init> is a no-op, and will therefore be removed.

L<https://trac.parrot.org/parrot/ticket/1896>

=item encoding:charset:"" string literals [eligible in 3.1]

This form of string literals will be removed.

L<https://trac.parrot.org/parrot/ticket/1808>

=back

=head1 Functions

=over 4

=item mmd_cvt_to_types [eligible in 1.1]

L<https://trac.parrot.org/parrot/ticket/907>

=item C API coding standards cleanup [eligible in 1.1]

All C API functions that aren't currently named according to the
'Parrot_<system>_*' scheme will be renamed. A list of renamed
functions will be kept in the ticket at:

L<https://trac.parrot.org/parrot/ticket/443>

=item PMC Attributes Allocation Functions [experimental]

 Parrot_gc_allocate_pmc_attributes
 Parrot_gc_free_pmc_attributes

These items and related helper functions are added as experimental support
for L<https://trac.parrot.org/parrot/ticket/1506>

=item STRING Out parameters in Parrot_str_* functions [eligible in 2.1]

All STRING modification functions will return a STRING pointer; capture and use
this rather than relying on in-place modification of an existing pointer.

L<https://trac.parrot.org/parrot/ticket/1584>

=item Parrot_load_bytecode_file [experimental]

Load a .pbc file into the interpreter. Experimental.

=item GC timely destruction [eligible in 3.1]

All PIR ops and internal semantics related to timely destruction of PMCs
is deprecated.

L<http://trac.parrot.org/parrot/ticket/1800>

=item Non-const STRING* arguments [eligible in 3.1]

Due immutable nature of STRINGs we are changing internal handling to use only
const STRING pointers. It will improve optimizations possibilities by compiler,
make parrot const-correct, etc.

Passing of non-const STRING* arguments is deprecated and will be changed to
const STRING*. This includes (but not limited to) all string API functions,
VTABLEs, PCC, etc.

L<http://trac.parrot.org/parrot/ticket/1906>

=item Old string_* functions [eligible in 3.0]

The old string_* functions will be removed.

L<http://trac.parrot.org/parrot/ticket/1809>

=back

=head1 Compiler tools

=head2 Parrot Grammar Engine (PGE)

=over 4

=item Action methods in rules

Per Synopsis 5, all regexes will have an implied {*} token at the
end which cause invocation of an action method if a C<:action>
object is supplied.

L<https://trac.parrot.org/parrot/ticket/843>

=back

=head2 Parrot Compiler Toolkit

=over 4

=item PCT::HLLCompiler stages [eligible in 1.1]

The interface of various methods for adding, removing, and modifying
the list stages in a PCT::HLLCompiler object is subject to change.
The existing actual stages will remain; only the mechanism for specifying
the order of individual stages is likely to change.

L<https://trac.parrot.org/parrot/ticket/462>

=item PCT::HLLCompiler from Perl 5's Test::Harness [eligible in 1.1]

In order to facilitate using PCT::HLLCompiler with test harnesses,
the C<command_line> method of PCT::HLLCompiler object exits silently
if it detects that it is being run in a sample run from Perl's
Test::Harness.  Currently this detection is done by checking the
second command line argument for "@INC"; future releases may
use a different detection mechanism or eliminate it altogether.

L<https://trac.parrot.org/parrot/ticket/463>

=item PAST::Val node generation [eligible in 1.5]

The PAST::Compiler may generate the code for PAST::Val nodes
(i.e., constants) at the beginning of the block (Parrot sub) instead
of the location where they occur in the PAST tree.

L<https://trac.parrot.org/parrot/ticket/868>

=item Meta-model implementation used by PCT [eligible in 2.7]

PCT is set to switch to a new meta-model implementation for its classes
and objects. This will most likely only affect those who rely on the
interface of what is returned from .HOW, or rely on PCT objects exhibiting
various other peculiarities of the P6object implementation. (Even when that
is the case, the HOW API will not be changing too drastically, so for most
PCT users there should be little to no upheavel.)

=back

=head1 Parrot library

=over 4

=item PARROT_LIBRARY and PARROT_INCLUDE environment variables [experimental]

L<https://trac.parrot.org/parrot/ticket/1429>

A way to provide an equivalent of -L and -I parrot command line options
to language that doesn't support it.

=item Protoobject [eligible in 2.7]

Use P6Object instead.

L<http://trac.parrot.org/parrot/ticket/1337>

=item Archive::Tar & Archive::Zip [experimental]

L<https://trac.parrot.org/parrot/ticket/1598>

=item LWP, HTTP::Message, URI & URI::Escape [experimental]

L<http://trac.parrot.org/parrot/ticket/1637>

=item JSON and Config;JSON [eligible in 1.5]

L<https://trac.parrot.org/parrot/ticket/508>

=item Cross-HLL library loading [experimental]

L<https://trac.parrot.org/parrot/ticket/754>

=item OpenGL bindings and libraries [experimental]

L<https://trac.parrot.org/parrot/ticket/852>

=item pkg-config support [eligible in 3.1]

Use C<parrot_config> instead.

L<http://trac.parrot.org/parrot/ticket/1853>

=back

=head1 Experimental

=over 4

=item Threads and Parallelism [experimental]

L<https://trac.parrot.org/parrot/ticket/1601>

=back

=head1 Footnotes

=over 4

=item 1

L<Trac|http://trac.parrot.org/> is parrot's primary issue tracking system.

=item 2

For an item to be considered experimental, it can B<never> have shipped in
a supported release without the C<[experimental]> tag; otherwise, it must be
deprecated normally before removal or incompatible change.

=back

=cut
