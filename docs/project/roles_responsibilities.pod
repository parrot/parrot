# Copyright (C) 2007-2012, Parrot Foundation.

=pod

=head1 NAME

docs/project/roles_responsibilities.pod - Parrot Roles and Responsibilities.

=head1 DESCRIPTION

This document describes the roles and responsibilities of parties involved in
the Parrot project.

=head1 PARROT ROLES AND RESPONSIBILITIES

Roles are divided into three categories (Project Team,
Committers, Contributors) and may be further subdivided.

=head1 PROJECT TEAM

Members of the Project Team set the overall direction of the project, track
project progress, oversee the project source (and access to that source), and
develop and maintain the project. The Project Team consists of positions
selected on the basis of available volunteers, and a general evaluation of
suitable skills by existing Project Team members.

=head2 Architect

The architect has primary responsibility for setting overall direction of the
project, and to facilitate team communication and understanding of
architectural issues. The architect is primarily but not solely responsible
for making design decisions and documenting them in Parrot Design Documents;
responsibility for design and design documentation of project subcomponents
may be given to other members of the Project Team, or may be held jointly.
The Architect also works with Release Managers to develop and maintain
the release schedule.

=head2 Release Manager

Release Managers have responsibility for executing a product release,
according to the release schedule. The release schedule is developed and
maintained jointly with the Release Managers and the Architect.

See F<docs/project/release_manager_guide.pod> for more information.

=head2 Metacommitter

All Metacommitters are responsible for managing commit access to the
Parrot repository. Once the Architect approves a request for a
Contributor to be given commit access, a Metacommitter provides that
access. The Architect is a Metacommitters, but other Project Team
members also hold this role.

See F<docs/project/metacommitter_guide.pod> for more information.

=head1 COMMITTERS

Contributors who submit numerous, high-quality patches may be considered to
become a Committer. Committers have commit access to the full Parrot
repository, but generally work only on one or more subprojects; Committer
categories are described below. Contributors may considered for commit access
either by being nominated by another Committer, or by asking for it.

=head2 Core Developer

Develops and maintains core subsystems (e.g. I/O, Exceptions.)

=head2 Compiler Developer

Develops and maintains one or more Parrot compilers (e.g. IMCC, PGE, TGE)

=head2 High Level Language Developer

Develops and maintains one or more High Level Languages
(e.g. Tcl, Lua, Perl 6.)

=head2 Build Manager

Maintains and extends configure and build subsystems. Reviews smoke reports
and attempts to extend platform support.

=head2 Lead Tester

Develops, maintains, and extends test suite and testing tools. Responsible
for testing goals, including complete coverage of core components on targeted
platforms.

=head2 Platform Porter

Develops and maintains Parrot for a particular platform, making
portability fixes or creating installation packages.

=head2 Patch Monster

Reviews and applies patches submitted by general contributors, keeping an eye
on conformance with coding standards and desirability of features.

=head1 CONTRIBUTORS

Contributors are volunteers who write code or documentation patches, take
part in email or online conversations, or contribute to the project in other
ways. All volunteer contributions are appreciated and recognized. All
volunteers who contribute to a file in the Parrot repository may add their
name to the CREDITS file.

=head2 General Contributor

Many Contributors have no more specific classification--they may find a bug,
provide a patch, submit or respond to a question, write documentation, or
contribute in some other way.

=head2 Smoke Tester

Submits smoke reports on one or more platforms. No knowledge of parrot
internals necessary.

=head2 Cage Cleaner

Fixes failing tests, makes sure coding standards are implemented, reviews
documentation and examples. A class of tickets in the tracking system
(Trac) has been created for use by this group. This position encompasses
tasks from entry level to advanced, and is a good way to get familiar
with Parrot internals.

=head1 SEE ALSO

F<RESPONSIBILE_PARTIES>, F<docs/project/>

=cut
