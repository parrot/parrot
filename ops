{"version":1,"ops":[{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1248048219,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4NDk=","github-url":"https://github.com/parrot/parrot/issues/362#issuecomment-3502849"},"message":"\u003cp\u003e\nReplying to \u003ca class=\"new ticket\" href=\"http://trac.parrot.org/parrot/ticket/847\" title=\"todo: Interpreter - 'exec' and 'spawn' should split own args (new)\"\u003ejkeenan\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n This ticket formerly existed as \u003ca   href=\"http://rt.perl.org/rt3/Ticket/Display.html?id=31144\"\u003e\u003cspan class=\"icon\"\u003eÂ \u003c/span\u003eRT #31144\u003c/a\u003e.  It was created by Coke on Aug 15 2004.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nMany of our older RT tickets are the results of the 'ticketization' of \u003ctt\u003eTODO\u003c/tt\u003e or \u003ctt\u003eXXX\u003c/tt\u003e comments found in the source code.  Paul T Cochrane opened a couple hundred such tickets two years ago. And, as I look at RT \u003ca class=\"missing ticket\"\u003e#31144\u003c/a\u003e, I believe that Coke was taking the same approach there.\n\u003c/p\u003e\n\n\u003cp\u003e\nTicketizing \u003ctt\u003eTODO\u003c/tt\u003e comments, however, only gets us so far toward resolving the issues.  If the original inline comments were very terse -- and most of them were -- we of the next generation have to raise questions about the issues before we can start to work on code.\n\u003c/p\u003e\n\n\u003cp\u003e\nSo let me ask some questions that anyone taking up this ticket would have to ask:\n\u003c/p\u003e\n\n\u003cp\u003e\n1.  \u003ci\u003eCan you provide an example of how allowing the shell to break up command-line arguments would be dangerous?\u003c/i\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n2.  \u003ci\u003eOTOH, are there circumstances in which allowing the shell to break up those arguments is perfectly safe?\u003c/i\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n3.  \u003ci\u003eDo we already have other Parrot functions which correctly handle command-line arguments?\u003c/i\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\n4.  Here's the source code for the \u003ctt\u003espawnw\u003c/tt\u003e ops:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003einline op spawnw(out INT, in STR) {\n  $1 = Parrot_Run_OS_Command(interp, $2);\n}\ninline op spawnw(out INT, invar PMC) {\n  $1 = Parrot_Run_OS_Command_Argv(interp, $2);\n}\n\u003c/pre\u003e\u003cp\u003e\nEach variation runs on a variation of \u003ctt\u003eParrot_Run_OS_Command()\u003c/tt\u003e.  Is \u003cstrong\u003ethat\u003c/strong\u003e function the real, underlying problem?\n\u003c/p\u003e\n\n\u003cp\u003e\n5.  \u003ci\u003eIs the \u003ctt\u003eexec\u003c/tt\u003e function referred to in this ticket what is now known as \u003ctt\u003eParrot_exec\u003c/tt\u003e?\u003c/i\u003e  (Posed because the string \u003ctt\u003eexec\u003c/tt\u003e shows up many times when you grep the repository, but in no cases that self-evidently match the case in this ticket.)\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\u003cbr /\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1309664747,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4NTA=","github-url":"https://github.com/parrot/parrot/issues/362#issuecomment-3502850"},"message":"\u003cp\u003e\nCan anyone reply to the questions posed in this ticket?\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n 1.  \u003ci\u003eCan you provide an example of how allowing the shell to break up command-line arguments would be dangerous?\u003c/i\u003e\n 2.  \u003ci\u003eOTOH, are there circumstances in which allowing the shell to break up those arguments is perfectly safe?\u003c/i\u003e\n 3.  \u003ci\u003eDo we already have other Parrot functions which correctly handle command-line arguments?\u003c/i\u003e\n 4.  Here's the source code for the \u003ctt\u003espawnw\u003c/tt\u003e ops:\n {{{\n inline op spawnw(out INT, in STR) {\n   $1 = Parrot_Run_OS_Command(interp, $2);\n }\n inline op spawnw(out INT, invar PMC) {\n   $1 = Parrot_Run_OS_Command_Argv(interp, $2);\n }\n }}}\n Each variation runs on a variation of \u003ctt\u003eParrot_Run_OS_Command()\u003c/tt\u003e.  Is \u003cstrong\u003ethat\u003c/strong\u003e function the real, underlying problem?\n 5.  \u003ci\u003eIs the \u003ctt\u003eexec\u003c/tt\u003e function referred to in this ticket what is now known as \u003ctt\u003eParrot_exec\u003c/tt\u003e?\u003c/i\u003e  (Posed because the string \u003ctt\u003eexec\u003c/tt\u003e shows up many times when you grep the repository, but in no cases that self-evidently match the case in this ticket.)\n\u003c/p\u003e\n\u003c/blockquote\u003e","files":null}]}