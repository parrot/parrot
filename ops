{"version":1,"ops":[{"type":3,"author":{"id":"e6ebaecce565c58b3e91ddb32c09e93c5f646822"},"timestamp":1336922861,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU2NzY5NzU=","github-url":"https://github.com/parrot/parrot/issues/770#issuecomment-5676975"},"message":"I don't think we need a test if we have the headerizer enforce it.  I'll take care of it.","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1336951531,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU2ODA0OTA=","github-url":"https://github.com/parrot/parrot/issues/770#issuecomment-5680490"},"message":"I agree that we can probably get the headerizer to enforce this.  But before I saw petdance's comment, I took a go at the problem and have modified t/codingstd/c_function_docs.t.  I have pushed that to github in the 770/order branch.  Here's the diff:\n\n``` perl\ndiff --git a/t/codingstd/c_function_docs.t b/t/codingstd/c_function_docs.t\nindex 2b27aba..c3bacb6 100644\n--- a/t/codingstd/c_function_docs.t\n+++ b/t/codingstd/c_function_docs.t\n@@ -36,7 +36,7 @@ my $headerizer = Parrot::Headerizer-\u003enew;\n my @files = grep {/\\.(c|h)$/ } @ARGV ? @ARGV :\n     map {s/^$PConfig{build_dir}\\///; $_} map {s/\\\\/\\//g; $_} map {$_-\u003epath} $DIST-\u003eget_c_language_files();\n\n-plan tests =\u003e scalar @files;\n+plan tests =\u003e (scalar @files) * 2;\n\n my %todos;\n while (\u003cDATA\u003e) {\n@@ -50,11 +50,15 @@ foreach my $path (@files) {\n\n     my $buf = $DIST-\u003eslurp($path);\n     my @missing_docs;\n+    my @bad_order;\n\n     my @function_decls = $headerizer-\u003eextract_function_declarations($buf);\n\n     for my $function_decl (@function_decls) {\n\n+        if ($function_decl =~ m/^\\S+.*PARROT_EXPORT/s) {\n+            push @bad_order, $function_decl;\n+        }\n         my $escaped_decl = $headerizer-\u003egenerate_documentation_signature($function_decl);\n\n         my $missing = '';\n@@ -82,11 +86,16 @@ foreach my $path (@files) {\n     TODO: {\n         local $TODO = 'Missing function docs' if $todos{$path};\n\n-    ok ( ! @missing_docs, $path)\n+    ok ( ! @missing_docs, \"$path: C functions documented\")\n         or diag( @missing_docs\n             . \" function(s) lacking documentation:\\n\"\n             . join (\"\\n\", @missing_docs, \"\\n\"));\n     }\n+    ok ( ! @bad_order,\n+        \"$path: PARROT_EXPORT, if present, is in correct position\")\n+        or diag( @bad_order\n+            . \" function(s) have PARROT_EXPORT in position other than first:\\n\"\n+            . join (\"\\n\", @bad_order, \"\\n\"));\n }\n\n __DATA__\n```\n\nHowever, it should be noted that this test finds and fails 3 function declarations which are not, in fact, preventing us from compiling Parrot with g++.\n\n``` perl\n$ prove t/codingstd/c_function_docs.t t/codingstd/c_function_docs.t .. 1/470 \n#   Failed test 'src/gc/fixed_allocator.c: PARROT_EXPORT, if present, is in correct position'\n#   at t/codingstd/c_function_docs.t line 94.\n# 1 function(s) have PARROT_EXPORT in position other than first:\n# PARROT_CANNOT_RETURN_NULL\n# PARROT_EXPORT\n# void *\n# Parrot_gc_pool_allocate(PARROT_INTERP, ARGMOD(Pool_Allocator * pool))\n# \n\n#   Failed test 'src/nci/signatures.c: PARROT_EXPORT, if present, is in correct position'\n#   at t/codingstd/c_function_docs.t line 94.\n# 1 function(s) have PARROT_EXPORT in position other than first:\n# PARROT_CANNOT_RETURN_NULL\n# PARROT_EXPORT\n# PMC *\n# Parrot_nci_parse_signature(PARROT_INTERP, ARGIN(STRING *sig_str))\n# \nt/codingstd/c_function_docs.t .. 229/470 \n#   Failed test 'src/scheduler.c: PARROT_EXPORT, if present, is in correct position'\n#   at t/codingstd/c_function_docs.t line 94.\n# 1 function(s) have PARROT_EXPORT in position other than first:\n# PARROT_CANNOT_RETURN_NULL\n# PARROT_EXPORT\n# opcode_t*\n# Parrot_cx_run_scheduler(PARROT_INTERP, ARGIN(PMC *scheduler), ARGIN(opcode_t *next))\n# \n# Looks like you failed 3 tests of 470.\nt/codingstd/c_function_docs.t .. Dubious, test returned 3 (wstat 768, 0x300)\nFailed 3/470 subtests \n\nTest Summary Report\n-------------------\nt/codingstd/c_function_docs.t (Wstat: 768 Tests: 470 Failed: 3)\n  Failed tests:  74, 136, 272\n  Non-zero exit status: 3\nFiles=1, Tests=470,  1 wallclock secs ( 0.03 usr  0.00 sys +  0.94 cusr  0.02 csys =  0.99 CPU)\nResult: FAIL\n```\n\nSo, perhaps our diagnosis of the problem needs to be refined.\n\nThank you very much.\nJim Keenan","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1336955000,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU2ODA4MjM=","github-url":"https://github.com/parrot/parrot/issues/770#issuecomment-5680823"},"message":"PARROT_CANNOT_RETURN_NULL expands to this:\n\n```\n/*@notnull@*/\n```\n\nThe comment can go anywhere with respect to the `extern \"C\"` in PARROT_EXPORT. However, it appears that the attributes which use the `__attribute__` syntax must go after the `extern \"C\"`. I don't have any documentation to support this, it's all based on some local trial-and-error testing.\n\nIn any case, we know that PARROT_EXPORT needs to go ahead of some modifiers, and other modifiers appear able to be used in any order. Even if the test has a few false positives, I think it's still a good test and a good convention to follow.","files":null},{"type":3,"author":{"id":"e6ebaecce565c58b3e91ddb32c09e93c5f646822"},"timestamp":1336959370,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU2ODEyNjM=","github-url":"https://github.com/parrot/parrot/issues/770#issuecomment-5681263"},"message":"Any reason not to go ahead and merge this to master?","files":null},{"type":3,"author":{"id":"e6ebaecce565c58b3e91ddb32c09e93c5f646822"},"timestamp":1336959466,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU2ODEyNzA=","github-url":"https://github.com/parrot/parrot/issues/770#issuecomment-5681270"},"message":"A handy way to do the \"check to see if an array is empty and diag them if it isn't\" is to do an `is_deeply( @actual, [], 'message' )`.  That way the differences spew out and you don't have to call an extra diag().","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1336962432,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU2ODE2NzI=","github-url":"https://github.com/parrot/parrot/issues/770#issuecomment-5681672"},"message":"As discussed on IRC, I'm going to try to refine the regex and have it ready for merge after Tuesday's release.  See 770/order branch.","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1337392275,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU3OTg4MTM=","github-url":"https://github.com/parrot/parrot/issues/770#issuecomment-5798813"},"message":"I merged the 770/order branch into master tonight.  Take it away, mr. petdance!","files":null},{"type":3,"author":{"id":"e6ebaecce565c58b3e91ddb32c09e93c5f646822"},"timestamp":1337399291,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU3OTkyMzE=","github-url":"https://github.com/parrot/parrot/issues/770#issuecomment-5799231"},"message":"If you've got it covered by the test, then I see no need to have the headerizer enforce it.  Thanks for doing the text, @jkeenan. I'm closing the ticket.","files":null},{"type":4,"author":{"id":"e6ebaecce565c58b3e91ddb32c09e93c5f646822"},"timestamp":1337399291,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTU4MTQ4NjQ="},"status":2}]}