{"version":1,"ops":[{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1241146373,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM4NzY=","github-url":"https://github.com/parrot/parrot/issues/646#issuecomment-3503876"},"message":"Trac commenter: allison\n\n\u003cp\u003e\nHi,\n\u003c/p\u003e\n\n\u003cp\u003e\nThe idea that I have about a plugin is that consist of two parts.\n\u003c/p\u003e\n\n\u003cp\u003e\nA group of files that are going to be transformed for a set of tools(like a compiler).\n\u003c/p\u003e\n\n\u003cp\u003e\nA configuration script that have the parameters passed to this tools.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe script is something like\n\u003c/p\u003e\n\n\u003cp\u003e\n[plugin]\nplugin_name      = myplugin\nplugin_dir       = /home/miuser/myplugindir    #or '/home/miuser/miplugin'\ninstalled_plugin = /usr/local/application      #is installed in /usr/local/application/myplugin\n\u003c/p\u003e\n\n\u003cp\u003e\n[compiler]\ncompiler_name = gcc\ninstall_root  = installed_plugin\n#output_extension =\n#if output_extension is a comment uses the default extension\n\u003c/p\u003e\n\n\u003cp\u003e\nIt can be parsed using regex\n\u003c/p\u003e\n\n\u003cp\u003e\nThe apache configuration file uses something like namespaces or blocks\n\u003c/p\u003e\n\n\u003cp\u003e\nI think tests can be plugins\n\u003c/p\u003e\n\n\u003cp\u003e\nIt's only one instruction\n\u003c/p\u003e\n\n\u003cp\u003e\n[script]\nlanguage_used = perl\n\u003c/p\u003e\n\n\u003cp\u003e\nAll the languages can be made pluggins, and thinking in nanoparrot pasm and pir can be handled like plugins too.\n\u003c/p\u003e\n\n\u003cp\u003e\nSincerely,\n\u003c/p\u003e\n\n\u003cp\u003e\nIgor\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0cd3b02130a8b42e1ef2ea26b102fedb4bb839e4"},"timestamp":1242561376,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM4Nzc=","github-url":"https://github.com/parrot/parrot/issues/646#issuecomment-3503877"},"message":"\u003cp\u003e\nWe already have dynamic and pluggable HLLs, PMCs, and ops.  We also have dynamic (though not yet pluggable) runcores and GCs.  Similarly, I/O objects are pluggable because they're just PMCs.  Though the I/O subsystem itself may or may not be layerable enough to take full advantage of that... I would love to be able to push an \"ssl\" layer onto an existing tcp connection filehandle, but maybe the intention is to use PMC subclassing for that (somehow) instead.\n\u003c/p\u003e\n\n\u003cp\u003e\nThere are two further candidates I can find which might be suitable for pluggability: charsets and encodings.  I wasn't able to find anything else suitable for hotplugging in my (naive, 10-minute) review of the Parrot core.  Though I'm sure there will be more things by the time parrot version 3.6 rolls around.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1242593945,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM4Nzg=","github-url":"https://github.com/parrot/parrot/issues/646#issuecomment-3503878"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/624#comment:2\" title=\"Comment 2 for Ticket #624\"\u003eInfinoid\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n We already have dynamic and pluggable HLLs, PMCs, and ops.  We also have dynamic (though not yet pluggable) runcores and GCs.  Similarly, I/O objects are pluggable because they're just PMCs.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nI think we're also going to want to include compiler front-ends in this list. IMCC and PIRC should be able to be swapped out for other front-ends if wanted.\n\u003c/p\u003e\n\n\u003cp\u003e\nAs to the idea of a pluggable GC, I think that it is certainly very possible to do. Once we've modified Parrot to support compacting/compiling GCs, we will be able to deinitialize one core without finalizing it, initialize the next core, and then move all the headers from one to the other. Some cores may have an interchangable storage format so we could just move the pools from one to the other. In other cases will will have to allocate new pools and arenas and move the headers to them. So long as we are not in the middle of a mark or a sweep phase, it should be very possible to hot-plug cores at runtime.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1248227136,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM4Nzk=","github-url":"https://github.com/parrot/parrot/issues/646#issuecomment-3503879"},"message":"\u003cp\u003e\nimcc and pirc shouldn't be swappable, long term. Long term we should have one or the other. (short term yes, so we can actually test the new one.)\n\u003c/p\u003e\n\n\u003cp\u003e\nGC is nice to have as pluggable, but there's another ticket to eliminate most of the non-default options. (leaving a don't-use-this version as the only other alternative.)\n\u003c/p\u003e\n\n\u003cp\u003e\nAs soon as \"the first part\" in the description is covered, this ticket should be closed and specific tickets for those identified candidates should be opened.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1248228274,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM4ODA=","github-url":"https://github.com/parrot/parrot/issues/646#issuecomment-3503880"},"message":"\u003cp\u003e\nI disagree, I think compiler frontends should be swappable. We need to think about languages that choose to write a compiler frontend in C instead of PCT. They should have an easy straight-forward pluggable interface to swap their compiler for IMCC/PIRC.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1248228519,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM4ODE=","github-url":"https://github.com/parrot/parrot/issues/646#issuecomment-3503881"},"message":"\u003cp\u003e\nAre you suggesting that we provide a way for end users of parrot to override the PIR, PASM, and PASM1 compilers used by parrot itself?\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1248228774,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM4ODI=","github-url":"https://github.com/parrot/parrot/issues/646#issuecomment-3503882"},"message":"\u003cp\u003e\nIf a user was so industrious as to write his own compiler for PIR or PASM, they should definitely be able to use that instead, yes. We need to think bigger though. What if a person wanted to write the compiler for an HLL in Lex/Yacc/C instead of in PCT? What if the Lua team wanted to write the Lua parser in C for performance reasons? They would swap out IMCC with a pluggable Lua compiler frontend and use that to compile directly to bytecode.\n\u003c/p\u003e\n\n\u003cp\u003e\nAlso think about runtime calls to compreg, which could load either a .pbc library file that contained a PCT-based compiler, or could load a shared binary library that implements the frontend for it instead. This is how the PIR compreg could work, and could be loadable dynamically if needed (and not loaded at all if not needed).\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1248229305,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM4ODM=","github-url":"https://github.com/parrot/parrot/issues/646#issuecomment-3503883"},"message":"\u003cp\u003e\nI think \"allowing users to compile from their HL directly to bytecode\" (+1)  is not the same as \"allow someone to replace the builtin PIR/PASM/PASM1 compilers\" (-1)\n\u003c/p\u003e\n\n\u003cp\u003e\nNote that if they swapped out the IMMC compiler with something that compiled a HLL instead of PIR they would break anything that compiled PIR, which is most HLLs.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1248232629,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM4ODQ=","github-url":"https://github.com/parrot/parrot/issues/646#issuecomment-3503884"},"message":"\u003cp\u003e\nThink of it as \"Allow the user to swap the default compiler frontend with a module of their choosing\". I don't imagine that a user will ever take the effort to implement their own PIR compiler, that's a huge waste of effort for zero gain. Instead, they will be writing their own frontends in C that compile languages that are not PIR/PASM, and actually tell parrot to never load IMCC/PIRC at all.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1293416052,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM4ODU=","github-url":"https://github.com/parrot/parrot/issues/646#issuecomment-3503885"},"message":"\u003cp\u003e\nMilestone 3.6 deleted\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1314490768,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM4ODY=","github-url":"https://github.com/parrot/parrot/issues/646#issuecomment-3503886"},"message":"\u003cp\u003e\nDoes keeping this wishlist item open in our bug tracking system serve any useful purpose?\n\u003c/p\u003e\n\n\u003cp\u003e\nIf someone wants to propose \"to change a substantial part of the core to dynamic extensions,\" wouldn't that purpose be better served by drafting a proposal and publishing it first as a blog post or on parrot-dev?\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"099af60226e2576bd4ff0f5c2614b710c745cab6"},"timestamp":1325702443,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM4ODc=","github-url":"https://github.com/parrot/parrot/issues/646#issuecomment-3503887"},"message":"\u003cp\u003e\nHello.\n\u003c/p\u003e\n\n\u003cp\u003e\n+1 for jkeenan propose to close this ticket as wontfix due very broad description.\n\u003c/p\u003e\n\n\u003cp\u003e\n--\nBacek\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1336524209,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1OTAzNTM=","github-url":"https://github.com/parrot/parrot/issues/646#issuecomment-5590353"},"message":"Yes, I'm closing this ticket now. This \"pluggable everything\" sentiment would be better as part of a mission statement than as a ticket. It's not actionable, and in reality many parts of parrot probably shouldn't be pluggable because of performance and security concerns. I'm going to close this ticket now. If there are specific parts of parrot that should be pluggable (or more easily pluggable) but aren't, we can open specific TODO tickets for those cases.","files":null},{"type":4,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1336524210,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTUwNDY3Nzk="},"status":2}]}