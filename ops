{"version":1,"ops":[{"type":5,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1416582867,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDE5NjgyMDE4Mw=="},"added":["Sev-low"],"removed":[]},{"type":2,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1416613006,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50MTk3MDk2Mzcz"},"title":"--intval=int crash","was":"--intval=int crash"},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1416671302,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY0MDg0Mzcz","github-url":"https://github.com/parrot/parrot/issues/1145#issuecomment-64084373"},"message":"```\ngdb --args ./miniparrot -Iruntime/parrot/include config_lib.pir\nProgram received signal EXC_BAD_ACCESS, Could not access memory.\nReason: KERN_INVALID_ADDRESS at address: 0x000000000017d598\n0x000000000017d598 in ?? ()\n(gdb) p trace_pmc_dump(interp, sub_obj)\nNativePCCMethod=PMC(0x1028c5708)Cannot access memory at address 0x17d598\n( PMC c_mark )Cannot access memory at address 0x17d598\n(gdb) bt\n#0  0x000000000017d598 in ?? ()\ndest = VTABLE_invoke(interp, sub_obj, NULL);\nCannot access memory at address 0x17d598\n#1  0x0000000100089adb in Parrot_pcc_invoke_from_sig_object (interp=0x102107030, sub_obj=0x1028c5708, call_object=0x1028e3a78) at src/call/pcc.c:332\n#2  0x000000010008972f in Parrot_pcc_invoke_method_from_c_args (interp=0x102107030, pmc=0x1028e3a00, method_name=0x1028d9758, signature=0x100224ea3 \"S-\u003eP\") at src/call/pcc.c:221\n#3  0x0000000100208c1e in imcc_compile_file_api (interp_pmc=0x1028dae50, compiler=0x1028e3a00, file=0x1028d9698, pbc=0x7fff5fbff700) at compilers/imcc/api.c:174\n#4  0x00000001000018d9 in run_imcc (interp=0x1028dae50, sourcefile=0x1028d9698, flags=0x7fff5fbff760) at frontend/parrot/main.c:281\n#5  0x00000001000016b4 in main (argc=3, argv=0x7fff5fbff800) at frontend/parrot/main.c:217\n```\n\nI suspect this ptr truncation in NativePCCMethod.invoke:\n\n```\n        fptr = (native_pcc_method_t)D2FPTR(func);\n        fptr(INTERP, SELF);\n```\n\nand indeed it is:\n\n```\n * NOTE!  UINTVAL is incorrect below.  It should be UINTPTR or something like\n * that. The equivalent of C99's uintptr_t- a non-pointer data type that can\n * hold a pointer.\n */\n#define D2FPTR(x) UINTVAL2PTR(funcptr_t, PTR2UINTVAL(x))\n```","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1416672601,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY0MDg1MTAx","github-url":"https://github.com/parrot/parrot/issues/1145#issuecomment-64085101"},"message":"After fixing this, next error in the Buffer_pool layout:\n\n```\n0x0000000100081987 in Parrot_gc_str_reallocate_string_storage (interp=0x102107040, gc=0x102107470, str=0x103007158, newsize=4096) at src/gc/string_gc.c:418\n418     Buffer_pool(str)-\u003efreed += old_size;\n(gdb) bt\n#0  0x0000000100081987 in Parrot_gc_str_reallocate_string_storage (interp=0x102107040, gc=0x102107470, str=0x103007158, newsize=4096) at src/gc/string_gc.c:418\n#1  0x000000010007caf9 in gc_gms_reallocate_string_storage (interp=0x102107040, str=0x103007158, size=4096) at src/gc/gc_gms.c:1790\n#2  0x0000000100071baa in Parrot_gc_reallocate_string_storage (interp=0x102107040, str=0x103007158, newsize=4096) at src/gc/api.c:533\n```","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1416743003,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY0MTE1MTE5","github-url":"https://github.com/parrot/parrot/issues/1145#issuecomment-64115119"},"message":"short cannot work, pointer values are stored and passed in registers for PMCs pointer, addrregistry, nci, and many more.\nint can only work on 32bit systems, tested ok there.\nlong, long int, long long, long long int do work fine.\n\nCheck and exit for invalid intval in auto::sizes.","files":null},{"type":4,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1416747814,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTk3MzEyMDAy"},"status":2}]}