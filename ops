{"version":1,"ops":[{"type":1,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1344533888,"metadata":{"github-id":"MDU6SXNzdWU2MTMyNzM0","github-url":"https://github.com/parrot/parrot/issues/810","origin":"github"},"title":"runloop_id_counter race with threads, t/pmc/task.t","message":"On slow machines `t/pmc/task.t` is unstable in the threads branch. It will hang after 4 tests or right at the first test.\n\nSee http://blogs.perl.org/users/rurban/2012/08/threadsanitizer.html \nand http://smolder.parrot.org/app/projects/report_details/30427\n\nReproduced on a fast linux amd64 in the threads branch:\n\n```\n$ tsan-r4356-amd64-linux-self-contained.sh ./parrot t/pmc/task.t\n==12040== ThreadSanitizer, a data race detector\n==12040== Copyright (C) 2008-2010, and GNU GPL'd, by Google Inc.\n==12040== Using Valgrind-3.8.0.SVN and LibVEX; rerun with -h for copyright info\n==12040== Command: ./parrot t/pmc/task.t\n==12040== \n==12040== ThreadSanitizerValgrind r4356: hybrid=no\n==12040== INFO: Allocating 256Mb (32 * 8M) for Segments.\n==12040== INFO: Will allocate up to 640Mb for 'previous' stack traces.\n1..6\nok 1 - initialized\nok 2 task1 ran\nok 3 task2 ran\nok 4 sub1 ran\n==12040== INFO: T4 has been created by T0. Use --announce-threads to see the creation stack.\n==12040== INFO: T5 has been created by T0. Use --announce-threads to see the creation stack.\n==12040== WARNING: Possible data race during write of size 4 at 0x530FCA0: {{{\n==12040==    T5 (L{}):\n==12040==     #0  reset_runloop_id_counter /usr/src/parrot/threads/src/call/ops.c:155\n==12040==     #1  Parrot_thread_outer_runloop /usr/src/parrot/threads/src/thread.c:317\n==12040==   Concurrent write(s) happened at (OR AFTER) these points:\n==12040==    T4 (L{}):\n==12040==     #0  new_runloop_jump_point /usr/src/parrot/threads/src/call/ops.c:188\n==12040==     #1  runops /usr/src/parrot/threads/src/call/ops.c:88\n==12040==     #2  Parrot_pcc_invoke_from_sig_object /usr/src/parrot/threads/src/call/pcc.c:338\n==12040==     #3  Parrot_ext_call /usr/src/parrot/threads/src/extend.c:158\n==12040==     #4  Parrot_Task_invoke /usr/src/parrot/threads/src/pmc/task.c:168\n==12040==     #5  Parrot_pcc_invoke_from_sig_object /usr/src/parrot/threads/src/call/pcc.c:330\n==12040==     #6  Parrot_ext_call /usr/src/parrot/threads/src/extend.c:158\n==12040==     #7  Parrot_cx_next_task /usr/src/parrot/threads/src/scheduler.c:222\n==12040==     #8  Parrot_thread_outer_runloop /usr/src/parrot/threads/src/thread.c:319\n==12040==   Address 0x530FCA0 is 0 bytes inside data symbol \"runloop_id_counter\"\n==12040==    Race verifier data: 0x5007373,0x50073F7\n==12040== }}}\n^C==12040== \n==12040== ThreadSanitizer summary: reported 1 warning(s) (1 race(s))\n/home/rurban/bin/tsan-r4356-amd64-linux-self-contained.sh: line 24: 12040 Killed\n```\n\nIn comparison the result from `master`:\n\n```\n==19336== ThreadSanitizer, a data race detector\n==19336== Copyright (C) 2008-2010, and GNU GPL'd, by Google Inc.\n==19336== Using Valgrind-3.8.0.SVN and LibVEX; rerun with -h for copyright info\n==19336== Command: ./parrot t/pmc/task.t\n==19336== \n==19336== ThreadSanitizerValgrind r4356: hybrid=no\n==19336== INFO: ThreadSanitizer memory limit: 3072MB\n==19336== INFO: Allocating 192Mb (24 * 8M) for Segments.\n==19336== INFO: Will allocate up to 320Mb for 'previous' stack traces.\n1..10\nok 1 - task1 ran\nok 2 - sub1 ran\nok 3 - task2 ran\nok 4 - Got message after block\nok 5 - Got existing message\nok 6 - task_to_kill running\nok 7 - task_to_kill killed\nok 8 - in wait_sub1\nok 9 - After wait\nok 10 - Pre-empt and exit\n==19336== \n==19336== ThreadSanitizer summary: reported 0 warning(s) (0 race(s))\n```","files":null}]}