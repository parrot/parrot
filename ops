{"version":1,"ops":[{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1356045901,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExNTk2ODU5","github-url":"https://github.com/parrot/parrot/issues/889#issuecomment-11596859"},"message":"Can we get some more specs for exactly what is meant by \"hyper implemented in pir\".\n\nFor example, what function signature should the hyper() opcode have?","files":null},{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1356116725,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExNjIzNjcz","github-url":"https://github.com/parrot/parrot/issues/889#issuecomment-11623673"},"message":"We're not looking for a hyper \"opcode\", unless of course creating new opcodes is Parrot's suggested way to do this.\n\nWhat I'm looking for are code examples that illustrate Parrot's expectation for implementing threading of a Perl 6 statement like:\n\n```\nmy @c = @a »+« @b;\n```\n\nOr, for an even more awesome example, give an example of threading something like:\n\n```\nmy @y = @m »*« @x »+« @b;\n```\n\nPm","files":null},{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1356117148,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExNjIzOTA0","github-url":"https://github.com/parrot/parrot/issues/889#issuecomment-11623904"},"message":"From a larger perspective: The rakudo \u0026 nqp devs are now getting comments like \"Parrot has threads now, you just need to modify nqp/rakudo to use them\", but we don't have enough details or understanding to be able to do that. Some of the developers also have some doubts about the threading model/implementation itself that need clarification before we can proceed.\n\nSo, at this point it would seem most helpful for all of us to have some examples that show how Parrot expects threading to work for some simple Perl 6 constructs, such as the hyperops.  Then NQP/Rakudo devs can better understand how to translate Parrot's examples into things that work in our compilation environments, or we can better point out where some of the difficulties lie.\n\nPm","files":null},{"type":3,"author":{"id":"75a999dc4b9d4cde7b7ba3b5c9ae3426aee55a46"},"timestamp":1375312844,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDIxOTAzNTAz","github-url":"https://github.com/parrot/parrot/issues/889#issuecomment-21903503"},"message":"it is a lot of code, but IMO it does `@a »+« @b`.\n\nhttps://gist.github.com/FROGGS/6127100","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1375317358,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDIxOTA2Nzc0","github-url":"https://github.com/parrot/parrot/issues/889#issuecomment-21906774"},"message":"LGTM","files":null},{"type":3,"author":{"id":"75a999dc4b9d4cde7b7ba3b5c9ae3426aee55a46"},"timestamp":1375635590,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDIyMDc0ODc4","github-url":"https://github.com/parrot/parrot/issues/889#issuecomment-22074878"},"message":"I remember a talk by nine++ at the YAPC::EU 2012, where he explained the use of green threads, to do something like: \"Hey main thread, please set the value of var $x to $y.\"\n\nSo, after some testing I came to this: https://gist.github.com/FROGGS/0cfae647d28c493df73e\n`add-i-mt.t` is working pretty well, but `aplusb.nqp` only uses fractions of the capacity of other cores when creating the threads, after that, it only uses one core.\n\nIs there a way to work around that? If we can't compute in parallel when lexicals are involved, then I'm not sure how usable it is. I mean, we could clone @a and @b into PMCArrays, write the result into a PMCArray too, but this would only work for native types in combination with the simpliest operations like add.","files":null},{"type":3,"author":{"id":"75a999dc4b9d4cde7b7ba3b5c9ae3426aee55a46"},"timestamp":1424182856,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDc0Njc0MTc4","github-url":"https://github.com/parrot/parrot/issues/889#issuecomment-74674178"},"message":"**FROGGS:** in fact I still don't know how to do a non blocking lexical lookup\n**FROGGS:** (I am just talking about looking up variables, and subroutine to do some computation, I'm not even talking about writing to a lexical)\n**rurban:** check if the type is a Proxy, follow the proxy then, if not read it directly. if you need to write to a proxy, schedule a writer task","files":null},{"type":3,"author":{"id":"75a999dc4b9d4cde7b7ba3b5c9ae3426aee55a46"},"timestamp":1424183143,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDc0Njc0ODQy","github-url":"https://github.com/parrot/parrot/issues/889#issuecomment-74674842"},"message":"**FROGGS:** rurban: IIRC the lexical lookup _was_ blocking... you say this is not the case anymore? lexical lookup will happily run in any worker thread?\n**rurban:** FROGGS: every data access is lock-free, just not wait-free","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1424247508,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDc0ODI3OTMx","github-url":"https://github.com/parrot/parrot/issues/889#issuecomment-74827931"},"message":"Yes, only the nqp variant of the lexpad pmc is broken, the parrot variant works ok.\n`src/vm/parrot/pmc/nqplexpad.pmc` vs `src/pmc/lexpad.pmc`","files":null}]}