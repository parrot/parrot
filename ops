{"version":1,"ops":[{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1235185602,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwNTA=","github-url":"https://github.com/parrot/parrot/issues/415#issuecomment-3503050"},"message":"\u003cp\u003e\nReplying to \u003ca class=\"new ticket\" href=\"http://trac.parrot.org/parrot/ticket/364\" title=\"bug: ptr_alignment 8 not honored, sparc 64bit broken (new)\"\u003erurban\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n A strict 64bit cpu with a ptr_alignment=8 will break when reading pbc's or just frozen pmc's because our alignment when writing our bytecode is 16/ptrsize and not 16.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nNo.  You are mixing up units here.  The alignment is supposed to be on a 16-byte boundary.  However, the code is supposed to step through the pbc in steps of size sizeof(opcode_t).  Therefore, it is also true that the alignment is 16/sizeof(opcode_t), when measured in units of sizeof(opcode_t).\n\u003c/p\u003e\n\n\u003cp\u003e\nAs I have explained before, the ALIGN_16 macro assumes you are stepping through the bytecode in steps of sizeof(opcode_t).  If there are alignment problems, it seems likely to me that those problems are due to breaking that assumption earlier.  The problem is not the ALIGN_16 macro (though it could, of course, be replaced by a more defensive, but slower function), but in the steps preceeding the call to ALIGN_16 which are somehow violating the assumption that the reader is stepping through the file in units of sizeof(opcode_t).  For this problem here, a backtrace showing where the stream pointer came from would be helpful.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe decision to step through the file in units of sizeof(opcode_t) was a deliberate choice for at least two reasons:  efficiency, and avoiding compiler warnings.  gcc on SPARC in particular will issue warnings when casting from (char *) to things like (opcode_t *):\n\"warning: cast increases required alignment of target type\".  Please don't change that.\n\u003c/p\u003e\n\n\u003cp\u003e\nFor reading foreign files with a different sizeof(opcode_t), you are correct that you will have to step through the file in steps of the foreign stepsize.  But that's not the problem here -- everything is native.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1235419795,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwNTE=","github-url":"https://github.com/parrot/parrot/issues/415#issuecomment-3503051"},"message":"\u003cp\u003e\nI analyzed this further, but cannot test this.\nSee \u003ca   href=\"http://use.perl.org/~rurban/journal/38522\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003ehttp://use.perl.org/~rurban/journal/38522\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nI believe 8-byte ptr_alignment cannot be supported as now, because we do not enforce strict pairs of 4-byte data, as integer and opcodes. There can be an uneven number, and then we get a SIGBUS.\n\u003c/p\u003e\n\n\u003cp\u003e\nWe enforce 16-byte aligment at the start and end of segments and at end of strings, but not with integer and opcodes.\n\u003c/p\u003e\n\n\u003cp\u003e\nSo we should update the Sparc64 hints to use -xmemalign=4i, this is the best we can guarantee (untested).\n\u003c/p\u003e\n\n\u003cp\u003e\nFor the future we should discuss enforcing writing pairs of 4-byte data or padding uneven ending 4-byte data with a pad of one byte.\n\u003c/p\u003e\n\n\u003cp\u003e\nIt should also be tested if the pf_items (unsigned char*)stream++ are valid with Sparc64.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1235462140,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwNTI=","github-url":"https://github.com/parrot/parrot/issues/415#issuecomment-3503052"},"message":"Trac commenter: rurban\n\n\u003cp\u003e\nSorry you patch doesn't apply. It seems the debug output part has already been committed but in a different way. Can you check?\n\u003c/p\u003e\n\n\u003cp\u003e\nI've just testet -xmemalign=4s (we want a fault if we're not correct, not emulation) and it works and passes the tests (as far as solaris passes the tests at all ;)). The native_pbc tests are still TODO, however (and they don't pass ... but then they don't pass on amd64 either).\n\u003c/p\u003e\n\n\u003cp\u003e\nIf you could be more specific what I should test, I'd be happy to. On the other hand, it might not be worth all the effort and we'd rather just update the hints file and fix some problems that don't have a known work-around.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1235535132,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwNTM=","github-url":"https://github.com/parrot/parrot/issues/415#issuecomment-3503053"},"message":"\u003cp\u003e\nrg: We will stay with -xmemalign=4s until pbc will get fully portable.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe current goal is version 2.6 but I hope we will get it sooner.\nI already know why it failed. See \u003ca   href=\"http://use.perl.org/~rurban/journal/38522\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003ehttp://use.perl.org/~rurban/journal/38522\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nI also saw that my latest patch was wrong. I will update it soon.\nBut first I will try the hints patch and would like you to test that first, so that\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\n'perl Configure.pl --m=64'\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nworks without any hazzle.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1236086733,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwNTQ=","github-url":"https://github.com/parrot/parrot/issues/415#issuecomment-3503054"},"message":"2466 byte attachment from rurban\nat http://trac.parrot.org/parrot/raw-attachment/ticket/364/tt364-sparc-memalign.patch\n\n# ```Index: parrot-svn/config/init/hints/solaris.pm\n\n--- parrot-svn.orig/config/init/hints/solaris.pm    2009-02-18 16:58:21.000000000 +0100\n+++ parrot-svn/config/init/hints/solaris.pm 2009-03-02 19:55:40.015625000 +0100\n@@ -101,6 +101,23 @@\n         $conf-\u003edata-\u003edeltrigger( \"gccversion\", \"solaris_ieee\" );\n     };\n     $conf-\u003edata-\u003esettrigger( \"gccversion\", \"solaris_ieee\", $solaris_ieee_cb );\n+\n-    # Sparc64 Sun Pro cc has a strict default ptr_alignment of 8\n-    # See TT #364\n-    my $solaris_memalign_cb = sub {\n-        my ( $key, $gccversion ) = @_;\n  +\n-        if ($gccversion) {\n-            # Don't know how to do this for gcc.\n-        }\n-        elsif ($conf-\u003edata-\u003eget('byteorder') eq '87654321') { # sun pro cc Sparc64 only\n-            my $linkflags = $conf-\u003edata-\u003eget('linkflags');\n-            $conf-\u003edata-\u003eadd( ' ', linkflags =\u003e '-xmemalign=4s' )\n-                unless $linkflags =~ /-xmemalign/;\n-        }\n-        $conf-\u003edata-\u003edeltrigger( \"gccversion\", \"solaris_memalign\" );\n-    };\n-    $conf-\u003edata-\u003esettrigger( \"gccversion\", \"solaris_memalign\", $solaris_memalign_cb );\n  }\n  \n  1;\n  \n  # Index: parrot-svn/config/auto/alignptrs.pm\n  \n  --- parrot-svn.orig/config/auto/alignptrs.pm    2009-02-18 00:01:59.000000000 +0100\n  +++ parrot-svn/config/auto/alignptrs.pm 2009-03-03 12:22:45.328125000 +0100\n  @@ -37,7 +37,8 @@\n       $align = $conf-\u003edata-\u003eget('ptr_alignment');\n       $result_str .= \"configured: \";\n   }\n-    elsif ( $conf-\u003edata-\u003eget_p5('OSNAME') eq 'hpux' \u0026\u0026 $conf-\u003edata-\u003eget_p5('ccflags') !~ /DD64/ ) {\n-    elsif ( $conf-\u003edata-\u003eget_p5('OSNAME') eq 'hpux'\n- ```\n         \u0026\u0026 $conf-\u003edata-\u003eget_p5('ccflags') !~ /DD64/ ) {\n  \n   # HP-UX 10.20/32 hangs in this test.\n   $align = 4;\n  ```\n  \n  @@ -94,8 +95,16 @@\n  sub _finalize_result_str {\n     my $self = shift;\n     my ($align, $result_str) = @_;\n-    $result_str .= \" $align byte\";\n-    $result_str .= \"s\" unless $align == 1;\n-    # On 8-byte ptr_alignment we cannot read 4-byte pbc's. Warn the user about it.\n-    # TODO: inform the user to use --64compat for parrot. Milestone v2.6\n-    if ($align \u003e 4) {\n-        $result_str .= \" $align byte\";\n-        $result_str .= \"s (Warning: 4-byte pbc's cannot be read!)\";\n-    }\n-    else {\n-        $result_str .= \" $align byte\";\n-        $result_str .= \"s\" unless $align == 1;\n-    }\n   $self-\u003eset_result($result_str);\n  }\n\n```\n```","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1236108333,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwNTU=","github-url":"https://github.com/parrot/parrot/issues/415#issuecomment-3503055"},"message":"\u003cp\u003e\nwarn also at alignment check\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1236309612,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwNTY=","github-url":"https://github.com/parrot/parrot/issues/415#issuecomment-3503056"},"message":"\u003cp\u003e\ntt364-sparc-memalign.patch applied as r37130.\n\u003c/p\u003e\n\n\u003cp\u003e\nI'll open another ticket for the optional cmdline option to parrot (--64compat) to produce 8-byte packfiles on 4-byte archs.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1236630302,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwNTc=","github-url":"https://github.com/parrot/parrot/issues/415#issuecomment-3503057"},"message":"\u003cp\u003e\nThe patch to the hints/solaris.pm file in r37130 won't work.  The callback is triggering when gccversion is determined.  Unfortunately, at that time, byteorder hasn't been determined yet, so\nthe byteorder eq '87654321' condition will never be true.  I'll see if I can come up with a patch later today or tomorrow.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1236658380,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwNTg=","github-url":"https://github.com/parrot/parrot/issues/415#issuecomment-3503058"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/364#comment:13\" title=\"Comment 13 for Ticket #364\"\u003edoughera\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n I'll see if I can come up with a patch later today or tomorrow.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nUnfortunately, I lost way too much time today fighting other bugs and didn't get back to this.  I'm not sure if I'll have a chance to do anything before the 1.0 release.  Meanwhile, the hints/solaris.pm part of r37130 should probably be reverted, since all it does is cause a spurious warning:  'Use of uninitialized value in string eq at config/init/hints/solaris.pm line 113'.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1236795694,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwNTk=","github-url":"https://github.com/parrot/parrot/issues/415#issuecomment-3503059"},"message":"2837 byte attachment from doughera\nat http://trac.parrot.org/parrot/raw-attachment/ticket/364/pf_items.p4\n\n```diff -r -u parrot-current/include/parrot/packfile.h parrot-gcc64/include/parrot/packfile.h\n--- parrot-current/include/parrot/packfile.h    2009-03-11 07:42:34.000000000 -0400\n+++ parrot-gcc64/include/parrot/packfile.h  2009-03-11 08:28:05.000000000 -0400\n@@ -1031,7 +1031,7 @@\n PARROT_WARN_UNUSED_RESULT\n INTVAL PF_fetch_integer(\n     ARGIN_NULLOK(PackFile *pf),\n-    ARGIN(const opcode_t **stream))\n-    ARGIN(const char **stream))\n       **attribute__nonnull**(2);\n  \n  PARROT_WARN_UNUSED_RESULT\n  diff -r -u parrot-current/src/packfile/pf_items.c parrot-gcc64/src/packfile/pf_items.c\n  --- parrot-current/src/packfile/pf_items.c  2009-03-11 07:42:31.000000000 -0400\n  +++ parrot-gcc64/src/packfile/pf_items.c    2009-03-11 12:20:16.000000000 -0400\n  @@ -1098,24 +1098,24 @@\n  \n  PARROT_WARN_UNUSED_RESULT\n  INTVAL\n  -PF_fetch_integer(ARGIN_NULLOK(PackFile _pf), ARGIN(const opcode_t *_stream))\n  +PF_fetch_integer(ARGIN_NULLOK(PackFile _pf), ARGIN(const char *_stream))\n  {\n     ASSERT_ARGS(PF_fetch_integer)\n     INTVAL i;\n-    if (!pf || pf-\u003efetch_iv == NULL)\n-        return _(_stream)++;\n-    i = (pf-\u003efetch_iv)(_((const unsigned char *_)stream));\n-    TRACE_PRINTF_VAL((\"  PF_fetch_integer: 0x%x (%d) at 0x%x\\n\", i, i,\n-                      OFFS(*stream)));\n-    /\\* XXX assume sizeof (opcode_t) == sizeof (INTVAL) on the\n-     \\* machine producing this PBC.\n-     *\n-     \\* TODO TT #364 on Sparc 64bit: On pbc wordsize=4 but native ptrsize=8 and\n-     \\* ptr_alignment=8 the advance by 4 will signal BUS (invalid address alignment)\n-     \\* in PF_fetch_integer and elsewhere.\n-     */\n-    _((const unsigned char *_) (stream)) += pf-\u003eheader-\u003ewordsize;\n-    if (!pf || pf-\u003efetch_iv == NULL) {  /\\* Native transforms */\n-        memcpy(\u0026i, *stream, sizeof (INTVAL));\n-        *stream += sizeof (INTVAL);\n-    }\n-    else {\n-        i = (pf-\u003efetch_iv)(_((const unsigned char *_)stream));\n-        TRACE_PRINTF_VAL((\"  PF_fetch_integer: 0x%x (%d) at 0x%x\\n\", i, i,\n-                          OFFS(*stream)));\n-        /\\* XXX assume sizeof (opcode_t) == sizeof (INTVAL) on the\n-         \\* machine producing this PBC.\n-         */\n-        *stream += pf-\u003eheader-\u003ewordsize;\n-    }\n   return i;\n  }\n\ndiff -r -u parrot-current/src/pmc_freeze.c parrot-gcc64/src/pmc_freeze.c\n--- parrot-current/src/pmc_freeze.c 2009-03-11 07:42:32.000000000 -0400\n+++ parrot-gcc64/src/pmc_freeze.c   2009-03-11 08:30:52.000000000 -0400\n@@ -872,7 +872,7 @@\n     const char \\* const   start  = (char _)io-\u003eimage-\u003estrstart;\n     char               *_opcode = \u0026io-\u003eimage-\u003estrstart;\n     const INTVAL i              = PF_fetch_integer(io-\u003epf,\n-                                    (const opcode_t **)opcode);\n- ```\n                                 (const char **)opcode);\n  ```\n  \n   io-\u003eimage-\u003ebufused -= ((char *)io-\u003eimage-\u003estrstart - start);\n   PARROT_ASSERT((int)io-\u003eimage-\u003ebufused \u003e= 0);\n\n```\n```","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1236813516,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwNjA=","github-url":"https://github.com/parrot/parrot/issues/415#issuecomment-3503060"},"message":"\u003cp\u003e\nI think the attached patch (pf_items.p4) will stop the immediate core dump observed in the original bug report.  (It may, of course, just move it to somewhere else!)\n\u003c/p\u003e\n\n\u003cp\u003e\nCould you please try this patch without the -xmemalign=4s compiler flag and report back?  If it fails, could you please report on exactly what command failed?  Also, could you please attach the 'myconfig' file generated by Configure.pl?\n\u003c/p\u003e\n\n\u003cp\u003e\nIt might make sense to try running just the core tests with \u003ctt\u003e perl t/harness --core-tests \u003c/tt\u003e to see if there's a very simple pir test file that triggers the bug.\n\u003c/p\u003e\n\n\u003cp\u003e\nThanks.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1236920748,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwNjE=","github-url":"https://github.com/parrot/parrot/issues/415#issuecomment-3503061"},"message":"Trac commenter: rurban\n\n```\n    \u003cp\u003e\n```\n\nSo I wanted to check out that patch, however to effectively verify that it fixes anything, I've rebuilt parrot without -xmemalign=4s and lo and behold, it worked this time. (\u003ca   href=\"http://smolder.plusthree.com/app/public_projects/report_details/18938\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003eVerification\u003c/a\u003e) So something between now and the time we discovered the problem has changed, so that the problem is either fixed or not just not triggered. Obviously this makes it very hard to determine if the patch is still required. Just from reading it, I'm inclined to say it shouldn't be required. Since I guess my vote doesn't count for much, I'm going to let others decide whether to close. I am however making this much less important.\n\u003c/p\u003e\n\n\u003cp\u003e\nAlso, +1 on reverting r37130. It doesn't work and currently doesn't seem neccessary anymore, either. But a big thanks to rurban for the effort.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1236920900,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwNjI=","github-url":"https://github.com/parrot/parrot/issues/415#issuecomment-3503062"},"message":"\u003cp\u003e\nAndy, It's not just fetch_integer which might get hit by a 4byte alignment.\n\u003c/p\u003e\n\n\u003cp\u003e\nIt is every PF_fetch_* function, since we guarantee only 4-byte alignment when writing 32bit pbc's. Even if it works on sparc64 on the tested pbc's I would not feel safe without changing all fetchers.\n\u003c/p\u003e\n\n\u003cp\u003e\nBut it's definitely worth a good test.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1236933359,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwNjM=","github-url":"https://github.com/parrot/parrot/issues/415#issuecomment-3503063"},"message":"\u003cp\u003e\nYes, I know that.  But fetch_integer is the place where this particular core dump was reported, so fetch_integer is what I proposed fixing first.  It also has the advantage that it's only called from one place in the entire parrot tree, so it's an easily localizable, nicely contained change, worth testing.\n\u003c/p\u003e\n\n\u003cp\u003e\nIf it helped avoid this core dump, I fully expected the core dump to be shifted to a fetch_opcode call.  Then it would make sense to think about expanding this strategy to fetch_opcode as well.\n\u003c/p\u003e\n\n\u003cp\u003e\nI think a patch like this is essentially unavoidable if parrot is going to read foreign pbc files from the same set of functions used to read native pbc files.  We can't step ahead by 1/2 an opcode_t.\n\u003c/p\u003e","files":null}]}