{"version":1,"ops":[{"type":1,"author":{"id":"0a92d3f9f01a5a4514d86646f7597e2b20e9fd61"},"timestamp":1345469670,"metadata":{"github-id":"MDU6SXNzdWU2MzI1MzY1","github-url":"https://github.com/parrot/parrot/issues/816","origin":"github"},"title":"Parrot interpreters only die once","message":"Hi everybody,\n\nIn a branch of mod_parrot designed to ease the writing of exception handlers, I noted that the API cannot catch exceptions twice. \n\nLet me be a little more specific about that. If I run some program, and it throws an exception and the interpreter 'dies', it returns to the api call via longjmp(), and sets some values upon the interpreter object. Based upon these values, the api call returns 0, upon which the exception is retrieved and inspected. Best example: [show_last_error_and_exit](https://github.com/parrot/parrot/blob/master/docs/embed_new.pod#synopsis).\n\nWhat happens in mod_parrot is that the same process will have multiple interpreters, in our case subsequently, and hopefully one day parallel. When an exception is thrown and not caught, parrot will go to die_from_exception. In this, a **static** variable called [already_dying](https://github.com/parrot/parrot/blob/master/src/exceptions.c#L111) is set. When it is non-zero, the function continues on to Parrot_x_jump_out, which returns nicely to the api handler. However, because no error flags are set, the api function [assumes](https://github.com/parrot/parrot/blob/master/src/embed/embed_private.h#L17) everything was alright.\n\nWhat I'm thinking here is, that last assumption is probably nonsense. And the use of the static variable, thats probably nonsense to. We should just check for the last_exception being PMCNULL; if so you can jump out (we are already dying) and if not set the values.\nSo, what do you think?\n\nKind regards,\nBart","files":null}]}