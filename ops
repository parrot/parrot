{"version":1,"ops":[{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1421229303,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5ODkyOTEz","github-url":"https://github.com/parrot/parrot/issues/255#issuecomment-69892913"},"message":"I don't see a NCITaskList. However I came to these observations:\n\nFor each external call we do 3 libffi calls:\n1. Parrot_pcc_fill_params_from_c_args for the arg conversion from INPS to the ffi signature,\n2. the external dlfunc call with the ffi types, and finally\n3. Parrot_pcc_build_call_from_c_args conversion for the return type and call-by-reference\n   conversion from the ffi signature back to INPS.\n\nThis is amateur code. Of course this needs to be optimized into one single call to bear the conversion overhead only on certain arg types.\n\nAdditionally someone went berserk and removed most existing signature types, without providing equivalent functionality, and thus broke all NCI examples. This was e.g. one reason for \nrakudo to ditch our nci and implement their own, independent one, even if libffi is superior to their dyncall and usable on more platforms.\n\nSo we'd need a restore nci functionality ticket also, which I do in #601 to restore `t` and `234`.","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1421608875,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcwNDIxMzk4","github-url":"https://github.com/parrot/parrot/issues/255#issuecomment-70421398"},"message":"Closing this. No feedback on a `NCITasklist` and the points about restoring nci functionality for our nci examples are finished in #436, #601 and #605. Improving libffi is something internal.","files":null},{"type":4,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1421608875,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MjIwNjc3MDYz"},"status":2}]}