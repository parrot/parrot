{"version":1,"ops":[{"type":1,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1419088887,"metadata":{"github-id":"MDU6SXNzdWU1MjU2NjkwNQ==","github-url":"https://github.com/parrot/parrot/issues/1162","origin":"github"},"title":"Parrot on Darwin/PPC now extremely slow, has test failures","message":"In my comment on #1160 yesterday I spoke too soon.  True, as of at least 0d8d1fc, 'make' completes successfully on Darwin/PPC.  However, the resulting parrot experiences test failures and works much more slowly than previously.\n\nPlease see the smolder report here: http://smolder.parrot.org/app/projects/report_details/46987.\n\nThe failures in t/library/p6object.t are new and reproducible failures.  The test stops running without explanation after:\n\n```\nok 257 - \u003c typeof WXY \u003e eq \"WXY\"\n```\n\nThe failures in t/compilers/opsc/08-emitter.t are partially self-induced.  When that test had been running for at least 20 minutes, I inferred that it was hung and used 'kill' to kill it.  The test suite then resumed.  However, the total running time of the test suite was vastly greater than ever before -- more on this below.\n\nToday I ran 'prove -vb t/compilers/opsc/08-emitter.t' and waited long enough for the program to complete.  It took 2191 wallclock seconds -- nearly 37 minutes -- much longer than the entire Parrot test suite took up until earlier this month!\n\nHere are some wallclock running times for Parrot's 'make test' on this machine over the past few months.  I list the date (YYYYMMDD), the commit and the total time.\n\n```\n20140803  1f3b66f  1374\n20140907  5ac67e4  1331\n20141005  4176098  1418\n20141122  e25be6d  1797\n20141219  0d8d1fc 14181\n```\n\nNow, it's been clear for many years that Parrot is never going to be viable in a \"production\" sense on a machine as old and underpowered as this one.  But the fact that Parrot has been buildable on machines like this for more than 10 years is, IMO, a credit to Parrot.  This machine has often served as the \"canary in the coal mine\" for Parrot by indicating places where changes in the code base had unintended and initially misunderstood consequences.  (ISTR changes to GC in 2010 led to problems that were subsequently fixed by bacek.)  So I hope that the current problems can be addressed as well.\n\nThank you very much.\nJim Keenan","files":null}]}