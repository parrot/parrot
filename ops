{"version":1,"ops":[{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1274084372,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxOTQ=","github-url":"https://github.com/parrot/parrot/issues/452#issuecomment-3503194"},"message":"6300 byte attachment from plobsing\nat http://trac.parrot.org/parrot/raw-attachment/ticket/1644/pasmserializer.pmc\n\n``` /*\nCopyright (C) 2010, Parrot Foundation.\n$Id$\n\n=head1\n\nsrc/pmc/pasmserializer - PASM Object Serializer\n\n=head1 DESCRIPTION\n\nFreezes and thaws PMCs using a text format suitable for use in PASM.\n\n=head2 Vtables\n\n=over 4\n\n=cut\n\n*/\n\n/* HEADERIZER HFILE: none */\n\npmclass PASMSerializer auto_attrs {\n    ATTR PMC     *buffer;\n    ATTR PMC     *seen;\n    ATTR PMC     *todo;\n    ATTR UINTVAL  id;\n    ATTR INTVAL   action;\n\n/*\n\n=item C\u003cvoid init()\u003e\n\nInitialize the serializer.\n\n=cut\n\n*/\n\n    VTABLE void init() {\n        PARROT_PASMSERIALIZER(SELF)-\u003ebuffer = PMCNULL;\n        PARROT_PASMSERIALIZER(SELF)-\u003etodo   = Parrot_pmc_new(INTERP, enum_class_ResizablePMCArray);\n        PARROT_PASMSERIALIZER(SELF)-\u003eseen   = PMCNULL;\n        PARROT_PASMSERIALIZER(SELF)-\u003eid     = 0;\n\n        PObj_custom_mark_SET(SELF);\n    }\n\n/*\n\n=item C\u003cvoid mark()\u003e\n\nMark the PMC as alive.\n\n=cut\n\n*/\n\n    VTABLE void mark() {\n        Parrot_gc_mark_PMC_alive(INTERP, PARROT_PASMSERIALIZER(SELF)-\u003ebuffer);\n        Parrot_gc_mark_PMC_alive(INTERP, PARROT_PASMSERIALIZER(SELF)-\u003etodo);\n        Parrot_gc_mark_PMC_alive(INTERP, PARROT_PASMSERIALIZER(SELF)-\u003eseen);\n    }\n\n/*\n\n=item C\u003cPMC *get_iter()\u003e\n\nGet the C\u003ctodo\u003e list for this freeze/thaw for iterating over.\n\n=cut\n\n*/\n\n    VTABLE PMC *get_iter() {\n        return PARROT_PASMSERIALIZER(SELF)-\u003etodo;\n    }\n\n/*\n\n=item C\u003cINTVAL get_integer()\u003e\n\nGet the flags describing this visit action\n\n=cut\n\n*/\n\n    VTABLE INTVAL get_integer() {\n        return PARROT_PASMSERIALIZER(SELF)-\u003eaction;\n    }\n\n/*\n\n=item C\u003cvoid push_integer(INTVAL v)\u003e\n\n=item C\u003cvoid push_float(FLOATVAL v)\u003e\n\n=item C\u003cvoid push_string(STRING *v)\u003e\n\n=item C\u003cvoid push_pmc(PMC *v)\u003e\n\nPush data item C\u003cv\u003e onto the end of the image being frozen.\n\n=cut\n\n*/\n\n    VTABLE void push_integer(INTVAL v) {\n        PMC *buf = PARROT_PASMSERIALIZER(SELF)-\u003ebuffer;\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \" \"));\n        VTABLE_push_string(INTERP, buf, Parrot_str_from_int(INTERP, v));\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \" \"));\n    }\n\n    VTABLE void push_float(FLOATVAL v) {\n        PMC *buf = PARROT_PASMSERIALIZER(SELF)-\u003ebuffer;\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \" \"));\n        VTABLE_push_string(INTERP, buf, Parrot_str_from_num(INTERP, v));\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \" \"));\n    }\n\n    VTABLE void push_string(STRING *v) {\n        PMC *buf = PARROT_PASMSERIALIZER(SELF)-\u003ebuffer;\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \" \"));\n        if (STRING_IS_NULL(v)) {\n            VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \"STRINGNULL\"));\n        }\n        else {\n            VTABLE_push_string(INTERP, buf,\n                    Parrot_encoding_name(INTERP, Parrot_encoding_number_of_str(INTERP, v)));\n            VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \":\"));\n            VTABLE_push_string(INTERP, buf,\n                    Parrot_charset_name(INTERP, Parrot_charset_number_of_str(INTERP, v)));\n            VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \":\\\"\"));\n            VTABLE_push_string(INTERP, buf, Parrot_str_escape(INTERP, v));\n            VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \"\\\"\"));\n        }\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \" \"));\n    }\n\n    VTABLE void push_pmc(PMC *v) {\n        PMC    *buf       = PARROT_PASMSERIALIZER(SELF)-\u003ebuffer;\n        PMC    *seen      = PARROT_PASMSERIALIZER(SELF)-\u003eseen;\n        INTVAL  id;\n        INTVAL  was_seen;\n\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \" \"));\n\n        if (PMC_IS_NULL(v)) {\n            id = 0;\n            was_seen = 1;\n        }\n        else {\n            was_seen = VTABLE_exists_keyed(INTERP, seen, v);\n            if (was_seen)\n                id = VTABLE_get_integer_keyed(INTERP, seen, v);\n            else\n                id = ++PARROT_PASMSERIALIZER(SELF)-\u003eid;\n        }\n\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \"$\"));\n        VTABLE_push_string(INTERP, buf, Parrot_str_from_int(INTERP, id));\n\n        if (!was_seen) {\n            VTABLE_set_integer_keyed(INTERP, seen, v, id);\n            VTABLE_push_pmc(INTERP, PARROT_PASMSERIALIZER(SELF)-\u003etodo, v);\n\n            VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \":\"));\n            VTABLE_push_string(INTERP, buf, VTABLE_name(INTERP, v));\n\n            VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \"{\"));\n            VTABLE_freeze(INTERP, v, SELF);\n            VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \"}\"));\n        }\n\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \" \"));\n    }\n\n/*\n\n=item C\u003cSTRING *get_string()\u003e\n\nGet the serialized image as a string (after freezing).\n\n=cut\n\n*/\n\n    VTABLE STRING *get_string() {\n        return VTABLE_get_string(INTERP, PARROT_PASMSERIALIZER(SELF)-\u003ebuffer);\n    }\n\n/*\n\n=item C\u003cvoid set_pmc(PMC *p)\u003e\n\nFreeze the PMC C\u003cp\u003e into the buffer.\n\n=cut\n\n*/\n\n    VTABLE void set_pmc(PMC *p) {\n        PARROT_PASMSERIALIZER(SELF)-\u003eaction = VISIT_FREEZE_NORMAL;\n        PARROT_PASMSERIALIZER(SELF)-\u003ebuffer = Parrot_pmc_new(INTERP, enum_class_StringBuilder);\n        PARROT_PASMSERIALIZER(SELF)-\u003eseen   = Parrot_pmc_new(INTERP, enum_class_Hash);\n        VTABLE_set_pointer(INTERP, PARROT_PASMSERIALIZER(SELF)-\u003eseen,\n                parrot_new_intval_hash(INTERP));\n        SELF.push_pmc(p);\n\n        // Parrot_visit_loop_visit(INTERP, SELF);\n        {\n            INTVAL i;\n            PMC *buf  = PARROT_PASMSERIALIZER(SELF)-\u003ebuffer;\n            PMC *todo = VTABLE_get_iter(INTERP, SELF);\n            for (i = 0; i \u003c VTABLE_elements(INTERP, todo); i++) {\n                PMC *current = VTABLE_get_pmc_keyed_int(INTERP, todo, i);\n\n                VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \"\\n$\"));\n                VTABLE_push_string(INTERP, buf, Parrot_str_from_int(INTERP, i + 1));\n                VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \":[\"));\n\n                VTABLE_visit(INTERP, current, SELF);\n                VISIT_PMC(INTERP, SELF, PMC_metadata(current));\n\n                VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \"]\"));\n            }\n        }\n    }\n}\n\n/*\n\n=back\n\n=cut\n\n*/\n\n/*\n * Local variables:\n *   c-file-style: \"parrot\"\n * End:\n * vim: expandtab shiftwidth=4:\n */\n```","files":null},{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1274084449,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxOTU=","github-url":"https://github.com/parrot/parrot/issues/452#issuecomment-3503195"},"message":"728 byte attachment from plobsing\nat http://trac.parrot.org/parrot/raw-attachment/ticket/1644/pasmserializer_test.pir\n\n```# Copyright (C) 2006-2009, Parrot Foundation.\n\n# $Id$\n\n.sub 'main' :main\n    $P0 = new ['FixedIntegerArray']\n    $P0 = 5\n    $P0[0] = 1\n    $P0[1] = 2\n    $P0[2] = 3\n    $P0[3] = 4\n    $P0[4] = 5\n\n```\n$P1 = new ['PASMSerializer']\nsetref $P1, $P0\n$S0 = $P1\nsay \"FIA Serialization:\"\nsay $S0\nsay \"\"\n\n$P0 = new ['ResizablePMCArray']\n$P0[0] = $P0\n$P1 = box 42\n$P2 = new ['Hash']\n$P2['Hello World'] = $P1\n$P2['Circular Ref'] = $P0\n$P0[1] = $P1\n$P0[2] = $P2\n\n$P1 = new ['PASMSerializer']\nsetref $P1, $P0\n$S0 = $P1\nsay \"RPA Serialization:\"\nsay $S0\nsay \"\"\n```\n\n.end\n\n# Local Variables:\n\n# mode: pir\n\n# fill-column: 100\n\n# End:\n\n# vim: expandtab shiftwidth=4 ft=pir:\n\n```\n```","files":null},{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1274084497,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxOTY=","github-url":"https://github.com/parrot/parrot/issues/452#issuecomment-3503196"},"message":"262 byte attachment from plobsing\nat http://trac.parrot.org/parrot/raw-attachment/ticket/1644/pasmserializer_output.txt\n\n```FIA Serialization:\n $1:FixedIntegerArray{ 5  1  2  3  4  5 } \n$1:[ $0 ]\n\nRPA Serialization:\n $1:ResizablePMCArray{ 3 } \n$1:[ $1  $2:Integer{ 42 }  $3:Hash{ 2  2  -97 }  $0 ]\n$2:[ $0 ]\n$3:[ fixed_8:ascii:\"Hello World\"  $2  fixed_8:ascii:\"Circular Ref\"  $1  $0 ]\n\n```\n```","files":null},{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1274102372,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxOTc=","github-url":"https://github.com/parrot/parrot/issues/452#issuecomment-3503197"},"message":"\u003cp\u003e\nSerializer POC\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1274102449,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxOTg=","github-url":"https://github.com/parrot/parrot/issues/452#issuecomment-3503198"},"message":"\u003cp\u003e\ndemonstration of serializer functionality\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1274102497,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxOTk=","github-url":"https://github.com/parrot/parrot/issues/452#issuecomment-3503199"},"message":"\u003cp\u003e\noutput of demonstration\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1274259749,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMyMDA=","github-url":"https://github.com/parrot/parrot/issues/452#issuecomment-3503200"},"message":"6165 byte attachment from plobsing\nat http://trac.parrot.org/parrot/raw-attachment/ticket/1644/pasmserializer.2.pmc\n\n``` /*\nCopyright (C) 2010, Parrot Foundation.\n$Id$\n\n=head1\n\nsrc/pmc/pasmserializer - PASM Object Serializer\n\n=head1 DESCRIPTION\n\nFreezes and thaws PMCs using a text format suitable for use in PASM.\n\n=head2 Vtables\n\n=over 4\n\n=cut\n\n*/\n\n/* HEADERIZER HFILE: none */\n\npmclass PASMSerializer auto_attrs {\n    ATTR PMC     *buffer;\n    ATTR PMC     *seen;\n    ATTR PMC     *todo;\n    ATTR UINTVAL  id;\n    ATTR INTVAL   action;\n\n/*\n\n=item C\u003cvoid init()\u003e\n\nInitialize the serializer.\n\n=cut\n\n*/\n\n    VTABLE void init() {\n        PARROT_PASMSERIALIZER(SELF)-\u003ebuffer = PMCNULL;\n        PARROT_PASMSERIALIZER(SELF)-\u003etodo   = Parrot_pmc_new(INTERP, enum_class_ResizablePMCArray);\n        PARROT_PASMSERIALIZER(SELF)-\u003eseen   = PMCNULL;\n        PARROT_PASMSERIALIZER(SELF)-\u003eid     = 0;\n\n        PObj_custom_mark_SET(SELF);\n    }\n\n/*\n\n=item C\u003cvoid mark()\u003e\n\nMark the PMC as alive.\n\n=cut\n\n*/\n\n    VTABLE void mark() {\n        Parrot_gc_mark_PMC_alive(INTERP, PARROT_PASMSERIALIZER(SELF)-\u003ebuffer);\n        Parrot_gc_mark_PMC_alive(INTERP, PARROT_PASMSERIALIZER(SELF)-\u003etodo);\n        Parrot_gc_mark_PMC_alive(INTERP, PARROT_PASMSERIALIZER(SELF)-\u003eseen);\n    }\n\n/*\n\n=item C\u003cPMC *get_iter()\u003e\n\nGet the C\u003ctodo\u003e list for this freeze/thaw for iterating over.\n\n=cut\n\n*/\n\n    VTABLE PMC *get_iter() {\n        return PARROT_PASMSERIALIZER(SELF)-\u003etodo;\n    }\n\n/*\n\n=item C\u003cINTVAL get_integer()\u003e\n\nGet the flags describing this visit action\n\n=cut\n\n*/\n\n    VTABLE INTVAL get_integer() {\n        return PARROT_PASMSERIALIZER(SELF)-\u003eaction;\n    }\n\n/*\n\n=item C\u003cvoid push_integer(INTVAL v)\u003e\n\n=item C\u003cvoid push_float(FLOATVAL v)\u003e\n\n=item C\u003cvoid push_string(STRING *v)\u003e\n\n=item C\u003cvoid push_pmc(PMC *v)\u003e\n\nPush data item C\u003cv\u003e onto the end of the image being frozen.\n\n=cut\n\n*/\n\n    VTABLE void push_integer(INTVAL v) {\n        PMC *buf = PARROT_PASMSERIALIZER(SELF)-\u003ebuffer;\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \" \"));\n        VTABLE_push_string(INTERP, buf, Parrot_str_from_int(INTERP, v));\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \" \"));\n    }\n\n    VTABLE void push_float(FLOATVAL v) {\n        PMC *buf = PARROT_PASMSERIALIZER(SELF)-\u003ebuffer;\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \" \"));\n        VTABLE_push_string(INTERP, buf, Parrot_str_from_num(INTERP, v));\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \" \"));\n    }\n\n    VTABLE void push_string(STRING *v) {\n        PMC *buf = PARROT_PASMSERIALIZER(SELF)-\u003ebuffer;\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \" \"));\n        if (STRING_IS_NULL(v)) {\n            VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \"STRINGNULL\"));\n        }\n        else {\n            VTABLE_push_string(INTERP, buf,\n                    Parrot_encoding_name(INTERP, Parrot_encoding_number_of_str(INTERP, v)));\n            VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \":\"));\n            VTABLE_push_string(INTERP, buf,\n                    Parrot_charset_name(INTERP, Parrot_charset_number_of_str(INTERP, v)));\n            VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \":\\\"\"));\n            VTABLE_push_string(INTERP, buf, Parrot_str_escape(INTERP, v));\n            VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \"\\\"\"));\n        }\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \" \"));\n    }\n\n    VTABLE void push_pmc(PMC *v) {\n        PMC    *buf       = PARROT_PASMSERIALIZER(SELF)-\u003ebuffer;\n        PMC    *seen      = PARROT_PASMSERIALIZER(SELF)-\u003eseen;\n        INTVAL  id;\n        INTVAL  was_seen;\n\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \" \"));\n\n        if (PMC_IS_NULL(v)) {\n            id = 0;\n            was_seen = 1;\n        }\n        else {\n            was_seen = VTABLE_exists_keyed(INTERP, seen, v);\n            if (was_seen)\n                id = VTABLE_get_integer_keyed(INTERP, seen, v);\n            else\n                id = ++PARROT_PASMSERIALIZER(SELF)-\u003eid;\n        }\n\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \"$\"));\n        VTABLE_push_string(INTERP, buf, Parrot_str_from_int(INTERP, id));\n\n        if (!was_seen) {\n            VTABLE_set_integer_keyed(INTERP, seen, v, id);\n            VTABLE_push_pmc(INTERP, PARROT_PASMSERIALIZER(SELF)-\u003etodo, v);\n\n            VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \":\"));\n            VTABLE_push_string(INTERP, buf, VTABLE_name(INTERP, v));\n        }\n\n        VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \" \"));\n    }\n\n/*\n\n=item C\u003cSTRING *get_string()\u003e\n\nGet the serialized image as a string (after freezing).\n\n=cut\n\n*/\n\n    VTABLE STRING *get_string() {\n        return VTABLE_get_string(INTERP, PARROT_PASMSERIALIZER(SELF)-\u003ebuffer);\n    }\n\n/*\n\n=item C\u003cvoid set_pmc(PMC *p)\u003e\n\nFreeze the PMC C\u003cp\u003e into the buffer.\n\n=cut\n\n*/\n\n    VTABLE void set_pmc(PMC *p) {\n        PARROT_PASMSERIALIZER(SELF)-\u003eaction = VISIT_FREEZE_NORMAL;\n        PARROT_PASMSERIALIZER(SELF)-\u003ebuffer = Parrot_pmc_new(INTERP, enum_class_StringBuilder);\n        PARROT_PASMSERIALIZER(SELF)-\u003eseen   = Parrot_pmc_new(INTERP, enum_class_Hash);\n        VTABLE_set_pointer(INTERP, PARROT_PASMSERIALIZER(SELF)-\u003eseen,\n                parrot_new_intval_hash(INTERP));\n        SELF.push_pmc(p);\n\n        // Parrot_visit_loop_visit(INTERP, SELF);\n        {\n            INTVAL i;\n            PMC *buf  = PARROT_PASMSERIALIZER(SELF)-\u003ebuffer;\n            PMC *todo = VTABLE_get_iter(INTERP, SELF);\n            for (i = 0; i \u003c VTABLE_elements(INTERP, todo); i++) {\n                PMC *current = VTABLE_get_pmc_keyed_int(INTERP, todo, i);\n\n                VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \"\\n$\"));\n                VTABLE_push_string(INTERP, buf, Parrot_str_from_int(INTERP, i + 1));\n                VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \":[\"));\n\n                VTABLE_freeze(INTERP, current, SELF);\n                VTABLE_visit(INTERP, current, SELF);\n                VISIT_PMC(INTERP, SELF, PMC_metadata(current));\n\n                VTABLE_push_string(INTERP, buf, CONST_STRING(INTERP, \"]\"));\n            }\n        }\n    }\n}\n\n/*\n\n=back\n\n=cut\n\n*/\n\n/*\n * Local variables:\n *   c-file-style: \"parrot\"\n * End:\n * vim: expandtab shiftwidth=4:\n */\n```","files":null},{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1274259774,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMyMDE=","github-url":"https://github.com/parrot/parrot/issues/452#issuecomment-3503201"},"message":"254 byte attachment from plobsing\nat http://trac.parrot.org/parrot/raw-attachment/ticket/1644/pasmserializer_output.2.txt\n\n```FIA Serialization:\n $1:FixedIntegerArray \n$1:[ 5  1  2  3  4  5  $0 ]\n\nRPA Serialization:\n $1:ResizablePMCArray \n$1:[ 3  $1  $2:Integer  $3:Hash  $0 ]\n$2:[ 42  $0 ]\n$3:[ 2  2  -97  fixed_8:ascii:\"Hello World\"  $2  fixed_8:ascii:\"Circular Ref\"  $1  $0 ]\n\n```\n```","files":null},{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1274277708,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMyMDI=","github-url":"https://github.com/parrot/parrot/issues/452#issuecomment-3503202"},"message":"\u003cp\u003e\nIn r46776, freezing PMCs was made more breadth-first. The update to PASMSerializer reflects this by holding PMC contents in one place.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1294074662,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMyMDM=","github-url":"https://github.com/parrot/parrot/issues/452#issuecomment-3503203"},"message":"\u003cp\u003e\nplobsing, could you put this code into a branch on github?  I'd like to see where we can go with this idea.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1294145152,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMyMDQ=","github-url":"https://github.com/parrot/parrot/issues/452#issuecomment-3503204"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1644#comment:2\" title=\"Comment 2 for Ticket #1644\"\u003ecotto\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n plobsing, could you put this code into a branch on github?  I'd like to see where we can go with this idea.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nThis is now in the pasm-serializer branch.\n\u003c/p\u003e\n\n\u003cp\u003e\nI've made a few adjustments to the serializer pmc and converted the example into a test.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1314489423,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMyMDU=","github-url":"https://github.com/parrot/parrot/issues/452#issuecomment-3503205"},"message":"\u003cp\u003e\ncotto, plobsing:\n\u003c/p\u003e\n\n\u003cp\u003e\nAre we going to pursue the approach taken in the \u003ci\u003epasm-serializer\u003c/i\u003e branch?\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null}]}