{"version":1,"ops":[{"type":3,"author":{"id":"87f5a738776c6e5909db3ee8888065daacccdc49"},"timestamp":1259491716,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4NDM=","github-url":"https://github.com/parrot/parrot/issues/356#issuecomment-3502843"},"message":"\u003cp\u003e\n19:40 \u0026lt;+dalek\u0026gt; TT \u003ca class=\"new ticket\" href=\"http://trac.parrot.org/parrot/ticket/1339\" title=\"RFC: document all control exception types. (new)\"\u003e#1339\u003c/a\u003e created by coke++: eliminate redundant exceptions CONTROL_CONTINUE and CONTROL_BREAK\n19:41 \u0026lt;@Tene\u0026gt; Coke: in Perl 6, at least, break is different from last\n19:41 \u0026lt;@Coke\u0026gt; ... how?\n19:42 \u0026lt;@Tene\u0026gt; break is used to exit the innermost containing construct that sets $_\n19:42 \u0026lt;@Tene\u0026gt; like a 'given' block.\n19:43 \u0026lt;@Tene\u0026gt; and 'continue' is used to fall out of a 'when' block without throwing a 'break' exception.\n19:43 \u0026lt;@Coke\u0026gt; \"fall out\" ?\n19:43 \u0026lt;@dukeleto\u0026gt; Tene,Coke: Thanks guys, you got me unstuck!\n19:43 \u0026lt;@Tene\u0026gt; Perl 6 'when' blocks end with an implied 'break'\n19:43 \u0026lt;@Coke\u0026gt; (makes it sound like break again.)]\n19:43 \u0026lt;@Coke\u0026gt; Tene: I think your break is not my break.\n19:44 \u0026lt;@Tene\u0026gt; so: when 1 { do stuff; } default { do more stuff; }\n19:44 \u0026lt;@Tene\u0026gt; the 'default' doesn't get executed.\n19:44 \u0026lt;@Tene\u0026gt; but: when 1 { do stuff; continue; } default { do more stuff; }\n19:44 \u0026lt;@Tene\u0026gt; the default block does get executed\n19:44 \u0026lt;@Coke\u0026gt; that continue is also not like my continue.\n19:45 \u0026lt;@Tene\u0026gt; So the tcl continue/break are the Perl 6 next/last\n19:45 \u0026lt;@Coke\u0026gt; so you can keep break and continue, I suppose, but the way you describe them there are useless to me.\n19:45 \u0026lt;@Coke\u0026gt; just annoying that I \"reserved\" them and they were co-opted. :P\n19:45 \u0026lt;@Tene\u0026gt; It's not the first time that things have different names in tcl and perl 6\n19:45 \u0026lt;@Coke\u0026gt; be nice if these were documented. =-)\n19:45 \u0026lt;@Tene\u0026gt; Where would you expect to find that?\n19:46 \u0026lt;@Coke\u0026gt; runtime/parrot/include/except_types.pasm\n19:46 \u0026lt;@Tene\u0026gt; Oh!  I know!  I'll document it in the ticket rejection!\n19:46 \u0026lt;@Coke\u0026gt; or perhaps in the C enum that generated it.\n19:46 \u0026lt;@Tene\u0026gt; that should be sufficient, right?\n19:46 \u0026lt;@Coke\u0026gt; but the .pasm is the file I'm actually using.\n19:46 \u0026lt;@Coke\u0026gt; necessary but not sufficient.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1259492067,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4NDQ=","github-url":"https://github.com/parrot/parrot/issues/356#issuecomment-3502844"},"message":"\u003cp\u003e\nThe \"proper\" uses for these control exceptions needs to be documented, as my initial tcl-style versions have been co-opted by the perl6 meanings.\n\u003c/p\u003e","files":null}]}