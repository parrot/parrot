{"version":1,"ops":[{"type":1,"author":{"id":"aa8915ba52969f979af836ca4704fd27e613004f"},"timestamp":1267657569,"metadata":{"github-id":"MDU6SXNzdWUyODQ4ODM4","github-url":"https://github.com/parrot/parrot/issues/629","origin":"github"},"title":"Get_class \u003cnamespace\u003e confuses NSes that have same final name.","message":"Having already created a class \"Matcher\", I was trying in NQP to create a related class Mimus::CallSignature::Matcher. (Note the last name.)\n\nFar too many hours later, it appears that the get_class op on a namespace apparently returns invalid results when the namespace shares a last name with an already-extant class.\n\nThis code, inspired by the `get_parrotclass` method in P6object.pir, looks up (and tries to create, if needed) two classes with different namespace paths but the same class name (last name in the nsp), one called P and the other N::S::P :\n\n```\n.sub foo :main\n    .local pmc class_p\n    .local int addr_p\n\n    .local pmc class_nsp\n    .local int addr_nsp\n\n    class_p = newclass [ 'P' ]\n    addr_p = get_addr class_p\n\n\n    $S0 = 'N::S::P'     # Change to ..Q and it changes\n    $P0 = split '::', $S0\n\n    $P1 = get_hll_namespace $P0\n    unless null $P1 goto have_ns\n\n    die \"Namespace was null\"\nhave_ns:\n\n    class_nsp = get_class $P1\n    $P2 = class_nsp\n    addr_nsp = get_addr class_nsp\n\n    print \"Addr of class 'P' is: \"\n    say addr_p\n\n    print \"Addr of 'N::S::P' is: \"\n    say addr_nsp\n\n    unless addr_p == addr_nsp goto end\n    say \"*** The addrs are the same. I think that's wrong.\"\n\n    goto end\n\ngot_class:\n    say \"Got the class. I didn't see that coming.\"\nend:\n.end\n\n.namespace ['N';'S';'P']\n\n.sub bar :method\n    .return (1)\n.end\n\n\n.namespace ['N';'S';'Q']\n\n.sub bar :method\n    .return (1)\n.end\n```\n\nThe effect of this seems to be that any code which relies on P6object cannot create classes that have the same name.\n\nThe workaround is, trivially, to make sure that class names are distinct. Anyone who has ever coded C89 should be okay.\n\nOriginally http://trac.parrot.org/parrot/ticket/1492","files":null}]}