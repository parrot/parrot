{"version":1,"ops":[{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1259374500,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4MjA=","github-url":"https://github.com/parrot/parrot/issues/349#issuecomment-3502820"},"message":"\u003cpre class=\"wiki\"\u003eOn Wed, Nov 25, 2009 at 04:27:55AM -0000, Parrot wrote:\n\u0026gt;  RPA inherits the get_string vtable from its parent, FPA, which says:\n\u0026gt;\n\u0026gt;  {{{\n\u0026gt;  Returns the number of elements in the array as a Parrot string. (??? -leo)\n\u0026gt;  }}}\n\u0026gt; [...]\n\u0026gt;  Anyone like the current functionality, or agree with the proposal?\nThe current functionality (return the number of elements as a string)\nis not at all useful, and in many cases it's worse than throwing\nan exception would be.\nI'd like to see the default behavior be something like \"all elements\njoined by a space\", or if that's inappropriate then simply throw\nan exception when attempting to get_string() from a RPA/FPA.\nPm\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1260097347,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4MjE=","github-url":"https://github.com/parrot/parrot/issues/349#issuecomment-3502821"},"message":"\u003cp\u003e\n+1 to get_string = join(\" \",@foo)\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1294920616,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4MjI=","github-url":"https://github.com/parrot/parrot/issues/349#issuecomment-3502822"},"message":"\u003cp\u003e\n+1 to returning the equivalent of join(' ', @foo).\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1294950235,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4MjM=","github-url":"https://github.com/parrot/parrot/issues/349#issuecomment-3502823"},"message":"\u003cp\u003e\nI disagree, I think the better option is to throw an exception. An Array isn't a scalar, and any VTABLE that implicitly treats it as one is wrong. If I have an RPA, for instance, and it contains PMCs which don't stringify, when we call VTABLE_get_string on the array we are going to get something that looks like an unrelated error and it's going to be very confusing.\n\u003c/p\u003e\n\n\u003cp\u003e\nIf HLLs want this kind of behavior, it can be easily added in a subclass, or some kind of extension method in the namespace.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1295006039,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4MjQ=","github-url":"https://github.com/parrot/parrot/issues/349#issuecomment-3502824"},"message":"\u003cp\u003e\nWe have VTABLE_does so that people know what class of PMC they're dealing with.  If an HLL is looking for a string-like thing, it should be checking that the PMC does String.\n\u003c/p\u003e","files":null}]}