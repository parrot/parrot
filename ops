{"version":1,"ops":[{"type":3,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1291936617,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxMzI=","github-url":"https://github.com/parrot/parrot/issues/441#issuecomment-3503132"},"message":"\u003cpre class=\"wiki\"\u003eI suggest, instead of changing the functionality of this function to\nadd Parrot_load_pbc() and a load_pbc opcode.\nThis will simplify the transition if we then decide to remove the\nmis-named *bytecode variants.\nRegards.\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1291936749,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxMzM=","github-url":"https://github.com/parrot/parrot/issues/441#issuecomment-3503133"},"message":"\u003cp\u003e\nI don't want to remove the opcode or the function, I simply want to restrict their behavior. The load_bytecode op should stay, but it should only load bytecode. There are other ways to compile and load a PIR source file, we should use those instead of nonsensical overloads on this op.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1291938237,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxMzQ=","github-url":"https://github.com/parrot/parrot/issues/441#issuecomment-3503134"},"message":"\u003cp\u003e\nI'm not against the idea of creating a new opcode to simplify the transition. If we go that route I want to be explicit that we aren't changing load_bytecode but are instead removing it completely. I do not want to add in a new opcode without the promise that we are also going to remove the old one. I don't want to add to code bloat.\n\u003c/p\u003e\n\n\u003cp\u003e\nIf we decide to go ahead with this plan (it's only an RFC right now) we can deprecate load_bytecode and it's internals completely, replace that with load_pbc (I can set up a GCI task to do this even) and go from there.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1291938977,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxMzU=","github-url":"https://github.com/parrot/parrot/issues/441#issuecomment-3503135"},"message":"\u003cp\u003e\nThe steps for a smooth transition can be:\n1 - add the load_pbc opcode as experimental, test it heavily\n2 - move it to its place. core.ops?\n3 - replace all usages of load_bytecode in libraries, examples and test\n4 - deprecate load_bytecode\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1291940936,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxMzY=","github-url":"https://github.com/parrot/parrot/issues/441#issuecomment-3503136"},"message":"\u003cp\u003e\nOverall I agree with the proposed changes, but there's a very important dependency that I think needs to be added before removing the ability to load_bytecode on .pir files.\n\u003c/p\u003e\n\n\u003cp\u003e\nCurrently it's not possible for a Parrot program to reliably generate .pbc files on its own -- .pbc can only be generated by an external command line invocation.  This means that .pir files are the only mechanism we currently have for a Parrot program to create a file that can be subsequently loaded directly by another Parrot program (via load_bytecode).\n\u003c/p\u003e\n\n\u003cp\u003e\nAlso, note that compiling via the PIR compreg is somewhat different from using load_bytecode, especially with respect to :load/:init markers.  A file compiled using PIR compreg executes :init-flagged subs, while load_bytecode executes :load-flagged subs.  Using the PIR compreg is not at all a direct replacement for load_bytecode.\n\u003c/p\u003e\n\n\u003cp\u003e\nLastly, some crude benchmarking I did in 2009 seemed to indicate that using load_bytecode on .pir files was actually \u003ci\u003efaster\u003c/i\u003e than loading the equivalent pre-compiled .pbc file.  I totally admit this seems counterintuitive, but I tried it several times and got consistent results for several of Rakudo's precompiled modules.\n\u003c/p\u003e\n\n\u003cp\u003e\nSo, while I give a +1 to eventually removing the .pir aspect of load_bytecode, the PIR compreg doesn't yet provide equivalent capability, and we ought to have a way to generate .pbc from Parrot before eliminating .pir from load_bytecode.\n\u003c/p\u003e\n\n\u003cp\u003e\n(It's okay with me if .pbc's are created via PIR compreg or some other compiler object in Parrot -- I'm simply noting that currently we don't have \u003ci\u003eany\u003c/i\u003e officially-supported mechanism to do it.)\n\u003c/p\u003e\n\n\u003cp\u003e\nPm\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1291941446,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxMzc=","github-url":"https://github.com/parrot/parrot/issues/441#issuecomment-3503137"},"message":"\u003cp\u003e\nIn addition to the :init problem, there is no way AFAIK to know what .sub is marked as :main, if any, from a Eval PMC. That must also be addressed.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1291942207,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxMzg=","github-url":"https://github.com/parrot/parrot/issues/441#issuecomment-3503138"},"message":"\u003cp\u003e\nThanks for the comments Patrick. One question I have is whether the call \"load_bytecode 'foo.pir'\" Always triggers the :load functions and not the :init functions. For a .pbc file I agree that triggering the :load functions is the expected behavior, but I would be very very surprised if IMCC were smart enough to determine that it should trigger :load and not :init after compiling from the load_bytecode opcode.\n\u003c/p\u003e\n\n\u003cp\u003e\nConsidering that :init and :immediate flags on subs are often used to update the constants table, I would be extremely surprised if \"load_bytecode 'foo.pir'\" did not trigger the :init functions. It may also trigger the :load functions too. I think we should put together a test for this behavior.\n\u003c/p\u003e\n\n\u003cp\u003e\nAlso, I thought there was a way to output .pbc files from Parrot PIR code. If there isn't one, we need to make creating it a high priority.\n\u003c/p\u003e\n\n\u003cp\u003e\nSo it seems like we have a few steps to tackle first (I'll lay out some things in a tasklist page on the wiki eventually):\n\u003c/p\u003e\n\n\u003cul\u003e\u003cli\u003eFigure out what, exactly, load_bytecode does.\n\u003c/li\u003e\u003cli\u003eFigure out whether loading a .pir file is actually faster than loading a .pbc file in current Parrot and, if so, why. This should not be the case and if it is we have a serious problem.\n\u003c/li\u003e\u003cli\u003eCreate a new compiler compreg interface for IMCC that would perform the kinds of functions we need it to perform\n\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\nSo this is turning out to be a bigger task than I originally thought but I am becoming more and more convinced that it is necessary.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1291952561,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxMzk=","github-url":"https://github.com/parrot/parrot/issues/441#issuecomment-3503139"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1885#comment:7\" title=\"Comment 7 for Ticket #1885\"\u003ewhiteknight\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\nOne question I have is whether the call \"load_bytecode 'foo.pir'\" Always triggers the :load functions and not the :init functions. For a .pbc file I agree that triggering the :load functions is the expected behavior, but I would be very very surprised if IMCC were smart enough to determine that it should trigger :load and not :init after compiling from the load_bytecode opcode. [...] I would be extremely surprised if \"load_bytecode 'foo.pir'\" did not trigger the :init functions.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nPrepare to be surprised then, because IMCC (2.10.1) definitely triggers the :load functions and not the :init ones when invoked via load_bytecode :-)\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e$ cat x.pir\n.sub 'first'\n   say 'first'\n.end\n.sub 'load' :load\n   say ':load'\n.end\n.sub 'init' :init\n   say ':init'\n.end\n.sub 'loadinit' :load :init\n   say ':load :init'\n.end\n.sub 'main' :main\n   say ':main'\n.end\n$ cat y.pir\n.sub 'main' :main\n    load_bytecode 'x.pir'\n.end\n$ ./parrot y.pir\n:load\n:load :init\n$\n\u003c/pre\u003e\u003cp\u003e\nAs you can see, the subs marked \":load\" are the ones executed -- the one marked only with \":init\" is not executed.\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n Also, I thought there was a way to output .pbc files from Parrot PIR code. If there isn't one, we need to make creating it a high priority.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nIt was speculated at one point that one could simply write the object coming back from the PIR compiler to a file and use that.  That seems to work for very simple PIR files, but fails for anything much larger (i.e., it didn't work for files generated by nqp-rx).\n\u003c/p\u003e\n\n\u003cp\u003e\nPm\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1291953569,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxNDA=","github-url":"https://github.com/parrot/parrot/issues/441#issuecomment-3503140"},"message":"\u003cp\u003e\nThanks for the testcase Patrick. You're right that I am very surprised by that result. In fact, I'm much more surprised that it hadn't been flagged as a bug beforehand. This rabbithole keeps going deeper.\n\u003c/p\u003e\n\n\u003cp\u003e\nsrc/packfile.c:Parrot_load_bytecode() calls src/packfile.c:compile_of_load_file(), which calls src/interp/inter_misc.c:Parrot_compile_file(), which calls compilers/imcc/parser_util.c:imcc_compile_file() which does compile the PIR down but doesn't trigger any of the :load or :init functions. The :load functions are then triggered back in compile_or_load_file, but only for the special case of .pir or .pasm files (it's triggered automatically for .pbc files, like it should be).\n\u003c/p\u003e\n\n\u003cp\u003e\nSo there is one mystery down.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1314493369,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxNDE=","github-url":"https://github.com/parrot/parrot/issues/441#issuecomment-3503141"},"message":"\u003cp\u003e\nwhiteknight,\n\u003c/p\u003e\n\n\u003cp\u003e\nCan we get an update on the status of the issues discussed in this ticket?  I see that \u003ctt\u003eParrot_load_bytecode()\u003c/tt\u003e is now found in \u003ci\u003esrc/packfile/api.c\u003c/i\u003e (lines 2377+).\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null}]}