{"version":1,"ops":[{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1261151733,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwMDE=","github-url":"https://github.com/parrot/parrot/issues/398#issuecomment-3503001"},"message":"\u003cp\u003e\nI don't mind working on this, but I'd like to get a +1 from someone with more design sense than me as a sanity check.  There's no reason the old constants-based interfaces couldn't be preserved for backwards compatibility, so I don't think deprecation would be an issue.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1261562479,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwMDI=","github-url":"https://github.com/parrot/parrot/issues/398#issuecomment-3503002"},"message":"1224 byte attachment from cotto\nat http://trac.parrot.org/parrot/raw-attachment/ticket/1378/iglobals_hash_example.patch\n\n# ```Index: src/pmc/parrotinterpreter.pmc\n\n--- src/pmc/parrotinterpreter.pmc   (revision 43226)\n+++ src/pmc/parrotinterpreter.pmc   (working copy)\n@@ -441,6 +441,7 @@\n   \"outer\"; \"\u003citem\u003e\"         ... same for outer level 1\n   \"outer\"; \"\u003citem\u003e\"; level  ... same for outer \u003clevel\u003e\n   \"globals\"                 ... return global stash\n-  \"iglobals\"                ... return a string-indexed hash of iglobals\n  \n  =cut\n\n@@ -562,6 +563,20 @@\n             return pmc_new(interp, enum_class_Hash);\n         }\n-        name = CONST_STRING(interp, \"iglobals\");\n  +\n-        if (Parrot_str_equal(interp, item, name)) {\n-            PMC *ig_hash = pmc_new(interp, enum_class_Hash);\n-            PMC *one     = pmc_new(interp, enum_class_Integer);\n  +\n-            VTABLE_set_pmc_keyed_str(interp, ig_hash, CONST_STRING(interp, \"classname_hash\"), interp-\u003eclass_hash);\n  +\n-            VTABLE_set_integer_native(interp, one, 1);\n-            VTABLE_setprop(interp, ig_hash, CONST_STRING(interp, \"_ro\"), one);\n  +\n-            return ig_hash;\n-        }\n  +\n       Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_ATTRIB_NOT_FOUND,\n               \"No such item %Ss\", item);\n   }\n\n```\n```","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1261562504,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwMDM=","github-url":"https://github.com/parrot/parrot/issues/398#issuecomment-3503003"},"message":"443 byte attachment from cotto\nat http://trac.parrot.org/parrot/raw-attachment/ticket/1378/interp_iglobals.pir\n\n```.sub main :main\n    .local pmc interp\n\n```\ninterp = getinterp\n$P0 = interp['iglobals']\n$P1 = $P0['classname_hash']\n$I0 = $P1\nsay $I0\n\n.local pmc it\n\nit = iter $P1\n```\n\n  iter_start:\n    unless it goto iter_end\n    $S0 = shift it\n    print \"key is \"\n    print $S0\n    $S1 = $P1[$S0]\n    print \", value is \"\n    say $S1\n    goto iter_start\n  iter_end:\n    noop\n\n```\n#try to modify the read-only hash\n$P1['foo'] = 234\n```\n\n.end\n\n```\n```","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1261562617,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwMDQ=","github-url":"https://github.com/parrot/parrot/issues/398#issuecomment-3503004"},"message":"2767 byte attachment from cotto\nat http://trac.parrot.org/parrot/raw-attachment/ticket/1378/interp_iglobals_output.txt\n\n```cotto@feather:/usr/src/parrot/parrot-svn-committable\\ 3 $ ./parrot interp_iglobals.pir\n83\nkey is FileHandle, value is 54\nkey is Handle, value is 53\nkey is ParrotInterpreter, value is 8\nkey is PackfileAnnotations, value is 63\nkey is Integer, value is 73\nkey is ParrotThread, value is 9\nkey is ParrotRunningThread, value is 68\nkey is PackfileConstantTable, value is 64\nkey is Role, value is 70\nkey is MultiSub, value is 52\nkey is UnManagedStruct, value is 4\nkey is Class, value is 42\nkey is String, value is 75\nkey is Object, value is 58\nkey is Complex, value is 22\nkey is Exporter, value is 45\nkey is Null, value is 1\nkey is PackfileRawSegment, value is 67\nkey is PackfileFixupEntry, value is 61\nkey is FixedIntegerArray, value is 24\nkey is BigInt, value is 20\nkey is ResizablePMCArray, value is 51\nkey is ResizableBooleanArray, value is 47\nkey is CallContext, value is 40\nkey is StringIterator, value is 30\nkey is Pointer, value is 11\nkey is PMCProxy, value is 43\nkey is Hash, value is 33\nkey is default, value is 0\nkey is Env, value is 2\nkey is HashIterator, value is 28\nkey is Exception, value is 6\nkey is CodeString, value is 76\nkey is Task, value is 80\nkey is Capture, value is 41\nkey is Coroutine, value is 13\nkey is NCI, value is 19\nkey is Continuation, value is 16\nkey is Packfile, value is 59\nkey is Timer, value is 81\nkey is BigNum, value is 21\nkey is FixedStringArray, value is 31\nkey is Socket, value is 55\nkey is Sockaddr, value is 79\nkey is ParrotLibrary, value is 7\nkey is ExceptionHandler, value is 18\nkey is NameSpace, value is 37\nkey is FixedPMCArray, value is 50\nkey is FixedBooleanArray, value is 46\nkey is Undef, value is 82\nkey is ManagedStruct, value is 5\nkey is PackfileFixupTable, value is 66\nkey is PackfileDirectory, value is 65\nkey is Float, value is 72\nkey is scalar, value is 71\nkey is PackfileAnnotation, value is 60\nkey is LexPad, value is 10\nkey is Scheduler, value is 77\nkey is Array, value is 23\nkey is StringHandle, value is 56\nkey is SchedulerMessage, value is 78\nkey is FixedFloatArray, value is 48\nkey is ArrayIterator, value is 27\nkey is OrderedHash, value is 34\nkey is ResizableIntegerArray, value is 25\nkey is PackfileSegment, value is 62\nkey is OrderedHashIterator, value is 29\nkey is AddrRegistry, value is 35\nkey is LexInfo, value is 36\nkey is PCCMETHOD_Test, value is 69\nkey is ResizableFloatArray, value is 49\nkey is HashIteratorKey, value is 57\nkey is ResizableStringArray, value is 32\nkey is Boolean, value is 74\nkey is EventHandler, value is 15\nkey is File, value is 39\nkey is OS, value is 38\nkey is CPointer, value is 44\nkey is RetContinuation, value is 17\nkey is Eval, value is 14\nkey is Key, value is 3\nkey is Sub, value is 12\nkey is Iterator, value is 26\ncotto@feather:/usr/src/parrot/parrot-svn-committable\\ 3 $ \n\n```\n```","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1261583981,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwMDU=","github-url":"https://github.com/parrot/parrot/issues/398#issuecomment-3503005"},"message":"\u003cp\u003e\nFor the sake of discussion, here's some mostly incomplete example code implementing interp\u003ca class=\"missing wiki\"\u003eiglobals?\u003c/a\u003e as a more user-friendly way of accessing iglobals.  The other interfaces would be similar.\nIt'd probably be a good idea to make a clone of various hashes and arrays so that some enterprising PIR or HLL code couldn't wreak even more havoc than it already can.  Again, this is where someone with design sense is required.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1261584079,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwMDY=","github-url":"https://github.com/parrot/parrot/issues/398#issuecomment-3503006"},"message":"\u003cp\u003e\nmostly incomplete patch to allow hash-flavored iglobals access and chicanery\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1261584104,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwMDc=","github-url":"https://github.com/parrot/parrot/issues/398#issuecomment-3503007"},"message":"\u003cp\u003e\nexample of how to use (and misuse) the above patch\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1261584217,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMwMDg=","github-url":"https://github.com/parrot/parrot/issues/398#issuecomment-3503008"},"message":"\u003cp\u003e\noutput of the above pir program with the above patch\n\u003c/p\u003e","files":null}]}