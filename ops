{"version":1,"ops":[{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1243396302,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI0Nzg=","github-url":"https://github.com/parrot/parrot/issues/245#issuecomment-3502478"},"message":"\u003cp\u003e\nIn today parrotsketch has been decided that the StringHandle PMC is not stable, so expect changes in it and his tests without notice. Please comment on this ticket ASAP if anyone is using it other than for testing purposes.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"090edab1282a45bd2d4c0e11ceffc2d7454f9e77"},"timestamp":1243456109,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI0Nzk=","github-url":"https://github.com/parrot/parrot/issues/245#issuecomment-3502479"},"message":"\u003cp\u003e\nThe StringHandle PMC is used by Lua,\nin standard library function io.tmpfile (file src/lib/luaio.pir).\n\u003c/p\u003e\n\n\u003cp\u003e\nBut this use could be easily removed.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1243460100,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI0ODA=","github-url":"https://github.com/parrot/parrot/issues/245#issuecomment-3502480"},"message":"\u003cp\u003e\nI'll take a look at it before changing anything.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1295088800,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI0ODE=","github-url":"https://github.com/parrot/parrot/issues/245#issuecomment-3502481"},"message":"\u003cp\u003e\n'StringHandle' is found fairly widely in the distribution:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e$ ack -l StringHandle | sort\ncompilers/opsc/src/Ops/Emitter.pm\nconfig_lib.pir\ninclude/parrot/core_pmcs.h\nlib/Parrot/Config/Generated.pm\nlib/Parrot/PMC.pm\nruntime/parrot/library/TAP/Parser.pir\nsrc/core_pmcs.c\nsrc/io/api.c\nsrc/pmc/stringhandle.pmc\nt/compilers/opsc/07-emitter.t\nt/dynoplibs/io.t\nt/library/archive_tar.t\nt/pmc/stringhandle.t\n\u003c/pre\u003e\u003cp\u003e\nSo it looks like we're not contemplating removing it anytime soon?\n\u003c/p\u003e\n\n\u003cp\u003e\nOkay to close this ticket?\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1295125882,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI0ODI=","github-url":"https://github.com/parrot/parrot/issues/245#issuecomment-3502482"},"message":"\u003cp\u003e\nThis ticket is about the programmatic interface used by StringHandle, and how it should behave in certain situations. We don't plan to remove StringHandle, but we do want to make sure it behaves in a way that's consistent with our other IO types.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1336523988,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1OTAzMjM=","github-url":"https://github.com/parrot/parrot/issues/245#issuecomment-5590323"},"message":"StringHandle does not appear in the list of experimental features in api.yaml, and hasn't for some time. Also, the interface is pretty stable (it's very consistent with FileHandle) and I've heard no complaints. I propose we declare StringHandle stable and close this ticket. We can do this at the next #ps if necessary, though I suspect it's uncontroversial.","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1455643900,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE4NDc4ODE1Mw==","github-url":"https://github.com/parrot/parrot/issues/245#issuecomment-184788153"},"message":"StringHandle is normally used to mock files, hence it needs to support the same API.\nregarding issue 1:\n_Read/Write mode: Must it works the same as FileHandle? Several tests use read methods in a StringHanlde opened for writing. IMO will be better to have methods to get/set the string content, use the get_string/set_string/native vtable functions, or both, and have the read methods throw exceptions when not opened for read._\n\nYes, the handles must be open \"rw\" to be able to read and write, otherwise it needs to throw an error, analog to FileHandle. Needs more tests and evtl. fixing in io_verify_is_open_for()\n- printing to a StringHandle open for read already errors, tested in the print unittest, part 2.\n\nHowever, the io api states this, and sets an explicit AWAYS_READABLE flag...\n\n```\n    /* Some types like StringHandle are always readable, even if only opened\n       in 'w' mode or when closed. Several parts of the build, test suite and\n       libraries depend on this. */\n    if (vtable-\u003eflags \u0026 PIO_VF_AWAYS_READABLE)\n```\n\n_I guess we mean PIO_VF_ALWAYS_READABLE here..._","files":null},{"type":5,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1455643917,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDU1MjM2MjIxMg=="},"added":["Bug"],"removed":[]},{"type":5,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1455643917,"metadata":{"github-id":"MDE0OlVubGFiZWxlZEV2ZW50NTUyMzYyMjEz"},"added":[],"removed":["Community-RFC"]},{"type":5,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1455643917,"metadata":{"github-id":"MDE0OlVubGFiZWxlZEV2ZW50NTUyMzYyMjE0"},"added":[],"removed":["Component-core"]},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1455646878,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE4NDgxMDEyNA==","github-url":"https://github.com/parrot/parrot/issues/245#issuecomment-184810124"},"message":"I'll change the various places which use StringHandle to auto-reopen and auto-read, to do the right thing.\nI'll also add a set_mode method to change direction, when needed, without closing the handle.\n\ne.g.\n\n```\n    new $P1, [ 'StringHandle' ]\n    $P1.'open'(\"__eval__\", \"w\")\n    $P1.'close'()\n    .tailcall $P1.'readall'()\n```\n\n=\u003e \n\n```\n    new $P1, [ 'StringHandle' ]\n    $P1.'open'(\"__eval__\", \"rw\")\n    $P1.'seek'(0, 0)\n    .tailcall $P1.'readall'()\n\n```","files":null}]}