{"version":1,"ops":[{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1298273036,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzNTI=","github-url":"https://github.com/parrot/parrot/issues/487#issuecomment-3503352"},"message":"\u003cp\u003e\nIs there someone who could investigate the work done by Schwern in Perl 5 on the 2038 problem and prepare a report on it for Parrot developers?\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1298565267,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzNTM=","github-url":"https://github.com/parrot/parrot/issues/487#issuecomment-3503353"},"message":"\u003cp\u003e\n\u003ca   href=\"http://search.cpan.org/~mschwern/Time-y2038-20100403/lib/Time/y2038.pm\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003ehttp://search.cpan.org/~mschwern/Time-y2038-20100403/lib/Time/y2038.pm\u003c/a\u003e\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1298565460,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzNTQ=","github-url":"https://github.com/parrot/parrot/issues/487#issuecomment-3503354"},"message":"\u003cp\u003e\nUsing these headers:\n\u003c/p\u003e\n\n\u003cp\u003e\n\u003ca   href=\"https://github.com/schwern/y2038\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003ehttps://github.com/schwern/y2038\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nlooks like the simplest way to do this. From what I remember hearing from Schwern, we don't want to reimplement that stuff.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"f00d601034560b9b9d93a5ad2f13377feda3e2a2"},"timestamp":1298627900,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzNTU=","github-url":"https://github.com/parrot/parrot/issues/487#issuecomment-3503355"},"message":"\u003cp\u003e\nYou don't want to reimplement that stuff. :-)\n\u003c/p\u003e\n\n\u003cp\u003e\nExecutive Summary:  In the short run, y2038 will give you a working, portable post-2038 time.h on which to base your times and dates.  In the long run you're probably better off shipping your own zone file and implementing your own time library.  And Parrot is nothing if not in the long run.\n\u003c/p\u003e\n\n\u003cp\u003e\ntl;dir version follows.\n\u003c/p\u003e\n\n\u003cp\u003e\nYou have two approaches to dealing with time zones.  They hinge on one thing: do you want to ship your own time zone files?\n\u003c/p\u003e\n\n\u003cp\u003e\nIf yes, then do that and ignore the time.h local time stuff.  It sucks.  The implementations suck.  The interface sucks and you don't have to be compatible with it.  Do it yourself and give it a better interface.  The down side is having redundant zone files in Parrot and the system.  This means if there's a change to the TZ rules, Parrot might work differently than other systems.  You can mitigate this by having Parrot be configurable to use the system zone files, if it can find them and if they're sane, and falling back to its own.  It also allows vendors to configure Parrot to use their known good zone files.  If you choose to go down that route, Zefram is the one to talk to and there's a number of great time libraries out there to base that work on.\n\u003c/p\u003e\n\n\u003cp\u003e\n(There is a side issue that the system time zone files might not be 2038 clean.  This is something that can be tested for and you can fall back.)\n\u003c/p\u003e\n\n\u003cp\u003e\nIf you don't want to ship zone files, then the only universal interface to system time zone information is localtime() and mktime() and those are not guaranteed to be 32 bit safe.  You can use y2038 to hack around this, and it works (Perl 5 is using it in production) but this you're always going to risk local time after 2038 and before 1970 being off by an hour or two.  It also involves some complicated probing to determine the capabilities of the system time.h.\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, in my experience \"64 bit\" time.h implementations can only be universally trusted out to 47 bits.  After that there's bugs, some of them ugly... like gmtime() or localtime() just hangs.  Or OS X's gmtime() just loses a day somewhere.  Or time_t's year is limited to 32 bits (ie. 2 billion years) which y2038 can work around, but it's ugly.  Fortunately 47 bits gives you 4.4 million years which is more than enough.  Anyone who needs more (astronomers \u0026amp; archeologists) don't care about time zones and do things in Julian days anyway.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"f02eb21931753da3eff5af16c32ba05f117fa438"},"timestamp":1298685139,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzNTY=","github-url":"https://github.com/parrot/parrot/issues/487#issuecomment-3503356"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/505#comment:4\" title=\"Comment 4 for Ticket #505\"\u003eschwern\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n Executive Summary:  In the short run, y2038 will give you a working, portable post-2038 time.h on which to base your times and dates.  In the long run you're probably better off shipping your own zone file and implementing your own time library.  And Parrot is nothing if not in the long run.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nFWIW, PostgreSQL ships with its own zone files. This means that the core developers have to update them periodically, but it doesn't seem to be a big deal. And Parrot's time-based release schedule ensures that there will always be timely release of updated zone files.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe fact that PostgreSQL ships its own zone files is a huge advantage, IMHO, because then the behavior is universal across platforms (and vendors are often slow to update zone files). It's just a huge headache that I don't have to think about.\n\u003c/p\u003e\n\n\u003cp\u003e\nSo I'd like to just +1 Schwern's suggestion that Parrot ship with time zone files as likely the best way to deal with the whole issue.\n\u003c/p\u003e","files":null}]}