{"version":1,"ops":[{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1299110649,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM5MDY=","github-url":"https://github.com/parrot/parrot/issues/651#issuecomment-3503906"},"message":"\u003cp\u003e\nReplying to \u003ca class=\"new ticket\" href=\"http://trac.parrot.org/parrot/ticket/2034\" title=\"experimental: Experimental Select PMC (new)\"\u003ecotto\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n tewk++ has contributed a Select PMC.  While the interface solidifies, it should be considered experimental.  This ticket exists to track its progress once it's been merged.  (If src/pmc/select.pmc exists, it's been merged.)\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nWhy is this being added as a core PMC? Can Parrot not operate without it? Is it expected to be used in the majority of programs? A large minority?\n\u003c/p\u003e\n\n\u003cp\u003e\nEvery core PMC adds (albeit slightly) to the time required to start up parrot, the memory overhead consumed by parrot, and the number of long-lived GCables present. The question we've got to ask is, do we have a legitimate reason for taxing ALL Parrot users? or are we just too lazy to add a couple loadlib statements?\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1299165131,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM5MDc=","github-url":"https://github.com/parrot/parrot/issues/651#issuecomment-3503907"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/2034#comment:1\" title=\"Comment 1 for Ticket #2034\"\u003eplobsing\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n Replying to \u003ca class=\"new ticket\" href=\"http://trac.parrot.org/parrot/ticket/2034\" title=\"experimental: Experimental Select PMC (new)\"\u003ecotto\u003c/a\u003e:\n\u003c/p\u003e\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n tewk++ has contributed a Select PMC.  While the interface solidifies, it should be considered experimental.  This ticket exists to track its progress once it's been merged.  (If src/pmc/select.pmc exists, it's been merged.)\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n Why is this being added as a core PMC? Can Parrot not operate without it? Is it expected to be used in the majority of programs? A large minority?\n Every core PMC adds (albeit slightly) to the time required to start up parrot, the memory overhead consumed by parrot, and the number of long-lived GCables present. The question we've got to ask is, do we have a legitimate reason for taxing ALL Parrot users? or are we just too lazy to add a couple loadlib statements?\n\u003c/p\u003e\n\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nI agree with this assessment.  Thanks for switching the PMC to a dynpmc.  I still would like to do another round of review on this PMC, but I won't complain if someone feels like merging it now.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1305681625,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM5MDg=","github-url":"https://github.com/parrot/parrot/issues/651#issuecomment-3503908"},"message":"\u003cp\u003e\nBump.\n\u003c/p\u003e\n\n\u003cp\u003e\nPm\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1305726894,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM5MDk=","github-url":"https://github.com/parrot/parrot/issues/651#issuecomment-3503909"},"message":"\u003cp\u003e\nAfter looking at the Select dynpmc again, I'm not entirely impressed with the interface.  It'll work, but something closer to Python's approach strikes me as better from a API design perspective.\n\u003c/p\u003e\n\n\u003cp\u003e\nI'm thinking of something like one or both of the following:\n(r_ready, w_ready, x_ready) = s.'select'(r, w, x, timeout)\n\u003c/p\u003e\n\n\u003cp\u003e\ns = new \"Select\"\ns.'register'(fh, \"rwe\")\ns.'register'(fh2, \"re\")\ns.'unregister'(fh3, \"rwe\")\ns.'modify'(fh4, \"e\")\ns.'select'(999)\n\u003c/p\u003e\n\n\u003cp\u003e\nif s.'error'() goto foo\nif s.'read'() goto bar\n\u003c/p\u003e\n\n\u003cp\u003e\nThoughts are welcome.  If this proposed interface looks good, I'll implement it.  If not, I'm willing to implement an alternative suggestion.  I do want to get some kind of select functionality into Parrot, but also feel like the current implementation in tewk/select has room for improvement.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"646f0669ead6eaf64196bebf3884a5eff162357a"},"timestamp":1314321999,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM5MTA=","github-url":"https://github.com/parrot/parrot/issues/651#issuecomment-3503910"},"message":"\u003cp\u003e\nI created a short C file to test select: \u003ca   href=\"https://gist.github.com/1171339\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003ehttps://gist.github.com/1171339\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nBasically, select.t fails on OS X because it returns both file handles as ready for error.  We may just want to skip that test as being platform dependent...\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1314384086,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM5MTE=","github-url":"https://github.com/parrot/parrot/issues/651#issuecomment-3503911"},"message":"5829 byte attachment from jkeenan\nat http://trac.parrot.org/parrot/raw-attachment/ticket/2034/20110826.448bcca.master.gpp.txt.gz\n\n`Â¡WN20110826.448bcca.master.gpp.txtíkÜ¸¿ûWègÊ;A0ãÅ,àx:3ÆzÚÝÞ,°XX«iIT(©Ý=¿~IêFêRºPÌ¸K/ÅS:õIQÔ¾Èä\u003eDû#Oö)QeûcÁ£pyÍú2õ'*B¶O\"ß³¤³ âÇý§2ô)¦¯éþÓ»w¿ÞÜýòñ§Ã_ßß}yÆÏö_ñcÄõ-û¦ú;ôáìve¶`I°Ó È$ÕÁ}ÈN¤rut½È?²'9;3©\u003c-£j¹¦rDT(¹ÇÅ©Ê\u003e0q3ü{·æ´;¼¼LªÑ×Y.µ\u003eõ'ç=IùKªt;!õq\\ÈÅ¹Q*·\u003c%ºdrs±{¤,ÍUdZ,wÄDåEÚ:ÁÅ(jôçÅº\"íSJ\u0026°NÈsæjÈb1}ÁÉ´üs ÇF²÷älD¼LóûgtXÞ¤,ÎVm.¹gOþ¼X@ýÀ(¶\"õöb¡X±\u003cKIN/],©¼´=³md¹åN×Û«¨ì_ä\u003esíø*aÅ7IUÒ?'$/$s­ðbYu\u0026îO\u003cbNÁ:Áõ;Ç,É³¾n²^\\ÿÁh®h-9øoDÿô¿hp¯õ_\u003cgñ£\u0026e¹xÜrI^, D_}\\]®ó¦â·ÆÜèjÑð¤§i«%S)T«VMO·MY,ÑÉ¶åÔD©Ê YÚjmh\\ÙwäªÐr¹²IÈTv)vãË¶q ?/oäÅG¶í;³5Gd¸a¾¤ûÒ½ ÌÖÙÄÛéH\nÕ6\\ßÛ½çÈä´í\u003cxX»çDg´èm/ºÝµÞÇÜÜ=vÓ¯ÞöòQ$1IÈJ¥ \u003eÚ5J=]Ûk7ÍË÷V®7ð\u003cîxC¿MÏ×çê[¤Ñ¿ìÎØD½ü!uGf½Çå:=®íÕMÙÀoÙ'Lýëíy©Öo[¦ïÝNÝÀ~QÝüÐÛú×Bßpàå5b©Ë=U^ÛYòòìÞo(6ç±W­¿W\u0026eV»HÊ_æâð©Ìúõ¸ÊìTá*æåK7ë×{»çÇîYÔÛ^\u003eô=O\nâù#ºX¦çÌQ°-: ^¥(ó2ºDcÀeÝµXGýZCÄ§G5;{¿\n¤s:ÍðëRîÓ9»ß7¤ÜíÒyÃ~ãPYÈbüuîFø´æççïGÕ.2âU\u0026ÕKGKzêÌ¶«:æåëÈÏJÇÃÖ«*¯mª\nùzJØÏÓ\\!O:oÇyþÄ©jíyý\nÌWø\n(3»¿eÌ5fÜÒ§Y2_ ß2)ó:2äWÿÔNø4M(ôk`Ù©UlÍý\\{©~ UÍ\\/Ò.è£¶Îí°¶zy3EUÖ°MfÓ,\u003e³¶JïÄÚ^Þ/$»xø½çÑä´}!C\u0026Yèii©JÏ-`´ã~\u003eÓûtççï{3YW\u0026âéÐ§'µ@`ÀÉëZ2!/O$¥dg®D|x²X¦çÏQ°]:   ~^56øX®ÓwëH8v¿ÄSÎÅéäÕïX(ÒoN´ùE^Õ¨ ÖÌK§UiÅýZÌ$Õ³j¼\u0026ÎWðWfv½1?_É2W³ó÷=¬#ñbI~!IyUóÅ2#B;2d%lsïo¿k¤Æïúî\u0026zzOôV_$1àµÊíz¬[]@¾sí#¶N®è4ùÝ®@öïU}ÑMz@µ»@L¯ä¤úû7£¸_¨4ìÝé9·Òü}«¸^¤3ì¹è9nRÖO]ó¹þ®½-®;ÝÜ Ý¼Xf°3\u003eØjv6óê77lÒUÇÝ9cÝ4¿³'ÉØo\u003e?!ËuúCh3æ¤lá7ã[¸­2æÕ85ñM|8ÿ\n¡Q·Æá*iÏªÑýÍßðl1·F`Àª{ú¤ú.\n÷ë\n,UðÙ\n¸\u003eÛ¸ï¼)ßÄ©Ù\nC3§LæÎÔ)ó»¦ª}ø3ßÍ¥ù«®;ÕMóò-â~am®Sú15¿ÙI$úWçvJ¬úM\ni[onFHï1\u003e7êé/ç,¥4fùEøÌ\\£4àÕq»i~÷Ì³i\u003e÷æôï%y{ eh«ûZôÖª]»Ï5ØwJ÷Ò\\\u003eè5yÄÀTæ*·;¹\nnâ$È}§P®õké9·7)êAV¿¯þÁù4Ò×ªÍ(Òl¢L=Ûìµ $ß6-WÝdÑ·IWíÅÑòí\nqwMÊª3$/$õ/åz£eâJ\n»Ç\u0026åQ.qâ_óuFý»k¯ôS¶ñË¥úÁÏX­Ñ÷ÝÈzoR7ñ/RÕ¥ÙÀû|Qß¥Äç2eýXòJ¨©¥3t¸V²ÿ1orÀ×vS\u003epæ3Ö´XfÔ±Q²kü¼Æ4âÑK$úëÜ¿:èç-÷z`kfî¾£¼ó VîÛ÷Èå±8ùY+0äFçíÒ!_Oª{êçi®À'·ãI¶Ûèvöz½ãa)»÷Ø¦\u003c6¹½½Vm¼,Fns¥oS-¸^o¼,Fçòï±¾)°nxüÀÓ¡ûöýÔmNà6õWËÂØýÁüÊBxu-ggï{£  ¬¯iì?%Tæu*C^eÛ.Qµ¾i8ë®åF·ñ³,#gz´JjÜm­2hºNôó.è½öîãyDßkÛñX½½1a¸¾XÞsÅ\u003c;%0ÍN~×ãbgkþ£uÊ~½g.q;0ëÍIØÀë÷³Vø¼ÕIòõ\\ÐÜsHc¡È×:Çg^ÿ{\u003e{Ñþ1:§³`xv¹²Ð6+@­Óê»ìÉ8{©^þ$d\u003e#óó¬R§³ºkÓéÈ?ØnG¢èÙùvï_î«ÝíÏZ8v?~¾ýzøòñëçw7jë·_ÞÞÝ}~ÿ×¯w7wo¿ÜÝèO7\u003eß¼{{wóS/é×·\u003e||×ß~¼½ýúáÃ@üóÍÝ×Ï·½O_?ßô_o¿~øÎ¿¿ý|[¥\u003eß|ùú¡Ä¿|ìÇÞ}üPk~¾¹»»ù/µO°;«ÿOÞk'ñs²;   5w|õ@oñ|GÔ;½(S° ¥E\\D$g;Qäg¡x·ÓË»¿«ÿÔIÐÿÏõ.ªf2Q!J2%¢¿¡ÞøgAô¾ôBä.+\u003cÍµ±VBé®P¸©úöjñ`Øv¿1)ÔKB~ÚEäÈ\"Ý,ò¬þIÞ|Øx}¨U,Idhµ±ÑBòü©\u003c½¾W\u003cN#Ny^~Ò|Ð¥±èd\u003eG\u003caæÃ2îRzQ[8sU}µó,Óv²Ì\n8Â3«$3©±kÒË#!¹ú99³²Võ{rÉÌxÒª\u003eëQgR?þÄ2ó¥ÕBTª,x®±\u003cI»ü)ÕºûgÁÊvf7ÐÕBÏ!T\"zS5çèïïG~|­cßxnüvÕÒ­* v\u003eK^ô½tZ$EfµHîñ-Ù¥c¢÷zPªPGuåBG¾©#g»jªª¥\u003cãG®NåÓLU÷\u0026åÕF°A4+k«êC»1\n\" (ÒPD¤Y!*R¾¦@}h!âD`Ftb@¡0`ñ£\nàxÁ#$9Ñ\u0026-x´¡é!ê}ª©÷2Å¸    hÚ6£´1[Ò3£\n@Ð4Æ Q¾g¶¥FõZ`Ø6lïl¨Q½Ð4\n@£¹%c¸0÷¶nB úQÿ.G8`\u0026ÉTy»,©Ã@  P%sP¢hÐÅ!@Ìö®\u003cP¿±;÷½IOÀð\u003c½ES¿RÈîÔ´1àø\u003eq|ðÜÇ¤ È2*dZ]£\u0026§n1Ãl ¨j744\u0026åÃ.]zÔa@DvðôÜåÈîUô³X¯|ß¤%`    X2%e¢Ô~w \nDQ@e(ö÷jä9@ã:9Îªïâ¶@Êèz Ç$=xrêâCÀðü?f´\u003e^÷¯Áðü?¦ùqîw_Îè¿àø1ÉÈûCö±ÔaGÀpéLL54i0=e9T!àø\u003eëÍdáÁLý0o´AÒMQ@D¹N£¦ßð©r\u003e¤BDTÁp\\W®s¥Ìu8S·³ÓDAPEÆÈ;GâH¢C¦ìÚC®vB d!]Zt- È2QdDÖðÞ0Àh;¨©îû¹UhRk¨£àø~LóC×@LA@¤%ñvRË?zlIÒMOÀð\u003cYÄÉT=cJ®+à\n¸²+ªéUL¦)`ÊôèH»':~àø1Í*T\u003cæÔQpGÀÙ9¨ÊÌ²LÈn«¤¶-`Ø26%íY¯Ð`cÀ¸*wûÝ3uà8cYnS#ÃÀdãÈ¨|Äjq¸a@D1¸³@0ñÈ2ëÈÐE£êTJÔYìpÂ \"cIHÌ*¨5±½\nàx´S\u003eÊ»¡Ü}¡n\u003cÀð6De¹±â@  P%S(øñtê4Eª!@ÈB¨ì_Ôu#v`\u0026I÷5w)-KLE\u0026    h2vFê3p\\ÀEÛÑpâëÎK­Â{qü£ù!cÒ»©_Ö\u003cÕ«»6 \nhÚN~­i«zÀ0£mHUì¶Nªè\u003e\u0026Üj8Q (J¹(Ñÿd}aÀ0L¹0I¥8©LÉ¹6    PT@elt$£-DÚàx,@ñ/vÆHÃôtPÅ: hc Hfè1ÚÌP¨xÈurñQÅàø\u003eFñQX¯ÊÔ`cÀÈ/°eFµ\nlÀ°1÷K.uÜ0`\u0026ÉX¤ÈydMö(7\n@Ð4Æ QZØ¨ÀpcàøFd¢3´äh\"@ÐtóÇuKu¢ôY?ô\u0026xõõ\u003c\u003c\u003e)E~HOT]79Iòß¥eØszÈ_|§v¤÷SRwz;]¯UTí`þùýó7C_ø§¾T|{TeZø .Ru5±é£ýôë»ÖÑê+îp|ÒG=t°jçï/\n·?¿9¶?ÿåO3\nTAePyö* EùÐºeÚy \n¢Ì'jð(¡8`Jª* \n¨2*;ëª6D\u0026   TU@Peô-ç\"9«d½è¼\nÀpXÍUOuÑíÏ,aê »ÍNò[«Õ%0 Â¬'L\u0026TåW(SíÒ4 \nH³4zPå\ngL2(Ê2 ÌzÊè:~2\u0026e@Pf2êÔc1{åYÜ^ÊrlpgÀõ­\u003c\\iÌèT0cÀõ £+Q Â0ë £Êør1\u0026e@PÆc®®äòÚ|r¤i@QGF¯\nËèdPe@^Ï®QÆ$2 (Ê¬§ÌK¦ºNö^`æ9Ï\u003ce1¯=sPîÒ4 \nH³4¯`F§1`ÆxK)®õÊtpgÀ¹À¹éÓÕùÀå`\nXÖ5-k¸èÐ½~=\\:v`ØqÎKªmä9@ëä8§}«¹\nàø~\\ç^\u0026êB0rû.VGÀpä:GÊe-ÝG¼8¢ÿ\u0026 É¿Mô_ß£é¾:ë¶CÀ0`HRD=@Ðô »H\\uáÀ°ìÅ{öä²Cè3g«óú÷·wÿùöCýúÿ`O3+ß\u003cfò r°Po¾¾Ìß¼¾ùW?¼²_F_Ï,Ëdê±àÈÔ   gÁó{°ÇªæUÕH¡\n.`qªjéQOWGªr\u003c²\\]uúê¹jJZ×Ú×ÃÎëWßÿÿÙù¢PwûsÏQY=|Lýùÿ[SøÑÂ~´ð£uõG«Hb3UÎvÞºh)`\n2Á+DOÀð\u003cY6(÷HYªëPgh®  #à8Lp¤¡¸*~ÙªsÀð\u003cOfñ¤ðU¦UÿÁp\\Wfq%¿HFÂ!¤T)  h\u00264ØcÚåHA@ HwEó\u0026~àø1Õ)wº2UCÀ0d!ª¹üÐ°ì;À   vPä\u003c)H\n\u0026     h2I©ê¬:K]ÔapGÀ©Y­êÄt\u0026´êèz ÇÔ27wV¹¡Xfì;ÀIv\"A:Ïå!ðü?À  ~TëÓ¸©`!9ò³²ä\"¤  L$)âAtA@dòN®:ì±{·!`LÍK5:SSË  ÈT?FÎÄÔ:!`2uG?²°ºC¤$ÕÍúÉà\n¸®+Swzõ©ÎE÷VoE@PÓ:)s5NìTPTU@    ª\\HvqIb\" èzô2d}Ø  `   X%S,Qg°³:Q?Àðüä!ëÄÄ@A\u0026BÂPªÉUÆÎèª\u0026     h2E}føÖ¯'à x25Ãõ)gÇâtê.`ÅA$I¦ØSÕS¯Ù¬ªBç©=+,KÀ°d%©rÚ]Å¹\n!`L1$\"YÖ! àø~L®¯K$aÔqR@Ð4M¦hòHYªëÐ0Qº© \n¨ª*TÑç­O*\n\" (2ùpÄÊG÷éß\u0026N\nßï ¾2çÁ'\"¥ÈS»ýbv;$2ì)¡¿KËdSÒé!ñ]ðé×w/~ÿüÍð¼zýÇ?¾  Ê#ßÏ+m.FìyðMD\"ò d4R§!xä)ó?æc$è½*Ìåýúûõ{ö\u0026xñâEðßC§è-¼zö¿sa×¶£`","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1314402010,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM5MTI=","github-url":"https://github.com/parrot/parrot/issues/651#issuecomment-3503912"},"message":"\u003cp\u003e\nIn addition to not building on Windows and causing new test failures on Darwin, the merge of the tewk/select branch has now broken our build with g++.  I will attach the output of 'make' run with g++ used for 'cc', 'link' and 'ld'.\n\u003c/p\u003e\n\n\u003cp\u003e\nBy way of comparison, I did a checkout of the commit immediately preceding the tewk/select branch merge in the logs.  I configured with all-g++ and was able to run 'make' and \u003ca   href=\"http://smolder.parrot.org/app/projects/report_details/22025\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003emake test\u003c/a\u003e without incident.\n\u003c/p\u003e\n\n\u003cp\u003e\n\"Experimental\" or not, this merge has caused so many problems that it needs to be reverted ASAP.\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1314402086,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM5MTM=","github-url":"https://github.com/parrot/parrot/issues/651#issuecomment-3503913"},"message":"\u003cp\u003e\nMerge of tewk/select branch causes all-g++ build to fail\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1314425528,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM5MTQ=","github-url":"https://github.com/parrot/parrot/issues/651#issuecomment-3503914"},"message":"\u003cp\u003e\nAn all-g++ build on Darwin failed in much the same way as the all-g++ build on Linux posted earlier.  Here's the tail of the \u003ctt\u003emake\u003c/tt\u003e output:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e/usr/bin/g++ -I./include -I./include/pmc -pipe -fno-common\n-Wno-long-double  -I/sw/include -I/opt/local/include -DHASATTRIBUTE_CONST\n -DHASATTRIBUTE_DEPRECATED  -DHASATTRIBUTE_MALLOC  -DHASATTRIBUTE_NONNULL\n-DHASATTRIBUTE_NORETURN  -DHASATTRIBUTE_PURE  -DHASATTRIBUTE_UNUSED\n -DHASATTRIBUTE_WARN_UNUSED_RESULT  -DHAS_GETTEXT -g\n-falign-functions=16 -funit-at-a-time -W -Wall -Waggregate-return\n-Wcast-align -Wcast-qual -Wchar-subscripts -Wcomment -Wdisabled-optimization\n-Wendif-labels -Wextra -Wformat -Wformat-extra-args -Wformat-nonliteral\n-Wformat-security -Wformat-y2k -Wimplicit -Wimport -Winit-self -Winline\n-Winvalid-pch -Wmissing-braces -Wmissing-field-initializers\n-Wno-missing-format-attribute -Wmissing-include-dirs -Wmultichar\n-Wpacked -Wparentheses -Wpointer-arith -Wreturn-type -Wsequence-point\n-Wsign-compare -Wstrict-aliasing -Wstrict-aliasing=2 -Wswitch\n-Wswitch-default -Wtrigraphs -Wundef -Wno-unused -Wunknown-pragmas\n-Wvariadic-macros -Wwrite-strings -fvisibility=hidden\n-Isrc/pmc -o src/pmc/filehandle.o -c src/pmc/filehandle.c\nsrc/pmc/filehandle.c:\n  In function 'void Parrot_FileHandle_nci_setasync(parrot_interp_t*, PMC*)':\nsrc/pmc/filehandle.c:1200: error:\n  'Parrot_io_async' was not declared in this scope\nsrc/pmc/filehandle.c:\n  In function 'void Parrot_FileHandle_nci_setblocking(parrot_interp_t*, PMC*)':\nsrc/pmc/filehandle.c:1228: error:\n  'Parrot_io_async' was not declared in this scope\nmake: *** [src/pmc/filehandle.o] Error 1\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1314488431,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM5MTU=","github-url":"https://github.com/parrot/parrot/issues/651#issuecomment-3503915"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/2034#comment:6\" title=\"Comment 6 for Ticket #2034\"\u003ejkeenan\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n In addition to not building on Windows and causing new test failures on Darwin, the merge of the tewk/select branch has now broken our build with g++.  I will attach the output of 'make' run with g++ used for 'cc', 'link' and 'ld'.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nNotFound++ fixed the g++ builds with 30a829d.  (See, e.g., \u003ca   href=\"http://smolder.parrot.org/app/projects/report_details/22061\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003eSmolder 22061 (Linux)\u003c/a\u003e or \u003ca   href=\"http://smolder.parrot.org/app/projects/report_details/22063\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003eSmolder 22063 (Darwin)\u003c/a\u003e.  But we continue to have the problem of failures in \u003ci\u003et/dynpmc/select.t\u003c/i\u003e on OSes other than Linux; see the latter Smolder.\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null}]}