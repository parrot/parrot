{"version":1,"ops":[{"type":1,"author":{"id":"8c86ede03c8e80b0dad5131138f96e957a4ee66b"},"timestamp":1380648031,"metadata":{"github-id":"MDU6SXNzdWUyMDM0Njc0MQ==","github-url":"https://github.com/parrot/parrot/issues/982","origin":"github"},"title":"Sub modifier ':immediate', with PMC return, does not become a constant when invoked via get_global().","message":"NOTE: This bug report is filed by Util on behalf of GitHub-nonuser Zefram.\n\n```\nSummary: :immediate does incomplete job\nReported by: zefram@fysh.org\n\n---\nThe :immediate sub modifier in PIR is documented (PDD 19) to replace the\nsub, after it's been run, with the PMC that it returned.  The replacement\nis conspicuously incomplete.  Test case:\n\n$ cat t3.pir\n.sub bar\n    .return(\"baz\")\n.end\n\n.sub foo :immediate\n    $P0 = get_global \"bar\"\n    .return($P0)\n.end\n\n.sub main :main\n    $P0 = foo()\n    say $P0\n    $P1 = get_global \"foo\"\n    $P2 = $P1()\n    say $P2\n.end\n$ parrot t3.pir\nbaz\nbar\n$ parrot -o t3.pbc t3.pir\n$ parrot t3.pbc\nbaz\nNull PMC access in invoke()\ncurrent instr.: 'main' pc 30 (t3.pir:14)\n\nFrom PDD 19 I'd expected the output to be baz/baz.  Instead, apparently\nthe replacement occurs for direct foo()-style calls, but doesn't affect\nthe namespace accessed by get_global, and the state of that namespace\ndiffers between immediate execution and separate compilation.\n\nSome IRC traffic:\n\n\u003cZefram\u003e my issue was that the sub is available in *two* places, only\n    one of which gets replaced by the result of the immediate execution\n\u003cZefram\u003e http://paste.scsys.co.uk/269783 is the test case\n\u003cZefram\u003e it outputs baz/bar, whereas I'd naively expected baz/baz\n\u003cZefram\u003e close examination of the documentation reveals a difference in\n    terminology, between \"... replaces the sub in the constant table\"\n    and \"... in current namespace\", which is possibly referring to\n    this difference\n\u003cZefram\u003e it'd be clearer to explicitly talk about the constant namespace,\n    in which the :immediate sub gets replaced by its result, and to make\n    clear that that's separate from the namespaces accessed by get_global\n\u003cZefram\u003e I'm still not clear on the extent and use of what I'm calling the\n    \"constant namespace\".  does it exist only in the assembler?\n\u003cUtil\u003e Zefram: Hmmm. Removing \":immediate\" changes the output to bar/bar\n    . I need to look at this deeper.\n\u003cZefram\u003e the behaviour without :immediate is simple and unsurprising.\n    the description of :immediate led me to expect baz/baz, i.e. that the\n    name \"foo\" would consistently refer to the sub that is principally\n    named \"bar\"\n\u003cUtil\u003e Yes, I see that I was reading only from book/pir/ch06... ,\n    instead of pdd19. I am getting caught up now. Sorry for the confusion.\n\u003cZefram\u003e ah, I hadn't looked in docs/book at all yet.  the description\n    of :immediate there doesn't mention the replacement behaviour at all\n\u003cUtil\u003e Zefram: For another datapointcompiling your code to .pbc, then\n    running it. I get baz \\n Null PMC access in invoke()\n\u003cUtil\u003e Zefram: For another datapoint, try compiling your code to .pbc,\n    then running it. I get baz \\n Null PMC access in invoke()\n\u003cUtil\u003e To compile then run: parrot -o foo.pbc foo.pir; parrot foo.pbc\n\u003cZefram\u003e I get the same.  interesting\n\u003cZefram\u003e some of the modifiers are explicit about having different\n    behaviour between compilation/loading/running, but :immediate doesn't\n    say anything about that sort of thing\n\u003cUtil\u003e Zefram: It looks to me like a bug in PackFile_fixup_subs (and\n    its kin). Will you file a bug report for us?\n\u003cZefram\u003e w00t\n\n-zefram\n\n\n---\nosname= linux\nosvers= 3.2.0-4-amd64\narch=   x86_64-linux-gnu-thread-multi\ncc=     cc\n\n---\nFlags:\n    category=core\n    severity=medium\n    ack=no\n\n---\nSummary of my parrot 5.5.0 configuration:\n  configdate='Sun Sep 22 18:01:32 2013 GMT'\n  Platform:\n    osname=linux, archname=x86_64-linux-gnu-thread-multi\n    perl=/usr/bin/perl\n  Compiler:\n    cc='cc', ccflags='-D_REENTRANT -D_GNU_SOURCE -DDEBIAN -fstack-protector  -pipe -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -DDISABLE_GC_DEBUG=1 -DNDEBUG -DHAS_GETTEXT',\n  Linker and Libraries:\n    link='cc', linkflags=' -fstack-protector -L/usr/local/lib -Wl,-E',\n    ld='cc', ldflags=' -fstack-protector -L/usr/local/lib',\n    cc_ldflags='',\n    libs='-ldl -lm -lpthread -lcrypt -lrt -lgmp -lreadline '\n  Dynamic Linking:\n    cc_shared='-fPIC',\n    link_dynamic='-Wl,-E',\n    ld_share_flags='-shared -L/usr/local/lib -fstack-protector -fPIC',\n    ld_load_flags='-shared -L/usr/local/lib -fstack-protector -fPIC'\n  Extensions:\n    o='.o', a='.a', exe='',\n    share_ext='.so', load_ext='.so'\n  Misc Programs:\n    ar='ar', ranlib=':',\n    make='make', make_set_make='#'\n  Types:\n    iv=long, intvalsize=8, intsize=4, opcode_t=long, opcode_t_size=8,\n    ptrsize=8,  byteorder=12345678, \n    nv=double, numvalsize=8, doublesize=8, longdoublesize=16\n\n---\nEnvironment:\n    HOME =/home/zefram\n    LANG  (unset)\n    LANGUAGE  (unset)\n    LD_LIBRARY_PATH  (unset)\n    LOGDIR  (unset)\n    PATH =/home/zefram/usr/perl/util:/home/zefram/pub/x86_64-unknown-linux-gnu/bin:/home/zefram/pub/common/bin:/usr/bin:/bin:/usr/local/bin:/usr/games\n    SHELL =/usr/bin/zsh\n```","files":null}]}