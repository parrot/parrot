{"version":1,"ops":[{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1257163963,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxODI=","github-url":"https://github.com/parrot/parrot/issues/451#issuecomment-3503182"},"message":"\u003cp\u003e\nThis is what we currently have, and it is wrong:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e/* local macro to call proper pow version depending on FLOATVAL */\n#if NUMVAL_SIZE == DOUBLE_SIZE\n #  define POW pow\n#else\n#  define POW powl\n#endif\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1257164026,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxODM=","github-url":"https://github.com/parrot/parrot/issues/451#issuecomment-3503183"},"message":"\u003cp\u003e\nThat was from src/string/api.c around line 2325 .\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1257165196,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxODQ=","github-url":"https://github.com/parrot/parrot/issues/451#issuecomment-3503184"},"message":"\u003cp\u003e\n'make fulltest' passes on darwin/x86 when I change POW=powl to POW=pow\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1257167658,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxODU=","github-url":"https://github.com/parrot/parrot/issues/451#issuecomment-3503185"},"message":"\u003cp\u003e\nI have redefined POW to be pow() unconditionally in r42217, and put a note referencing this TT.\n\u003c/p\u003e\n\n\u003cp\u003e\nThis is no longer blocking the port of Parrot to RTEMS.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1257167706,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxODY=","github-url":"https://github.com/parrot/parrot/issues/451#issuecomment-3503186"},"message":"\u003cp\u003e\nAlso, 'fulltest' passed on linux-amd64 with POW=pow.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1257199605,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxODc=","github-url":"https://github.com/parrot/parrot/issues/451#issuecomment-3503187"},"message":"\u003cpre class=\"wiki\"\u003e\u0026gt;  I have redefined POW to be pow() unconditionally in r42217, and put a note\n\u0026gt;  referencing this TT.\nThis was originally there to support  Configure --floatval='long double',\nwhich used to mostly work.\nYou could probably revert this patch and replace it with something like\n    #if NUMVAL_SIZE \u0026gt; DOUBLE_SIZE\n    #  define POW powl\n    #else\n    #  define POW pow\n    #endif\n--\n    Andy Dougherty      doughera@lafayette.edu\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1257593232,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxODg=","github-url":"https://github.com/parrot/parrot/issues/451#issuecomment-3503188"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1176#comment:4\" title=\"Comment 4 for Ticket #1176\"\u003edukeleto\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n I have redefined POW to be pow() unconditionally in r42217, and put a note referencing this TT.\n This is no longer blocking the port of Parrot to RTEMS.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nCould you check out Andy D's suggestion and let us know what you think of it?\n\u003c/p\u003e\n\n\u003cp\u003e\nIt would then be good to know whether you think we should pursue the Configure-time check for \u003ctt\u003epowl\u003c/tt\u003e OTOH or close the ticket on the other.\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1257600297,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxODk=","github-url":"https://github.com/parrot/parrot/issues/451#issuecomment-3503189"},"message":"\u003cp\u003e\nI've never seen the --floatval flag before. Does anyone run the test suite with it on? Does it work? I would prefer a configure-time check for powl, before using it.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1257664086,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxOTA=","github-url":"https://github.com/parrot/parrot/issues/451#issuecomment-3503190"},"message":"\u003cp\u003e\nAs reported by mikehh in #parrot, a c++ --optimize build in Ubuntu 9.10 (gcc version 4.4.1) fails the last test in t/op/comp.t Defining POW as powl it passes again.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"96fb2e2e33b59677e3a85ec74746c085275c50d1"},"timestamp":1257692865,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxOTE=","github-url":"https://github.com/parrot/parrot/issues/451#issuecomment-3503191"},"message":"\u003cp\u003e\nref previous comment by NotFound\n\u003c/p\u003e\n\n\u003cp\u003e\nin the --optimize build with g++ 4.4.1 on Ubuntu 9.10 i386 it uses the long double (80 bits) in the test t/op/comp.t - test 7 in setting the string (i.e. powl is needed here) - it does not use it in the gcc 4.4.1 build with --optimize, or either without --optimize.\n\u003c/p\u003e\n\n\u003cp\u003e\nthe test - t/op/comp-7.pasm\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e        new P0, 'Float'\n        set P0, -1.2\n        new P1, 'String'\n        set P1, \"-1.2\"\n        eq_num P0, P1, OK\n        print \"not \"\nOK:     print \"ok\\n\"\n        end\n\u003c/pre\u003e\u003cp\u003e\nthe test passes if the line set P1, \"-1.2\" is changed to set P1, \"-1.2000000000\".  fewer zeros do not work (more ok).\n\u003c/p\u003e\n\n\u003cp\u003e\nIt also passes if POW is defined as powl.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe standard allows the use of higher precision in intermediate calculations, which it appears the --optimize build with g++ 4.4.1 is doing here.\n\u003c/p\u003e\n\n\u003cp\u003e\nref --floatval\n\u003c/p\u003e\n\n\u003cp\u003e\nI haven't used this recently in builds but I can envisage circumstances where I might need it.  On the i386 platform double is 64 bits and long double is 80 bits.  On the amd64 platform double is again 64 bits but long double is 128 bits, using different functionality in the x86_64 (intel or amd) processors rather than the old x87 functionality.  This might be needed for higher precision calculations in certain circumstances which should be quicker than using bignum or whatever.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1257805325,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxOTI=","github-url":"https://github.com/parrot/parrot/issues/451#issuecomment-3503192"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1176#comment:8\" title=\"Comment 8 for Ticket #1176\"\u003edukeleto\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n I've never seen the --floatval flag before. Does anyone run the test suite with it on? Does it work? I would prefer a configure-time check for powl, before using it.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nAs I said above, it used to mostly work.  As I recall, there were a few PBC issues and some broken tests, but they were mostly bad tests.\n\u003c/p\u003e\n\n\u003cp\u003e\nWhile you are correct that a Configure probe would be useful (see TT \u003ca class=\"new ticket\" href=\"http://trac.parrot.org/parrot/ticket/1048\" title=\"bug: [TODO] Configure.pl needs a has_function() function. (new)\"\u003e#1048\u003c/a\u003e for some thoughts on that) I think my patch should be applied in the meantime.  With my patch above, parrot won't normally try to use powl unless the user explicitly asks for \u003ctt\u003e --floatval='long double'\u003c/tt\u003e.  I don't think a user without a working powl function is likely to ask for long doubles.\n\u003c/p\u003e\n\n\u003cp\u003e\nI'm actually puzzled how the old version could have blocked RTEMS, unless they were somehow effectively using \u003ctt\u003e--floatval='float'\u003c/tt\u003e.  I don't know if that has ever worked.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"78e8e0564a3fc1219f3809fef0d2fda5e950ad73"},"timestamp":1274863354,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxOTM=","github-url":"https://github.com/parrot/parrot/issues/451#issuecomment-3503193"},"message":"\u003cp\u003e\nAfter the IRC tonight, I was looking at the tickets and this one caught my eye.  RTEMS via newlib does appear to have all of the powXXX variants.  It is in libm.a:\n\u003c/p\u003e\n\n\u003cp\u003e\n$ i386-rtems4.10-nm -g /opt/rtems-4.10/i386-rtems4.10/lib/libm.a |grep \"T po\"\n\u003c/p\u003e\n\n\u003cp\u003e\n00000000 T powl\n00000000 T pow10\n00000000 T pow10f\n00000000 T pow\n00000000 T powf\n\u003c/p\u003e\n\n\u003cp\u003e\nSo your probes have to be aware of which library the method is in.  In this case, it is libm.a, not libc.a.  So I think this may be a non-issue if you use the correct arguments.\n\u003c/p\u003e\n\n\u003cp\u003e\nAnd FWIW the definitive site for POSIX info is opengroup.org:\n\u003c/p\u003e\n\n\u003cp\u003e\n\u003ca   href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"\u003e\u003cspan class=\"icon\"\u003eÂ \u003c/span\u003ehttp://www.opengroup.org/onlinepubs/009695399/functions/pow.html\u003c/a\u003e\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1416753086,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY0MTE5NzYy","github-url":"https://github.com/parrot/parrot/issues/451#issuecomment-64119762"},"message":"Probe for several long math extensions now done in #1111","files":null},{"type":4,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1416753086,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTk3MzE5MzA5"},"status":2}]}