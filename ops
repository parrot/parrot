{"version":1,"ops":[{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1290393727,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM4MjU=","github-url":"https://github.com/parrot/parrot/issues/629#issuecomment-3503825"},"message":"\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n In case (2) above, get_class\u0026lt;namespace\u0026gt; either returns the existing proxy, returns an existing class, or creates a new Class (not needing to ever worry about creating a PMCProxy or conflicting with an existing C-based PMC type name).\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nIMO, get_class\u0026lt;namespace\u0026gt; should never automatically create a new Class PMC object.  It should return PMCNULL for non-existing classes.  (Built-in PMC types should be assumed to have a class object of some sort.)\n\u003c/p\u003e\n\n\u003cp\u003e\nPm\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1290399199,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM4MjY=","github-url":"https://github.com/parrot/parrot/issues/629#issuecomment-3503826"},"message":"\u003cp\u003e\nI like that idea, Patrick. However, if I make that change the build fails horribly.\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e./parrot runtime/parrot/library/PGE/Perl6Grammar.pbc --output=compilers/tge/TGE/Parser.pir compilers/tge/TGE/Parser.pg\nParent isn't a Class.\ncurrent instr.: 'parrot;P6metaclass;add_parent' pc 278 (runtime/parrot/library/P6object.pir:243)\ncalled from Sub 'parrot;P6metaclass;register' pc 708 (runtime/parrot/library/P6object.pir:465)\ncalled from Sub 'parrot;PGE;Match;' pc 18 (compilers/pge/PGE/Match.pir:20)\ncalled from Sub 'parrot;PGE;Perl6Grammar;Compiler;__onload' pc 24 (runtime/parrot/library/PGE/Perl6Grammar.pir:74)\n... call repeated 1 times\n\u003c/pre\u003e\u003cp\u003e\nSo at the very least we are going to need a deprecation cycle and some non-trivial fixes to several areas of our standard runtime library. A quick review shows that TGE, PGE, and P6object are all going to need modifications in order to follow this rule. If this is okay for you, I can create a branch to start the work, and add in a deprecation notice.\n\u003c/p\u003e","files":null}]}