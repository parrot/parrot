{"version":1,"ops":[{"type":3,"author":{"id":"21d656f4859afd5322373fdde2c3442843d2220a"},"timestamp":1237039391,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxNzM=","github-url":"https://github.com/parrot/parrot/issues/450#issuecomment-3503173"},"message":"97724 byte attachment from ujwal\nat http://trac.parrot.org/parrot/raw-attachment/ticket/446/build-output.txt\nis too big for GitHub.","files":null},{"type":3,"author":{"id":"21d656f4859afd5322373fdde2c3442843d2220a"},"timestamp":1237047409,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxNzQ=","github-url":"https://github.com/parrot/parrot/issues/450#issuecomment-3503174"},"message":"16873 byte attachment from ujwal\nat http://trac.parrot.org/parrot/raw-attachment/ticket/446/warnings_nci_example.patch\n\n# ```Index: src/embed.c\n\n--- src/embed.c (revision 37404)\n+++ src/embed.c (working copy)\n@@ -1293,7 +1293,7 @@\n      \\* before compiling a string\n      */\n     if (! interp-\u003einitial_pf) {\n-        PackFile *pf = PackFile_new_dummy(interp, \"compile_string\");\n-        /_PackFile *pf =_/ PackFile_new_dummy(interp, \"compile_string\");\n       /\\* Assumption: there is no valid reason to fail to create it.\n        \\* If the assumption changes, replace the assertio with a\n        \\* runtime check\n  Index: src/oo.c\n  ===================================================================\n  --- src/oo.c    (revision 37404)\n  +++ src/oo.c    (working copy)\n  @@ -503,7 +503,7 @@\n                   \"Unrecognized class name PMC type\");\n           break;\n   }\n-    return 0;\n-    /\\* return 0; _/ /_  warning C4702: unreachable code */\n  }\n\n# Index: src/ops/core.ops\n\n--- src/ops/core.ops    (revision 37404)\n+++ src/ops/core.ops    (working copy)\n@@ -917,12 +917,15 @@\n         _exit($2);\n     else {\n         opcode_t \\* const ret       = expr NEXT();\n-        PMC             *resume    = new_ret_continuation_pmc(interp, ret);\n-        PMC             *exception = Parrot_ex_build_exception(interp, $1,\n-        PMC *exception;\n-                                     new_ret_continuation_pmc(interp, ret);\n-                         exception = Parrot_ex_build_exception(interp, $1,\n                                                              $2, NULL);\n-        {\n       opcode_t \\* const dest      = Parrot_ex_throw_from_op(interp,\n                                                            exception, ret);\n       goto ADDRESS(dest);\n-        }\n   }\n  }\n\n@@ -1448,7 +1451,8 @@\n     else {\n         $1 = pmc_new(interp, enum_class_Hash);\n     }\n-    goto NEXT();\n-    /\\* goto NEXT(); _/ /_ for non :flow ops this \"goto NEXT()\" macro is added at Parrot::OpsFile.pm in line 491-493 */\n- ```\n                    /* which is causing \"warning C4702: unreachable code\" */\n  ```\n  \n  }\n  \n  =item B\u003cannotations\u003e(out PMC, in STR)\n  @@ -1467,7 +1471,8 @@\n   else {\n       $1 = PMCNULL;\n   }\n-    goto NEXT();\n-    /\\* goto NEXT(); _/ /_ for non :flow ops this \"goto NEXT()\" macro is added at Parrot::OpsFile.pm in line 491-493 */\n- ```\n                    /* which is causing \"warning C4702: unreachable code\" */\n  ```\n  \n  }\n  \n  =back\n  \n  # Index: src/string/encoding/fixed_8.c\n  \n  --- src/string/encoding/fixed_8.c   (revision 37404)\n  +++ src/string/encoding/fixed_8.c   (working copy)\n  @@ -149,7 +149,9 @@\n       **attribute__nonnull**(5)\n       FUNC_MODIFIES(*new_codepoints);\n\n-PARROT_DOES_NOT_RETURN\n+#ifndef _MSC_VER\n-    PARROT_DOES_NOT_RETURN\n  +#endif\n  PARROT_CANNOT_RETURN_NULL\n  static STRING \\* to_encoding(PARROT_INTERP,\n     SHIM(STRING *src),\n  @@ -229,7 +231,9 @@\n  \n  */\n\n-PARROT_DOES_NOT_RETURN\n+#ifndef _MSC_VER\n-  PARROT_DOES_NOT_RETURN\n  +#endif\n  PARROT_CANNOT_RETURN_NULL\n  static STRING *\n  to_encoding(PARROT_INTERP, SHIM(STRING *src), SHIM(STRING *dest))\n  \n  # Index: src/string/encoding.c\n  \n  --- src/string/encoding.c   (revision 37405)\n  +++ src/string/encoding.c   (working copy)\n  @@ -148,7 +148,11 @@\n  */\n  \n  PARROT_EXPORT\n  -PARROT_DOES_NOT_RETURN\n  +\n  +#ifndef _MSC_VER\n-    PARROT_DOES_NOT_RETURN\n  +#endif\n  +PARROT_WARN_UNUSED_RESULT /\\* mentioned in the above comment */\n  PARROT_CANNOT_RETURN_NULL\n  const ENCODING *\n  Parrot_load_encoding(PARROT_INTERP, ARGIN(const char *encodingname))\n  @@ -438,7 +442,9 @@\n  */\n  \n  PARROT_EXPORT\n  -PARROT_DOES_NOT_RETURN\n  +#ifndef _MSC_VER\n-    PARROT_DOES_NOT_RETURN\n  +#endif\n  encoding_converter_t\n  Parrot_find_encoding_converter(PARROT_INTERP, ARGIN(ENCODING _lhs), ARGIN(ENCODING *rhs))\n  {\n  Index: src/thread.c\n  ===================================================================\n  --- src/thread.c    (revision 37404)\n  +++ src/thread.c    (working copy)\n  @@ -500,7 +500,9 @@\n   PMC             *sub_arg;\n   PMC \\* const      self    = (PMC_) arg;\n   PMC             *ret_val = NULL;\n-    Parrot_Interp    interp  = (Parrot_Interp)VTABLE_get_pointer(interp, self);\n-    Parrot_Interp    interp  = NULL;\n-   \n-    interp = (Parrot_Interp)VTABLE_get_pointer(interp, self);\n  \n   Parrot_block_GC_mark(interp);\n   Parrot_block_GC_sweep(interp);\n  @@ -628,7 +630,7 @@\n  \n  ```\n       if (PMC_IS_NULL(dval)) {\n           PMC * const copy = make_local_copy(d, s, val);\n  ```\n-                Parrot_sub *val_sub;\n- ```\n             Parrot_sub *val_sub = NULL;\n  \n           if (val-\u003evtable-\u003ebase_type == enum_class_Sub)\n               PMC_get_sub(interp, val, val_sub);\n  ```\n  \n  # Index: src/packfile.c\n  \n  --- src/packfile.c  (revision 37404)\n  +++ src/packfile.c  (working copy)\n  @@ -865,7 +865,7 @@\n   ASSERT_ARGS(do_sub_pragmas)\n   PackFile_FixupTable \\* const ft = self-\u003efixups;\n   PackFile_ConstTable \\* const ct = self-\u003econst_table;\n-    PackFile            \\* const pf = self-\u003ebase.pf;\n-    /_PackFile            \\* const pf = self-\u003ebase.pf;_/\n   opcode_t i;\n  \n   TRACE_PRINTF((\"PackFile: do_sub_pragmas (action=%d)\\n\", action));\n  \n  # Index: src/spf_render.c\n  \n  --- src/spf_render.c    (revision 37404)\n  +++ src/spf_render.c    (working copy)\n  @@ -110,7 +110,10 @@\n  - around for us.\n    */\n    #ifdef _MSC_VER\n    +#pragma warning(push)  \n    +#pragma warning(disable:4005)  \n    #  define snprintf _snprintf\n    +#pragma warning(pop)  \n    #endif\n  \n  /*\n  \n  # Index: CREDITS\n  \n  --- CREDITS (revision 37404)\n  +++ CREDITS (working copy)\n  @@ -901,6 +901,8 @@\n  U: ujwalic\n  E: ujwalic@gmail.com\n  D: OpenGL/GLUT include file order with MSVS\n  +D: Fixed and updated Qt/NCI example for Windows\n  +D: Cleaned up warnings on Windows\n  \n  N: Uri Guttman\n  D: Lot of general Parrot design hints\n  \n  # Index: include/parrot/encoding.h\n  \n  --- include/parrot/encoding.h   (revision 37404)\n  +++ include/parrot/encoding.h   (working copy)\n  @@ -111,7 +111,9 @@\n       **attribute__nonnull**(2);\n  \n  PARROT_EXPORT\n  -PARROT_DOES_NOT_RETURN\n  +#ifndef _MSC_VER\n-    PARROT_DOES_NOT_RETURN\n  +#endif\n  encoding_converter_t Parrot_find_encoding_converter(PARROT_INTERP,\n     ARGIN(ENCODING _lhs),\n     ARGIN(ENCODING *rhs))\n  @@ -125,7 +127,9 @@\n  const ENCODING_ Parrot_get_encoding(SHIM_INTERP, INTVAL number_of_encoding);\n  \n  PARROT_EXPORT\n  -PARROT_DOES_NOT_RETURN\n  +#ifndef _MSC_VER\n-    PARROT_DOES_NOT_RETURN\n  +#endif\n  PARROT_CANNOT_RETURN_NULL\n  const ENCODING \\* Parrot_load_encoding(PARROT_INTERP,\n     ARGIN(const char *encodingname))\n  \n  # Index: config/gen/platform/win32/exec.c\n  \n  --- config/gen/platform/win32/exec.c    (revision 37404)\n  +++ config/gen/platform/win32/exec.c    (working copy)\n  @@ -213,7 +213,10 @@\n           {\n               /\\* Allocate space for another pointer in **argv. */\n               argc++;\n  +#pragma warning(push)  \n  +#pragma warning(disable:4090)  \n               argv = mem_sys_realloc(argv, (argc + 1) \\* sizeof (int));\n  +#pragma warning(pop)  \n               *(argv + (argc - 1)) = tmp;\n               *(argv + argc) = NULL;\n           }\n  \n  # Index: config/gen/platform/win32/stat.c\n  \n  --- config/gen/platform/win32/stat.c    (revision 37404)\n  +++ config/gen/platform/win32/stat.c    (working copy)\n  @@ -110,6 +110,8 @@\n           result = -1;\n           break;\n       case STAT_ACCESSTIME:\n  +#pragma warning(push)  \n  +#pragma warning(disable:4244)  \n           result = statbuf-\u003est_atime;\n           break;\n       case STAT_MODIFYTIME:\n  @@ -117,6 +119,7 @@\n           break;\n       case STAT_CHANGETIME:\n           result = statbuf-\u003est_ctime;\n  +#pragma warning(pop)  \n           break;\n       case STAT_BACKUPTIME:\n           result = -1;\n  \n  # Index: examples/nci/QtHelloWorld.pasm\n  \n  --- examples/nci/QtHelloWorld.pasm  (revision 37404)\n  +++ examples/nci/QtHelloWorld.pasm  (working copy)\n  @@ -11,12 +11,12 @@\n  \n  =head1 DESCRIPTION\n\n-Sample \"Hello World\" with Qt, via Parrot Native Call Interface (nci). See\n+Sample \"Hello World\" with Qt, via Parrot Native Call Interface (NCI). See\n F\u003cdocs/pdds/pdd03_calling_conventions.pod\u003e.\n\n-Qt is a multiplatform C++ GUI application framework\n-(Lhttp://doc.trolltech.com/3.1/aboutqt.html\u003e). You'll need to build\n-F\u003clibPQt.so\u003e and install it in F\u003cruntime/parrot/dynext\u003e for this to\n+Qt - A cross-platform application and UI framework\n+(Lhttp://www.qtsoftware.com/about/news/lgpl-license-option-added-to-qt). You'll need to build\n+F\u003clibPQt.so\u003e or F\u003cPQt.dll\u003e and install it in F\u003cruntime/parrot/dynext\u003e for this to\n work, see F\u003cexamples/nci/PQt.C\u003e for more information.\n\n Note that this will either need JIT for building the NCI-functions on\n@@ -35,30 +35,24 @@\n     set P2, P5  # remember pApp\n\n # get and invoke QLabel_new\n-    set S5, \"Hello, world!\"\n   dlfunc P0, P1, \"QLabel_new\", \"pt\"\n   # if you need more labels, save P0 = QLabel_new() function\n-    set_args \"0\", \"Hello, world!\"\n-    get_results \"0\", P5\n   invokecc P0\n   set P6, P5  # save pLabel\n  \n  # size the QLabel\n-    set I5, 30  # y\n-    set I6, 120 # x\n   dlfunc P0, P1, \"QLabel_resize\", \"vpii\"\n-    set_args \"0,0,0\", P6, 120, 30\n   invokecc P0\n\n-# register the label\n-    dlfunc P0, P1, \"QApplication_setMainWidget\", \"vpp\"\n-    set P5, P6  # pLabel\n-    set P6, P2  # pApp\n-    invokecc P0\n-    # P5  = label\n   dlfunc P0, P1, \"QLabel_show\", \"vp\"\n   invokecc P0\n  \n  # and go\n  \n     dlfunc P0, P1,\"QApplication_exec\", \"vp\"\n-    set P5, P2  # app\n-    set_args \"0\", P2\n   invokecc P0\n   end\n\n# Index: examples/nci/PQt.C\n\n--- examples/nci/PQt.C  (revision 37404)\n+++ examples/nci/PQt.C  (working copy)\n@@ -1,149 +0,0 @@\n\n## -/*\n\n-# Copyright (C) 2001-2003, Parrot Foundation.\n\n## -# $Id$\n\n## -=head1 NAME\n\n## -examples/nci/PQt.C - Qt/Parrot Library\n\n## -=head1 SYNOPSIS\n\n## -Compile with:\n\n## \\-    g++ -fPIC -I$QTDIR/include -L$QTDIR -c PQt.C\n\n## \\-    gcc -shared -o libPQt.so PQt.o $QTDIR/lib/libqt.so\n\n## -Or something like that...\n\n## -=head1 DESCRIPTION\n\n-Qt Native interface for Parrot. See F\u003cexamples/nci/QtHelloWorld.pasm\u003e\n\n## -for more information.\n\n## -=cut\n\n## -*/\n\n-#include \u003cqapplication.h\u003e\n-#include \u003cqlabel.h\u003e\n-extern \"C\" {\n-#include \u003cstdio.h\u003e\n\n## -#include \u003cdlfcn.h\u003e\n\n## -QApplication \\* pApp;\n\n## -/*\n\n## -=head2 QApplication bindings\n\n## -=over 4\n\n## -=item C\u003cQApplication *QApplication_new(void)\u003e\n\n## -=cut\n\n-*/\n-QApplication *QApplication_new(void) {\n-    int PQtargc = 0;\n-    char *PQtargv[2];\n-    PQtargv[0] = \"\";\n-    PQtargv[1] = NULL;\n-    pApp = new QApplication(PQtargc, PQtargv);\n-    return pApp;\n  -}\n  -\n  -/*\n  -\n  -=item C\u003cvoid QApplication_exec(QApplication *app)\u003e\n  -\n  -=cut\n  -\n  -*/\n  -\n  -void QApplication_exec(QApplication *app)\n  -{\n-    app-\u003eexec();\n  -}\n  -\n  -/*\n  -\n  -=item C\u003cvoid QApplication_setMainWidget(QApplication *app, QWidget *w)\u003e\n  -\n  -=cut\n  -\n  -*/\n  -\n  -void QApplication_setMainWidget(QApplication *app, QWidget *w)\n  -{\n-    app-\u003esetMainWidget(w);\n  -}\n  -\n  -/*\n  -\n  -=back\n  -\n  -=head2 QLabel bindings\n  -\n  -=over 4\n  -\n  -=item C\u003cQLabel * QLabel_new(const char *txt)\u003e\n  -\n  -=cut\n  -\n  -*/\n  -\n  -QLabel \\* QLabel_new(const char *txt)\n  -{\n-    QLabel \\* pLabel = new QLabel(txt, 0);\n-    return pLabel;\n  -}\n  -\n  -/*\n  -\n  -=item C\u003cvoid QLabel_show(QLabel *label)\u003e\n  -\n  -=cut\n  -\n  -*/\n  -\n  -void QLabel_show(QLabel *label)\n  -{\n-    label-\u003eshow();\n  -}\n  -\n  -/*\n  -\n  -=item C\u003cvoid QLabel_resize(QLabel *label, int x, int y)\u003e\n  -\n  -=cut\n  -\n  -*/\n  -\n  -void QLabel_resize(QLabel *label, int x, int y)\n  -{\n-    label-\u003eresize(x, y);\n  -}\n  -\n  -}\n  -\n  -/*\n  -\n  -=back\n  -\n  -=head1 SEE ALSO\n  -\n  -F\u003cexamples/nci/QtHelloWorld.pasm\u003e,\n  -F\u003cdocs/pdds/pdd03_calling_conventions.pod\u003e.\n  -\n  -=cut\n  -\n  -_/\n  -\n  -/_\n- \\* Local variables:\n- \\*   c-file-style: \"parrot\"\n- \\* End:\n- \\* vim: expandtab shiftwidth=4:\n- _/\n  Index: examples/nci/PQt.cpp\n  ===================================================================\n  --- examples/nci/PQt.cpp    (revision 0)\n  +++ examples/nci/PQt.cpp    (revision 0)\n  @@ -0,0 +1,151 @@\n  +/_\n  +\n  +# Copyright (C) 2001-2003, Parrot Foundation.\n  +# $Id: PQt.C 37201 2009-03-08 12:07:48Z fperrad $\n  +\n  +=head1 NAME\n  +\n  +examples/nci/PQt.cpp - Qt/Parrot Library\n  +\n  +=head1 SYNOPSIS\n  +\n  +Compile with:\n  +\n  +*NIX:\n  +\n-    $ g++ -fPIC -I$QTDIR/include -I$QTDIR/include/QtGui -L$QTDIR -c PQt.cpp\n  +\n-    $ gcc -shared -o libPQt.so PQt.o $QTDIR/lib/libQtCore4.so $QTDIR/lib/libQtGui4.so\n  +\n  +Windows:\n  +\n-    \u003e \"%VS90COMNTOOLS%\\vsvars32.bat\"\n  +\n-    \u003e set INCLUDE=%QTDIR%\\include;%QTDIR%\\include\\QtGui;%INCLUDE%\n-   \n-    \u003e set LIB=%QTDIR%\\lib;%LIB%\n  +\n-    \u003e cl /LD PQt.cpp QtGui4.lib QtCore4.lib\n  +\n  +Or something like that...\n  +\n  +=head1 DESCRIPTION\n  +\n  +Qt Native interface for Parrot. See F\u003cexamples/nci/QtHelloWorld.pir\u003e\n  +for more information.\n  +\n  +=cut\n  +\n  +*/\n  +\n  +#ifdef _WIN32\n-  #define PQT_API __declspec(dllexport)\n  +#else\n-  #define PQT_API \n  +#endif\n  +\n  +#include \u003cQtGui\u003e\n  +extern \"C\" {\n  +\n  +PQT_API QApplication \\* pApp;\n  +\n  +/*\n  +\n  +=head2 QApplication bindings\n  +\n  +=over 4\n  +\n  +=item C\u003cQApplication *QApplication_new(void)\u003e\n  +\n  +=cut\n  +\n  +*/\n  +PQT_API QApplication *QApplication_new(void) {\n-    int PQtargc = 0;\n-    char *PQtargv[2];\n-    PQtargv[0] = \"\";\n-    PQtargv[1] = NULL;\n-    pApp = new QApplication(PQtargc, PQtargv);\n-    return pApp;\n  +}\n  +\n  +/*\n  +\n  +=item C\u003cvoid QApplication_exec(QApplication *app)\u003e\n  +\n  +=cut\n  +\n  +*/\n  +\n  +PQT_API void QApplication_exec(QApplication *app)\n  +{\n-    app-\u003eexec();\n  +}\n  +\n  +/*\n  +\n  +=back\n  +\n  +=head2 QLabel bindings\n  +\n  +=over 4\n  +\n  +=item C\u003cQLabel * QLabel_new(const char *txt)\u003e\n  +\n  +=cut\n  +\n  +*/\n  +\n  +PQT_API QLabel \\* QLabel_new(const char *txt)\n  +{\n-    QLabel \\* pLabel = new QLabel(txt, 0);\n-    return pLabel;\n  +}\n  +\n  +/*\n  +\n  +=item C\u003cvoid QLabel_show(QLabel *label)\u003e\n  +\n  +=cut\n  +\n  +*/\n  +\n  +PQT_API void QLabel_show(QLabel *label)\n  +{\n-    label-\u003eshow();\n  +}\n  +\n  +/*\n  +\n  +=item C\u003cvoid QLabel_resize(QLabel *label, int x, int y)\u003e\n  +\n  +=cut\n  +\n  +*/\n  +\n  +PQT_API void QLabel_resize(QLabel *label, int x, int y)\n  +{\n-    label-\u003eresize(x, y);\n  +}\n  +\n  +}\n  +\n  +/*\n  +\n  +=back\n  +\n  +=head1 SEE ALSO\n  +\n  +F\u003cexamples/nci/QtHelloWorld.pir\u003e,\n  +F\u003cdocs/pdds/pdd03_calling_conventions.pod\u003e.\n  +\n  +=cut\n  +\n  +_/\n  +\n  +/_\n- \\* Local variables:\n- \\*   c-file-style: \"parrot\"\n- \\* End:\n- \\* vim: expandtab shiftwidth=4:\n- */\n  Index: examples/nci/QtHelloWorld.pir\n  ===================================================================\n  --- examples/nci/QtHelloWorld.pir   (revision 0)\n  +++ examples/nci/QtHelloWorld.pir   (revision 0)\n  @@ -0,0 +1,69 @@\n  +# Copyright (C) 2001-2003, Parrot Foundation.\n  +# $Id: QtHelloWorld.pasm 37201 2009-03-08 12:07:48Z fperrad $\n  +\n  +=head1 NAME\n  +\n  +examples/nci/QtHelloWorld.pir - Qt Example\n  +\n  +=head1 SYNOPSIS\n  +\n-    % ./parrot examples/nci/QtHelloWorld.pir\n  +\n  +=head1 DESCRIPTION\n  +\n  +Sample \"Hello World\" with Qt, via Parrot Native Call Interface (NCI). See\n  +F\u003cdocs/pdds/pdd03_calling_conventions.pod\u003e.\n  +\n  +Qt - A cross-platform application and UI framework\n  +(Lhttp://www.qtsoftware.com/about/news/lgpl-license-option-added-to-qt). You'll need to build\n  +F\u003clibPQt.so\u003e or F\u003cPQt.dll\u003e and install it in F\u003cruntime/parrot/dynext\u003e for this to\n  +work, see F\u003cexamples/nci/PQt.C\u003e for more information.\n  +\n  +Note that this will either need JIT for building the NCI-functions on\n  +the fly. If this is not available try adding missing signatures to\n  +F\u003csrc/call_list.txt\u003e and rebuilding Parrot.\n  +\n  +=cut\n  +.sub main\n-   \n-    .local pmc libpqt\n-    loadlib libpqt, \"libPQt\"\n-    if libpqt goto loaded\n  +\n-  failed:\n-    .local string message\n-    message  = 'Install PQt.dll or libPQt.so into runtime/parrot/dynext'\n-    die message\n  +\n-  loaded:\n-    print \"Loaded\\n\"\n  +\n-    .local pmc QApplication_new, pApp\n-    dlfunc QApplication_new, libpqt, \"QApplication_new\", \"pv\"\n-    pApp = QApplication_new()\n  +\n-    .local pmc QLabel_new, pLabel\n-    .local string caption\n-    caption = \"Hello, world!\"\n-    dlfunc QLabel_new, libpqt, \"QLabel_new\", \"pt\"\n-    pLabel = QLabel_new(caption)\n  +\n-    .local pmc QLabel_resize\n-    dlfunc QLabel_resize, libpqt, \"QLabel_resize\", \"vpii\"\n-    QLabel_resize(pLabel, 120, 30)\n  +\n-    .local pmc QLabel_show\n-    dlfunc QLabel_show, libpqt, \"QLabel_show\", \"vp\"\n-    QLabel_show(pLabel)\n  +\n-    .local pmc QApplication_exec\n-    dlfunc QApplication_exec, libpqt,\"QApplication_exec\", \"vp\"\n-    QApplication_exec(pApp)\n  +\n  +.end\n  +\n  +=head1 SEE ALSO\n  +\n  +F\u003cexamples/nci/PQt.C\u003e, F\u003cdocs/pdds/pdd03_calling_conventions.pod\u003e.\n  +\n  +=cut\n\n```\n```","files":null},{"type":3,"author":{"id":"21d656f4859afd5322373fdde2c3442843d2220a"},"timestamp":1237057391,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxNzU=","github-url":"https://github.com/parrot/parrot/issues/450#issuecomment-3503175"},"message":"\u003cp\u003e\nmy build output before fixing\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"21d656f4859afd5322373fdde2c3442843d2220a"},"timestamp":1237065409,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxNzY=","github-url":"https://github.com/parrot/parrot/issues/450#issuecomment-3503176"},"message":"\u003cp\u003e\n[PATCH]\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0c1ee4af33970ee80260d659da672a9306b51181"},"timestamp":1237100232,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxNzc=","github-url":"https://github.com/parrot/parrot/issues/450#issuecomment-3503177"},"message":"\u003cp\u003e\nThanks, the unused variable and NCI example fixes applied in r37420, r37421, and r37422. Other changes held for review after 1.0.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1237142902,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxNzg=","github-url":"https://github.com/parrot/parrot/issues/450#issuecomment-3503178"},"message":"\u003cp\u003e\nI have more msvc warnings. Two look important:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003esrc/thread.c(503): Parrot_Interp  interp = (Parrot_Interp)VTABLE_get_pointer(interp, self);\n'interp' used without having been initialized\n\u003c/pre\u003e\u003cp\u003e\nand here we miss an explicit double =\u0026gt; long cast:\n\u003c/p\u003e\n\u003cpre class=\"wiki\"\u003e--- src/key.c   (revision 37431)\n+++ src/key.c   (working copy)\n@@ -341,10 +341,10 @@\n             return REG_INT(interp, int_key);\n         case KEY_number_FLAG:\n-            return PMC_num_val(key);\n+            return (INTVAL)PMC_num_val(key);\n         case KEY_number_FLAG | KEY_register_FLAG:\n             GETATTR_Key_int_key(interp, key, int_key);\n-            return REG_NUM(interp, int_key);\n+            return (INTVAL)REG_NUM(interp, int_key);\n         case KEY_pmc_FLAG | KEY_register_FLAG:\n             {\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1237261933,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxNzk=","github-url":"https://github.com/parrot/parrot/issues/450#issuecomment-3503179"},"message":"\u003cp\u003e\nsrc/key.c fixed with r37454\n\u003c/p\u003e\n\n\u003cp\u003e\ncotto is working on src/threads.c:503\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1237265511,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxODA=","github-url":"https://github.com/parrot/parrot/issues/450#issuecomment-3503180"},"message":"\u003cp\u003e\nThe uninitialized interp bug is fixed in r37502.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1261132670,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxODE=","github-url":"https://github.com/parrot/parrot/issues/450#issuecomment-3503181"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/446#comment:4\" title=\"Comment 4 for Ticket #446\"\u003ecotto\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n The uninitialized interp bug is fixed in r37502.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\ncotto,\n\u003c/p\u003e\n\n\u003cp\u003e\nCan you appraise where this ticket stands?\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\u003cbr /\u003e\nkid51\n\u003c/p\u003e","files":null}]}