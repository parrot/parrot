{"version":1,"ops":[{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1341243734,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3MTE2MjQ=","github-url":"https://github.com/parrot/parrot/issues/795#issuecomment-6711624"},"message":"Thanks for this well-written issue with example code! This behavior from the Parrot GC is not acceptable.","files":null},{"type":3,"author":{"id":"56b030459ff5c3e63b58d71e1bed10897e6a7686"},"timestamp":1341266704,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3MjExNjE=","github-url":"https://github.com/parrot/parrot/issues/795#issuecomment-6721161"},"message":"Sure, only one RPA is alive at any given time, but without reference counting, the only other way to determine the lifecycle of a given gcable is to perform exhaustive automated escape analysis. With so much of Parrot written in C, that's infeasible.\n\nWith that said, if you're willing to perform some manual escape analysis in tight loops, a combination of the needs_destroy opcode and sweep 0 (lazy sweep) will work, once someone implements lazy sweep of early destruction PMCs in the GMS GC (say in the chromatic/early_pmc_gc branch).","files":null},{"type":3,"author":{"id":"18879c4084549ff2c7022dc058bcf4940fadd0f2"},"timestamp":1341310208,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY3MzA2NDU=","github-url":"https://github.com/parrot/parrot/issues/795#issuecomment-6730645"},"message":"There are other solutions to this problem. For example the GC thresholds we had in the old non-generational mark-and-sweep collector. I'm pretty sure we once had a test that checked that code very similiar to pmichaud's examples never uses more than some MBs of RAM.\n\nYou could also run a GC whenever malloc runs out of memory, but this is pretty tricky because then you can't allocate additional memory during GC.","files":null},{"type":5,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1414252511,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDE4MzY2MDQ4Mg=="},"added":["Component-GC"],"removed":[]},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1416748974,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY0MTE3NzU2","github-url":"https://github.com/parrot/parrot/issues/795#issuecomment-64117756"},"message":"This is stress tested ok with the default gms GC. \n\nFor ms, ms2 and inf we have still other unrelated string Memory_buffer problems (ptr prologs). See the relevant GC tickets","files":null},{"type":4,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1416748975,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTk3MzEzMzk4"},"status":2}]}