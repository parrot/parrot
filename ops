{"version":1,"ops":[{"type":1,"author":{"id":"8c86ede03c8e80b0dad5131138f96e957a4ee66b"},"timestamp":1380773349,"metadata":{"github-id":"MDU6SXNzdWUyMDQzNjQ1OQ==","github-url":"https://github.com/parrot/parrot/issues/1001","origin":"github"},"title":"Anonymous classes should be supported","message":"Reported by: zefram@fysh.org\n\nThe newclass op creates a class metaobject, which is returned in the pmc register that is its output parameter. However, it insists on also putting something into the global namespace. This gives the impression that it's impossible to create an anonymous class. It should be possible to create an operable class without touching the global namespace.\n\nStrangely, what's placed in the global namespace isn't the class metaobject. It's a namespace, apparently intended to contain the class's methods:\n\n```\n$ cat t29.pir\n.HLL \"zz\"\n.sub main :main\n        $P0 = newclass \"Foo\"\n        $P1 = $P0.\"new\"()\n        $P2 = get_namespace\n        $P3 = iter $P2\n        next:\n        unless $P3 goto done\n        $P4 = shift $P3\n        say $P4\n        goto next\n        done:\n        say \":::\"\n        $P5 = get_global \"Foo\"\n        $I0 = isa $P5, \"NameSpace\"\n        say $I0\n.end\n```\n\n```\n$ ./parrot t29.pir\nmain\nFoo\n:::\n1\n```\n\nThis arrangement is inside-out: part of the class's internals (the method namespace) has been made visible to the world while the class as a whole is only known to the code that created it.\n\nFurthermore, the subclass op apparently _can_ create an anonymous _sub_class. If it's used without a third operand, it returns a class metaobject and does not put anything new into the global namespace. I'm mystified as to where its method namespace lives, though.\n\nSome IRC discussion on the topic:\n\n```\n\u003cZefram\u003e I'm finding it inconvenient that some ops insist on writing\n    into the namespace in addition to returning their result in a\n    register\n\u003cUtil\u003e Zefram: Do you have an example of the \"writing into the\n    namespace in addition...\"? Or was that one of the 12 bug reports?\n\u003cUtil\u003e re: anonymous classes; I need to look at the code before I speak\n    to that.\n\u003cZefram\u003e I can put together an example if you want.  it's behaviour of\n    the newclass op, which returns a class metaobject and also writes\n    into the namespace using the name that it was given\n\u003cZefram\u003e the documentation has some mention of using the subclass op\n    to get an anonymous subclass, but doesn't mention any way to get\n    an anonymous class without providing a parent class\n\u003cZefram\u003e the newclass behaviour looks more like a deliberate design\n    decision than a mistake, which is why I've classed this issue as\n    subjective and needing opinions before proceeding with a ticket.\n    but the availability of anonymous subclasses (if that actually\n    works) makes newclass look anomalous\n\u003cZefram\u003e unfortunately investigating just what gets written into the\n    namespace is impeded by the typeof and isa anomalies that are\n    somewhere in the twelve reports that I mailed to you\n\u003crurban\u003e but even anonymous classes need a parent\n\u003crurban\u003e in my case an empty parent uses the default Object as parent\n    class. names should be just optional, yes. registering them into\n    namespaces makes lexically scoped classes hard\n\u003crurban\u003e this needs a discussion on the mailing list\n\u003crurban\u003e but should be no problem to implement\n\u003cZefram\u003e guess I should open a ticket for it then\n\u003cZefram\u003e thanks\n\u003crurban\u003e p5-mop has exactly this very problem\n\u003cZefram\u003e yeah, it's really difficult to work around Perl 5's use of\n    the name as a proxy for the class all over the place\n\u003cbenabik\u003e I occasionally wonder if Parrot's idea of a single global\n    namespace is problematic in and of itself.\n\u003cZefram\u003e but Parrot does have class metaobjects\n\u003cZefram\u003e I think Parrot's built-in namespace is an abstraction\n    inversion. but not really *wrong* in itself\n\u003crurban\u003e names are needed for the general usecase, but should be\n    optional for the simple, fast and small lexical case\n\u003cZefram\u003e you've just got to watch out for things *relying* on the\n    namespace, which is where Perl 5 has a problem\n\u003cbenabik\u003e Well, Parrot's class mechanism is tied to its namespaces.\n\u003cZefram\u003e there are some Parrot doc notes about using namespaces to\n    manage named methods, which has me a bit worried\n\u003cZefram\u003e does that imply that a class must have an absolute name?\n\u003cbenabik\u003e Probably.\n\u003crurban\u003e hmm...\n\u003cZefram\u003e if a class must have an absolute name, then you can't GC\n    classes, because the namespace keeps a reference to some aspects\n    of the class\n\u003cbenabik\u003e Yup.\n\u003cZefram\u003e if it's all managed through class metaobjects, otoh, you can\n    GC classes perfectly well, and there's nothing to stop you naming\n    a class (by storing the class metaobject in the namespace)\n\u003cZefram\u003e hence abstraction inversion to have the namespace come first\n\u003cbenabik\u003e Having to store methods in a namespace would also be less\n    of an issue if the namespaces weren't global.\n\u003cZefram\u003e oh yes, there's no problem having an internal namespace for\n    methods that just hangs from the class metaobject\n\u003cZefram\u003e that's all gcable\n\u003cbenabik\u003e The \"natural\" result (IMHO) is that you remove the global\n    namespace and just have lexical outer ones.  Loading a modules\n    returns a namespace that you can install into your own namespaces\n    however you want.  (merge, name, leave anonymous, whatever.)\n\u003cbenabik\u003e But anyway...\n```\n\n-zefram","files":null}]}