{"version":1,"ops":[{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1312052892,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM0MzE=","github-url":"https://github.com/parrot/parrot/issues/512#issuecomment-3503431"},"message":"3 byte attachment from jkeenan\nat http://trac.parrot.org/parrot/raw-attachment/ticket/2167/installed_dump_sto_files.txt\n\n``` 94\n```","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1312069269,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM0MzI=","github-url":"https://github.com/parrot/parrot/issues/512#issuecomment-3503432"},"message":"\u003cp\u003e\nFor reference, here are the places in the codebase where we will have to consider replacing use of Storable.\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003elib/Parrot/Pmc2c/PMC.pm:26:use Storable ();\nlib/Parrot/Pmc2c/PMC.pm:74:    Storable::store( $self, $self-\u0026gt;filename('.dump') );\nlib/Parrot/Pmc2c/Pmc2cMain.pm:10:use Storable;\nlib/Parrot/Pmc2c/Pmc2cMain.pm:142:\n  consists of a binary dump of a hash reference, Storable-style.\nlib/Parrot/Pmc2c/Pmc2cMain.pm:165:    return Storable::retrieve($filename);\nlib/Parrot/Pmc2c/VTable.pm:6:use Storable ();\nlib/Parrot/Pmc2c/VTable.pm:56:    Storable::store( $self, $dump_filename );\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1312070892,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM0MzM=","github-url":"https://github.com/parrot/parrot/issues/512#issuecomment-3503433"},"message":"\u003cp\u003e\n94 .dump files in Storable format which get installed\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1312080450,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM0MzQ=","github-url":"https://github.com/parrot/parrot/issues/512#issuecomment-3503434"},"message":"Trac commenter: allison\n\n\u003cpre class=\"wiki\"\u003eOn Sat, Jul 30, 2011 at 08:46:55AM -0000, Parrot wrote:\n\u0026gt;  Downstream in Debian, the upgrade from Perl 5.10 to 5.12 broke Rakudo\n\u0026gt;  compiles, because the installed PMC .dump files were written using the\n\u0026gt;  5.10 version of Storable, and could not be read using the 5.12 version of\n\u0026gt;  Storable. The upstream bugs (closed) related to this failure are:\nI suspect that the problem is that they were written with Storable::store,\nwhich is platform and configuration specific, and that when upgrading from\n5.10 to 5.12 Debian changed their perl configuration from 32 to 64 bit\nintegers.\nStorable itself is quite capable of reading files made all the way back to\n0.60-something, for the same configuration.\nHad parrot used Storable::nstore (the slower but portable format) there\nwould not have been this problem.\n\u0026gt;  This is solved in the short-term, but in the longer-term, Storable is not\n\u0026gt;  a good format for installed, persistent metadata. (It was never intended\n\u0026gt;  to be installed, only to be a temporary build-process cache.)\nHowever, that's key. As the intent was not to install the files, then\nthe faster \"native\" format was a sane choice.\nAnd I agree with that (any) Storable format isn't an appropriate choice\nfor something installed. It's not a format that parrot itself can read.\nNicholas Clark\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1312103678,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM0MzU=","github-url":"https://github.com/parrot/parrot/issues/512#issuecomment-3503435"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/2167#comment:2\" title=\"Comment 2 for Ticket #2167\"\u003enick@…\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e\u0026gt; I suspect that the problem is that they were written with Storable::store,\n\u0026gt; which is platform and configuration specific, and that when upgrading from\n\u0026gt; 5.10 to 5.12 Debian changed their perl configuration from 32 to 64 bit\n\u0026gt; integers.\n\u0026gt;\n\u0026gt; Storable itself is quite capable of reading files made all the way back to\n\u0026gt; 0.60-something, for the same configuration.\n\u0026gt;\n\u0026gt; Had parrot used Storable::nstore (the slower but portable format) there\n\u0026gt; would not have been this problem.\n\u003c/pre\u003e\u003cp\u003e\nI agree.  For this reason we use \u003ctt\u003eStorable::nstore()\u003c/tt\u003e in three other places in Parrot -- albeit all less mission-critical places in the configuration system:\n\u003c/p\u003e\n\u003cpre class=\"wiki\"\u003elib/Parrot/Configure/Trace.pm\nlib/Parrot/Configure.pm\nlib/Parrot/Test/Pod.pm\n\u003c/pre\u003e\u003cp\u003e\nI have created a \u003ci\u003ett2167/nstore\u003c/i\u003e branch in git which replaces \u003ctt\u003estore\u003c/tt\u003e with \u003ctt\u003enstore\u003c/tt\u003e in \u003ci\u003elib/Parrot/Pmc2c/PMC.pm\u003c/i\u003e and \u003ci\u003elib/Parrot/Pmc2c/VTable.pm\u003c/i\u003e.  Under an ordinary, non-optimized build on linux/i386, it passes \u003ctt\u003emake test\u003c/tt\u003e \u003ca   href=\"http://smolder.parrot.org/app/projects/report_details/19496\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003eSmolder 19496\u003c/a\u003e.  Although I agree that we should replace Storable as soon as possible, please give the branch a spin on the systems where we think we are having a problem.\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1312870945,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM0MzY=","github-url":"https://github.com/parrot/parrot/issues/512#issuecomment-3503436"},"message":"\u003cp\u003e\nI have merged the \u003ci\u003ett2167/nstore\u003c/i\u003e branch into master in c70c89c, so we're now using \u003ctt\u003enstore\u003c/tt\u003e instead of \u003ctt\u003estore\u003c/tt\u003e throughout.  This improves things but does not address the long-term problem.\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1338169682,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NTgxNDQ=","github-url":"https://github.com/parrot/parrot/issues/512#issuecomment-5958144"},"message":"The list of `.dump` files which get installed got lost in the Trac to Git transition.  It appears we currently install 95 `.dump` files.\n\n```\n$ find . -type f -name '*.dump'\n./src/parrot/4.4.0-devel/pmc/addrregistry.dump\n./src/parrot/4.4.0-devel/pmc/alarm.dump\n./src/parrot/4.4.0-devel/pmc/arrayiterator.dump\n./src/parrot/4.4.0-devel/pmc/bigint.dump\n./src/parrot/4.4.0-devel/pmc/bignum.dump\n./src/parrot/4.4.0-devel/pmc/boolean.dump\n./src/parrot/4.4.0-devel/pmc/bytebuffer.dump\n./src/parrot/4.4.0-devel/pmc/callback.dump\n./src/parrot/4.4.0-devel/pmc/callcontext.dump\n./src/parrot/4.4.0-devel/pmc/capture.dump\n./src/parrot/4.4.0-devel/pmc/class.dump\n./src/parrot/4.4.0-devel/pmc/complex.dump\n./src/parrot/4.4.0-devel/pmc/continuation.dump\n./src/parrot/4.4.0-devel/pmc/coroutine.dump\n./src/parrot/4.4.0-devel/pmc/default.dump\n./src/parrot/4.4.0-devel/pmc/env.dump\n./src/parrot/4.4.0-devel/pmc/eval.dump\n./src/parrot/4.4.0-devel/pmc/eventhandler.dump\n./src/parrot/4.4.0-devel/pmc/exception.dump\n./src/parrot/4.4.0-devel/pmc/exceptionhandler.dump\n./src/parrot/4.4.0-devel/pmc/exporter.dump\n./src/parrot/4.4.0-devel/pmc/filehandle.dump\n./src/parrot/4.4.0-devel/pmc/fixedbooleanarray.dump\n./src/parrot/4.4.0-devel/pmc/fixedfloatarray.dump\n./src/parrot/4.4.0-devel/pmc/fixedintegerarray.dump\n./src/parrot/4.4.0-devel/pmc/fixedpmcarray.dump\n./src/parrot/4.4.0-devel/pmc/fixedstringarray.dump\n./src/parrot/4.4.0-devel/pmc/float.dump\n./src/parrot/4.4.0-devel/pmc/handle.dump\n./src/parrot/4.4.0-devel/pmc/hash.dump\n./src/parrot/4.4.0-devel/pmc/hashiterator.dump\n./src/parrot/4.4.0-devel/pmc/hashiteratorkey.dump\n./src/parrot/4.4.0-devel/pmc/imageiofreeze.dump\n./src/parrot/4.4.0-devel/pmc/imageiosize.dump\n./src/parrot/4.4.0-devel/pmc/imageiostrings.dump\n./src/parrot/4.4.0-devel/pmc/imageiothaw.dump\n./src/parrot/4.4.0-devel/pmc/imccompiler.dump\n./src/parrot/4.4.0-devel/pmc/integer.dump\n./src/parrot/4.4.0-devel/pmc/iterator.dump\n./src/parrot/4.4.0-devel/pmc/key.dump\n./src/parrot/4.4.0-devel/pmc/lexinfo.dump\n./src/parrot/4.4.0-devel/pmc/nci.dump\n./src/parrot/4.4.0-devel/pmc/lexpad.dump\n./src/parrot/4.4.0-devel/pmc/managedstruct.dump\n./src/parrot/4.4.0-devel/pmc/mappedbytearray.dump\n./src/parrot/4.4.0-devel/pmc/multisub.dump\n./src/parrot/4.4.0-devel/pmc/namespace.dump\n./src/parrot/4.4.0-devel/pmc/nativepccmethod.dump\n./src/parrot/4.4.0-devel/pmc/null.dump\n./src/parrot/4.4.0-devel/pmc/object.dump\n./src/parrot/4.4.0-devel/pmc/opcode.dump\n./src/parrot/4.4.0-devel/pmc/oplib.dump\n./src/parrot/4.4.0-devel/pmc/orderedhash.dump\n./src/parrot/4.4.0-devel/pmc/orderedhashiterator.dump\n./src/parrot/4.4.0-devel/pmc/packfile.dump\n./src/parrot/4.4.0-devel/pmc/packfileannotation.dump\n./src/parrot/4.4.0-devel/pmc/packfileannotations.dump\n./src/parrot/4.4.0-devel/pmc/packfilebytecodesegment.dump\n./src/parrot/4.4.0-devel/pmc/packfileconstanttable.dump\n./src/parrot/4.4.0-devel/pmc/packfiledebug.dump\n./src/parrot/4.4.0-devel/pmc/packfiledirectory.dump\n./src/parrot/4.4.0-devel/pmc/packfileopmap.dump\n./src/parrot/4.4.0-devel/pmc/packfilerawsegment.dump\n./src/parrot/4.4.0-devel/pmc/packfilesegment.dump\n./src/parrot/4.4.0-devel/pmc/packfileview.dump\n./src/parrot/4.4.0-devel/pmc/parrotinterpreter.dump\n./src/parrot/4.4.0-devel/pmc/parrotlibrary.dump\n./src/parrot/4.4.0-devel/pmc/pmclist.dump\n./src/parrot/4.4.0-devel/pmc/pmcproxy.dump\n./src/parrot/4.4.0-devel/pmc/pointer.dump\n./src/parrot/4.4.0-devel/pmc/ptr.dump\n./src/parrot/4.4.0-devel/pmc/ptrbuf.dump\n./src/parrot/4.4.0-devel/pmc/ptrobj.dump\n./src/parrot/4.4.0-devel/pmc/resizablebooleanarray.dump\n./src/parrot/4.4.0-devel/pmc/resizablefloatarray.dump\n./src/parrot/4.4.0-devel/pmc/resizableintegerarray.dump\n./src/parrot/4.4.0-devel/pmc/resizablepmcarray.dump\n./src/parrot/4.4.0-devel/pmc/resizablestringarray.dump\n./src/parrot/4.4.0-devel/pmc/role.dump\n./src/parrot/4.4.0-devel/pmc/scalar.dump\n./src/parrot/4.4.0-devel/pmc/scheduler.dump\n./src/parrot/4.4.0-devel/pmc/schedulermessage.dump\n./src/parrot/4.4.0-devel/pmc/sockaddr.dump\n./src/parrot/4.4.0-devel/pmc/socket.dump\n./src/parrot/4.4.0-devel/pmc/string.dump\n./src/parrot/4.4.0-devel/pmc/stringbuilder.dump\n./src/parrot/4.4.0-devel/pmc/stringhandle.dump\n./src/parrot/4.4.0-devel/pmc/stringiterator.dump\n./src/parrot/4.4.0-devel/pmc/structview.dump\n./src/parrot/4.4.0-devel/pmc/sub.dump\n./src/parrot/4.4.0-devel/pmc/task.dump\n./src/parrot/4.4.0-devel/pmc/timer.dump\n./src/parrot/4.4.0-devel/pmc/undef.dump\n./src/parrot/4.4.0-devel/pmc/unmanagedstruct.dump\n./src/parrot/4.4.0-devel/vtable.dump\n```","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1338693490,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYwODI1NzY=","github-url":"https://github.com/parrot/parrot/issues/512#issuecomment-6082576"},"message":"See also http://article.gmane.org/gmane.comp.compilers.parrot.devel/6735","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1339208341,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMTY0NTg=","github-url":"https://github.com/parrot/parrot/issues/512#issuecomment-6216458"},"message":"From time to time I have attempted to explore the issues raised in this ticket.  To partialize the problem, tonight I asked, \"What would be the smallest set of processes we would need to execute to see whether a replacement for Storable in writing and reading .dump files could be considered feasible?\"\n\nWhen I run 'make' without '-j4', the build starts with the following sequence of shell processes:\n\n```\n/usr/local/bin/perl tools/build/h2inc.pl include/parrot/enums.h \\\n  lib/Parrot/Pmc2c/PCCMETHOD_BITS.pm\n/usr/local/bin/perl tools/build/vtable_h.pl\n/usr/local/bin/perl tools/build/pmc2c.pl --vtable \n/usr/local/bin/perl tools/build/pmc2c.pl --dump  src/pmc/default.pmc\n/usr/local/bin/perl tools/build/pmc2c.pl --dump  src/pmc/fixedintegerarray.pmc\n/usr/local/bin/perl tools/build/pmc2c.pl --c  src/pmc/fixedintegerarray.pmc\n```\n\nWe invoke pmc2c.pl four times in the above, utilizing its three most important switches at least once.  However, if we're interested in a sequence of processes in order to prove a concept, we're probably better off doing both a --dump and a --c on src/pmc/default.pmc:\n\n```\n/usr/local/bin/perl tools/build/h2inc.pl include/parrot/enums.h \\\n  lib/Parrot/Pmc2c/PCCMETHOD_BITS.pm\n/usr/local/bin/perl tools/build/vtable_h.pl\n/usr/local/bin/perl tools/build/pmc2c.pl --vtable\n/usr/local/bin/perl tools/build/pmc2c.pl --dump  src/pmc/default.pmc\n/usr/local/bin/perl tools/build/pmc2c.pl --c  src/pmc/default.pmc\n```\n\nThe five commands above, though they are not run in precisely this sequence by 'make', should serve as proof of concept of any revision of the pmc2c dumping process.  If we do run them from the command-line, we see that their net effect is to create these six files (above and beyond what Configure.pl has created):\n\n```\n$ find . -type f ! -path '*/.git*' | xargs ls -tr | tail -6\n./lib/Parrot/Pmc2c/PCCMETHOD_BITS.pm\n./include/parrot/vtable.h\n./vtable.dump\n./src/pmc/default.dump\n./src/pmc/default.c\n./include/pmc/pmc_default.h\n```\n\nThe third through fifth commands above illustrate three of pmc2c.pl's major modes of operation.  --vtable is used only once within make, but the --dump and --c modes are used many times.  Moreover, by callling pmc2c.pl --c src/pmc/default.pmc as the last of the five commands, we have used a mode which reads a dump file written by a previous command.  Hence, if we can discover a different way of writing and reading dumpfiles and succeed in producing the same src/pmc/default.c and include/pmc/pmc_default.h files as our current Storable-based processes do, then we should be able to use that different way throughout the build process.\n\nI have created a little Perl program to retrieve a .dump file written in Storable format and display it with Data::Dumper.  Here is the relevant part:\n\n``` perl\n  use Data::Dumper;$Data::Dumper::Indent=1;\n  use Storable;\n  # ...\n  {\n    no warnings 'once';\n    local $Storable::Eval = 1;\n  }\n  my $state = [];\n  $state = retrieve('/path/to/dumpfile');\n  print Dumper $state;\n```\n\nThe first .dump file we need to look at is vtable.dump.  I dump to a file called vtable.ret.\n\n  retstor.pl vtable.dump \u003e vtable.ret\n\nExamining vtable.ret, we see that vtable.dump is a ref to a hash blessed into the Parrot::Pmc2c::VTable class.  Its elements look like this:\n\n``` perl\n  'filename' =\u003e '/topdir/tools/build/../../src/vtable.tbl', \n      # string (path to vtable.tbl)\n  'names' =\u003e [ # ref to array of strings\n    'absolute',\n    'add',\n#...\n    'unshift_string',\n    'visit'\n  ],\n  'methods' =\u003e [ # ref to array of Parrot::Pmc2c::Method objects\n    bless( {\n      'attrs' =\u003e {},\n      'return_type' =\u003e 'PMC*',\n      'parent_name' =\u003e '',\n      'pmc_unused' =\u003e 0,\n      'name' =\u003e 'absolute',\n      'section' =\u003e 'MATH',\n      'parameters' =\u003e 'PMC* dest',\n      'body' =\u003e '',\n      'decorators' =\u003e [],\n      'type' =\u003e 'VTABLE_ENTRY'\n    }, 'Parrot::Pmc2c::Method' ),\n    bless( {\n      'attrs' =\u003e {},\n      'return_type' =\u003e 'PMC*',\n      'parent_name' =\u003e '',\n      'pmc_unused' =\u003e 0,\n      'name' =\u003e 'add',\n      'section' =\u003e 'MATH',\n      'parameters' =\u003e 'PMC* value, PMC* dest',\n      'body' =\u003e '',\n      'decorators' =\u003e [],\n      'type' =\u003e 'VTABLE_ENTRY'\n     }, 'Parrot::Pmc2c::Method' ),\n#...\n    bless( {\n      'attrs' =\u003e {},\n      'return_type' =\u003e 'void',\n      'parent_name' =\u003e '',\n      'pmc_unused' =\u003e 0,\n      'name' =\u003e 'visit',\n      'section' =\u003e 'MAIN',\n      'parameters' =\u003e 'PMC* info',\n      'body' =\u003e '',\n      'decorators' =\u003e [],\n      'type' =\u003e 'VTABLE_ENTRY'\n    }, 'Parrot::Pmc2c::Method' )\n  ],\n  'has_method' =\u003e { # ref to hash: TODO: figure out what each element's value means\n    'get_pmc_keyed_str' =\u003e 59,\n    'absolute' =\u003e 0,\n#...\n    'set_pointer_keyed_str' =\u003e 151,\n    'get_integer' =\u003e 46\n  }\n}, 'Parrot::Pmc2c::VTable' );\n```\n\nStorable::retrieve() gives us back a Perl object, which has objects inside it.  Any other dump mechanism (e.g., JSON) would have to be able to first store (nstore) and then retrieve a complex Perl object.  Can JSON do that?","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1339246264,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyMTk1MTg=","github-url":"https://github.com/parrot/parrot/issues/512#issuecomment-6219518"},"message":"The JSON documentation (https://metacpan.org/module/JSON::XS) suggests this will be quite difficult:\n\n\"Blessed objects are not directly representable in JSON. See the allow_blessed and convert_blessed methods on various options on how to deal with this: basically, you can choose between throwing an exception, encoding the reference as if it weren't blessed, or provide your own serialiser method.\"","files":null}]}