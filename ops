{"version":1,"ops":[{"type":1,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1356362305,"metadata":{"github-id":"MDU6SXNzdWU5NTAyMzg0","github-url":"https://github.com/parrot/parrot/issues/898","origin":"github"},"title":"Fix HTTP;Daemon","message":"HTTP;Daemon is just an objectified version of `examples/io/httpd.pir.` \nBut the official library was never upgraded, the example works fine.\n\nsocket ops moved to dynops, io_thr_msg.pasm gone, use .PIO_ macros, \nchanged string ops, ...\n\nFix the code, add target to Makefile, add test.\nUse branch `http-daemon-gh898`\n\nSomething like:\n\n```\ndiff --git a/runtime/parrot/library/HTTP/Daemon.pir b/runtime/parrot/library/HTTP/Daemon.pir\nindex 38e91a5..3ad3615 100644\n--- a/runtime/parrot/library/HTTP/Daemon.pir\n+++ b/runtime/parrot/library/HTTP/Daemon.pir\n@@ -84,7 +84,11 @@ at the pio.\n .const string CRCR     = \"\\r\\r\"\n\n .include \"stat.pasm\"\n-.include 'io_thr_msg.pasm'\n+.include 'except_types.pasm'\n+.include 'socket.pasm'\n+\n+.loadlib 'io_ops'\n+.loadlib 'sys_ops'\n\n =back\n\n@@ -133,30 +137,31 @@ Redirect to and serve files from F\u003cdocs/html\u003e.\n     $P0 = '.'\n     setattribute self, 'doc_root', $P0\n\n-    # create socket\n-    .local pmc sock\n-    sock = socket 2, 1, 6  # PF_INET, SOCK_STREAM, tcp\n-    unless sock goto err_sock\n-    setattribute self, 'socket', sock\n+    # create listener socket\n+    .local pmc listener\n+    listener = new 'Socket'\n+    listener.'socket'(.PIO_PF_INET, .PIO_SOCK_STREAM, .PIO_PROTO_TCP)\n+    unless listener goto err_sock\n+    setattribute self, 'socket', listener\n\n     .local int port\n-    .local string adr\n+    .local string host\n+    host = args['LocalAddr']\n     port = args['LocalPort']\n-    adr = args['LocalAddr']\n\n     # bind\n     .local string i_addr\n     .local int res\n-    i_addr = sockaddr port, adr\n-    res = bind sock, i_addr\n+    i_addr = listener.'sockaddr'(host, port)\n+    res = listener.'bind'(i_addr)\n     if res == -1 goto err_bind\n\n     # listen\n-    res = listen sock, 1\n+    res = listener.'listen'(1)\n     if res == -1 goto err_listen\n\n     # add connection\n-    self.'new_conn'(sock)\n+    self.'new_conn'(listener)\n     .return()\n\n err_listen:\n@@ -165,7 +170,7 @@ err_bind:\n     err $S0, $I0\n     printerr $S0\n     printerr \"\\n\"\n-    close sock\n+    listener.'close'()\n err_sock:\n     $P0 = new 'Undef'\n     setattribute self, 'socket', $P0\n@@ -298,7 +303,7 @@ Concat passed arguments and schedule the string for logging.\n     n += 3\n     now = time\n     $S0 = gmtime now\n-    chopn $S0, 1   # XXX why 1? asctime is \\n terminated\n+    $S0 = chopn $S0, 1 # XXX why 1? asctime is \\n terminated\n     unshift args, \", \"\n     unshift args, $S0\n     push args, \"\\n\"\n@@ -340,7 +345,7 @@ add_lp:\n =item _del_stale_conns()\n\n Not yet used method to delete old connections for the active set.\n-Called from server runnloop.\n+Called from server runloop.\n\n =cut\n\n@@ -387,7 +392,7 @@ Return true, if the given connection is already active.\n\n =cut\n\n-# add coket to active connections\n+# add socket to active connections\n .sub 'new_conn' :method\n     .param pmc sock\n     .local pmc active, conn\n@@ -402,7 +407,7 @@ Return true, if the given connection is already active.\n .sub 'accept_conn' :method\n     .local pmc orig, work\n     orig   = getattribute self, 'socket'\n-    accept work, orig\n+    work.'accept'(orig)\n     self.'new_conn'(work)\n .end\n\n@@ -413,7 +418,7 @@ Return true, if the given connection is already active.\n     .local pmc active, orig, sock\n     .local int i, n\n     sock = getattribute work, 'socket'\n-    close sock\n+    sock.'close'()\n     active = getattribute self, 'active'\n loop:\n     n = elements active\n@@ -605,13 +610,13 @@ Internal method to read from the client. It returns a request string.\n     # check method, read Content-Length if needed and read\n     # until message is complete\n MORE:\n-    res = recv sock, buf\n+    res = sock.'recv'(buf)\n     srv.'debug'(\"**read \", res, \" bytes\\n\")\n     if res \u003e 0 goto not_empty\n     do_close = 1\n     if res \u003c= 0 goto done\n not_empty:\n-    concat req, buf\n+    req = concat req, buf\n     index pos, req, CRLFCRLF\n     if pos \u003e= 0 goto have_hdr\n     index pos, req, LFLF\n@@ -649,7 +654,7 @@ CGI invocation.\n     .local pmc sock\n     sock = self.'socket'()\n     rep = resp.'as_string'()\n-    $I0 = send sock, rep   # XXX don't ignore\n+    $I0 = sock.'send'(rep) # XXX don't ignore\n .end\n\n .sub 'send_file_response' :method\n@@ -811,7 +816,7 @@ START:\n     inc pos_in\n\n INC_IN:\n-    concat out, char_out\n+    out = concat out, char_out\n     inc pos_in\n     goto START\n END:\n```","files":null}]}