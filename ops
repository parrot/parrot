{"version":1,"ops":[{"type":3,"author":{"id":"c16eb74d82b49d6895509951834e12a05587f8f1"},"timestamp":1284448203,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI0OTc=","github-url":"https://github.com/parrot/parrot/issues/253#issuecomment-3502497"},"message":"\u003cp\u003e\nWe agreed that the new Boolean PMC did not require deprecation, but perhaps we were wrong. Let me investigate.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1284457231,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI0OTg=","github-url":"https://github.com/parrot/parrot/issues/253#issuecomment-3502498"},"message":"\u003cp\u003e\nMultidispatch is a bit of a red herring; this test is showing that Boolean no longer ISA Integer after this patch.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1284465190,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI0OTk=","github-url":"https://github.com/parrot/parrot/issues/253#issuecomment-3502499"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1790#comment:3\" title=\"Comment 3 for Ticket #1790\"\u003ecoke\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n Multidispatch is a bit of a red herring; this test is showing that Boolean no longer ISA Integer after this patch.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nFor clarification: The ticket is primarily noting that a core behavior changed since 2.6.0 w/o a deprecation notice, and that :multi dispatch is where it manifests in Rakudo.\n\u003c/p\u003e\n\n\u003cp\u003e\nAs far as Rakudo is concerned we can certainly accommodate the change in Boolean's parentage; but there probably needs to be a documented process for dealing with changes that fall afoul of the deprecation policy.  In that case, this ticket is a placeholder for making sure this particular change gets documented somewhere appropriate.\n\u003c/p\u003e\n\n\u003cp\u003e\nPm\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1284480195,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI1MDA=","github-url":"https://github.com/parrot/parrot/issues/253#issuecomment-3502500"},"message":"1379 byte attachment from notfound\nat http://trac.parrot.org/parrot/raw-attachment/ticket/1790/temporary_boolean_isa_integer.patch\n\n# ```Index: src/pmc/boolean.pmc\n\n--- src/pmc/boolean.pmc (revision 48997)\n+++ src/pmc/boolean.pmc (working copy)\n@@ -184,6 +184,29 @@\n         SELF.set_bool(VTABLE_shift_integer(INTERP, info));\n     }\n\n+/*\n+\n+=item C\u003cINTVAL isa(STRING *name)\u003e\n+\n+Temporary solution for backward compatibility until deprecation cycle.\n+\n+See TT #1790\n+\n+=cut\n+\n+*/\n+\n-    VTABLE INTVAL isa(STRING *some)\n-    {\n-        if (Parrot_str_equal(INTERP, some, CONST_STRING(INTERP, \"Boolean\")))\n-            return 1;\n-        if (Parrot_str_equal(INTERP, some, CONST_STRING(INTERP, \"scalar\")))\n-            return 1;\n-        if (Parrot_str_equal(INTERP, some, CONST_STRING(INTERP, \"Integer\")))\n-            return 1;\n-        return 0;\n-    }\n  +\n  }\n  \n  /*\n  \n  # Index: t/pmc/boolean.t\n  \n  --- t/pmc/boolean.t (revision 48997)\n  +++ t/pmc/boolean.t (working copy)\n  @@ -19,7 +19,7 @@\n  \n  .sub main :main\n     .include 'test_more.pir'\n-    plan(31)\n-    plan(32)\n   init_null_tests()\n   init_int_tests()\n   instantiate_tests()\n  @@ -207,6 +207,10 @@\n   .local int b\n  \n   p = new ['Boolean']\n  +\n-    isa b, p, \"Integer\"\n-    is(b, 1, \"Boolean isa Integer - going to be deprecated - TT #1790\")\n  +\n   does b, p, \"scalar\"\n   is(b, 1, \"Boolean does scalar\")\n   does b, p, \"boolean\"\n\n```\n```","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1284496642,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI1MDE=","github-url":"https://github.com/parrot/parrot/issues/253#issuecomment-3502501"},"message":"\u003cp\u003e\nThere's no real reason why we can't have the best of both worlds, at least for a full deprecation period. We can still have boolean ISA Integer, but use the new mechanism internally for data storage to save us on performance cost. At the very least we do need to support the old API behavior to avoid breakages in Rakudo and other end-users, but if we can fake that API while keeping the shiney new internals, more power to us.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1284498195,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI1MDI=","github-url":"https://github.com/parrot/parrot/issues/253#issuecomment-3502502"},"message":"\u003cp\u003e\nPatch with a hackish temporary fix\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1284498248,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI1MDM=","github-url":"https://github.com/parrot/parrot/issues/253#issuecomment-3502503"},"message":"\u003cp\u003e\nSomething like this hackish patch?\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"c16eb74d82b49d6895509951834e12a05587f8f1"},"timestamp":1284499370,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI1MDQ=","github-url":"https://github.com/parrot/parrot/issues/253#issuecomment-3502504"},"message":"\u003cp\u003e\nBut if it doesn't actually inherit from Integer, have we solved the problem?\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1284504803,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI1MDU=","github-url":"https://github.com/parrot/parrot/issues/253#issuecomment-3502505"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1790#comment:7\" title=\"Comment 7 for Ticket #1790\"\u003ePaul C. Anagnostopoulos\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n But if it doesn't actually inherit from Integer, have we solved the problem?\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nThe boolean doesn't need to actually inherit from Integer, it just needs to have the same user-facing behavior as it had before. I think (without testing) that NotFound's patch should fool the MMD system into treating Boolean the same way as it was before. Can we get some kind of verification that this does work as intended?\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"c16eb74d82b49d6895509951834e12a05587f8f1"},"timestamp":1284506194,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI1MDY=","github-url":"https://github.com/parrot/parrot/issues/253#issuecomment-3502506"},"message":"\u003cp\u003e\nSorry, still pondering this. If someone uses an operation on a Boolean that is supported by Integer but not by Boolean (e.g., add), then we won't fix the problem if Boolean doesn't inherit from Integer.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1284506390,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI1MDc=","github-url":"https://github.com/parrot/parrot/issues/253#issuecomment-3502507"},"message":"\u003cp\u003e\nSo in that case, create an add vtable in Boolean with a temporary implementation, and make sure it is listed as deprecated so we can rip it back out again when the time comes.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"c16eb74d82b49d6895509951834e12a05587f8f1"},"timestamp":1284507360,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI1MDg=","github-url":"https://github.com/parrot/parrot/issues/253#issuecomment-3502508"},"message":"\u003cp\u003e\nBut how can we know what people are relying on?\n\u003c/p\u003e","files":null}]}