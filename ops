{"version":1,"ops":[{"type":1,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1347833949,"metadata":{"github-id":"MDU6SXNzdWU2OTA3MDA5","github-url":"https://github.com/parrot/parrot/issues/831","origin":"github"},"title":"Potential security issue with loading renamed dynpmc","message":"As tested in the dynpmc/os move it is possible to loadlib a wrong class.\n\nScenario: dynpmc OSdummy renamed to os.so, loadlib 'os'  works okay, loads OSdummy and is still using the old os class.\n\nIt might be considered a small security issue, since OSdummy is initialized. There could we be some hidden code.\n\nWhen you override a dynpmc with an already loaded one with the same name, the new pmc replaces the old one. So any call to a method uses the new pmc. This is good for monkey patching a static core pmc. When a method is missing it will fail and not search for it in the old one. So it must be a complete replacement.\n\nI consider it a worthwhile feature to be able to monkeypatch static pmc's, as it must provide the full vtable API.\nThe potential risc of silently  loading a wrong pmc is the same as with all dynpmcs. \n\nOne could add a name check in loadlib, if the loaded name is the same as the filename.\nBut this would prevent us from using the simple deprecation method used in dynpmc/os when moving dynpmc's to core. We could keep a dummy dynpmc from some time, just that loadlib 'os' calls will not fail.","files":null}]}