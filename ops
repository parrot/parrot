{"version":1,"ops":[{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1233911865,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4MTY=","github-url":"https://github.com/parrot/parrot/issues/345#issuecomment-3502816"},"message":"7617 byte attachment from rurban\nat http://trac.parrot.org/parrot/raw-attachment/ticket/277/tt277-test_exec.patch\n\n# ```Index: parrot-svn/config/gen/makefiles/root.in\n\n--- parrot-svn.orig/config/gen/makefiles/root.in\n+++ parrot-svn/config/gen/makefiles/root.in\n@@ -2181,7 +2181,8 @@ win32-inno-installer : world installable\n #\n ###############################################################################\n\n-exec : $(SRC_DIR)/exec_start$(O) $(SRC_DIR)/parrot_config$(O) $(LIBPARROT)\n+# usage: make exec EXEC=examples/c/test_main\n+exec : $(SRC_DIR)/exec_start$(O) $(EXEC)$(O) $(SRC_DIR)/parrot_config$(O) $(LIBPARROT)\n    $(LINK) @ld_out@$(EXEC)$(EXE) $(EXEC)$(O) $(SRC_DIR)/exec_start$(O) $(SRC_DIR)/parrot_config$(O) @rpath_blib@ $(ALL_PARROT_LIBS) $(LINKFLAGS)\n\n ###### OS depend targets ##########\n\n# Index: parrot-svn/examples/c/test_main.c\n\n--- parrot-svn.orig/examples/c/test_main.c\n+++ parrot-svn/examples/c/test_main.c\n@@ -19,14 +19,18 @@ still clean, Parrot embedding.\n\n */\n\n-#include \"parrot/embed.h\"\n-#include \"parrot/longopt.h\"\n #include \u003cstdio.h\u003e\n #include \u003cstdlib.h\u003e\n #include \u003cstring.h\u003e\n\n-#define setopt(flag) Parrot_setflag(interp, (flag), (*argv)[0]+2);\n-#define unsetopt(flag) Parrot_setflag(interp, (flag), 0)\n+#include \"parrot/embed.h\"\n+#include \"parrot/longopt.h\"\n+\n+#define SET_FLAG(flag)   Parrot_set_flag(interp, (flag))\n+#define SET_DEBUG(flag)  Parrot_set_debug(interp, (flag))\n+#define SET_TRACE(flag)  Parrot_set_trace(interp, (flag))\n+#define SET_CORE(core)   interp-\u003erun_core |= (core)\n+#define UNSET_FLAG(flag) Parrot_clear_flag(interp, (flag))\n\n static char _parseflags(PARROT_INTERP, int *argc, char *_argv[]);\n\n@@ -38,9 +42,9 @@ static struct longopt_opt_decl options[]\n     { 'd', 'd', 0,       { \"--debug\" } },\n     { 'h', 'h', 0,       { \"--help\" } },\n     { 'j', 'j', 0,       { \"--jit\" } },\n-    { 'o', 'o', 0,       { \"--output-file\" } },\n-    { 'o', 'o', 0,       { \"--output\" } },\n   { 'p', 'p', 0,       { \"--profile\" } },\n-    { 'P', 'P', 0, { \"--prederefrenced-core\" } },\n-    { 'P', 'P', 0, { \"--predereferenced-core\" } },\n   { 'S', 'S', 0,       { \"--switched-core\" } },\n   { 'g', 'g', 0,       { \"--no-computed-goto\" } },\n   { 't', 't', 0,       { \"--trace\" } },\n  @@ -51,9 +55,9 @@ static struct longopt_opt_decl options[]\n   {'\\0',   0, 0,       { NULL } }\n  };\n\n-static void usage(void);\n+static void usage(PARROT_INTERP);\n\n-static void version(void);\n+static void version(PARROT_INTERP);\n\n /*\n\n@@ -80,13 +84,13 @@ main(int argc, char *argv[])\n\n```\n filename = parseflags(interp, \u0026argc, \u0026argv);\n```\n-    pf = Parrot_readbc(interp, filename);\n-    pf = Parrot_pbc_read(interp, filename, 0);\n  \n   if (!pf) {\n       return 1;\n   }\n-    Parrot_loadbc(interp, pf);\n-    Parrot_pbc_load(interp, pf);\n   Parrot_runcode(interp, argc, argv);\n   Parrot_destroy(interp);\n\n@@ -111,7 +115,7 @@ parseflags(PARROT_INTERP, int *argc, cha\n     struct longopt_opt_info opt = LONGOPT_OPT_INFO_INIT;\n\n```\n if (*argc == 1) {\n```\n-        usage();\n- ```\n     usage(interp);\n  ```\n  \n   }\n  \n   ++*argv;\n  @@ -120,48 +124,56 @@ parseflags(PARROT_INTERP, int *argc, cha\n  \n  #ifdef HAVE_COMPUTED_GOTO\n-    setopt(PARROT_CGOTO_FLAG);\n-    SET_CORE(PARROT_CGOTO_CORE);\n  #endif\n-    while (longopt_get(interp, *argc, *argv, options, \u0026opt)) {\n-    while (longopt_get(interp, _argc, (const char *_)*argv, options, \u0026opt)) {\n       if (opt.opt_id == -1) {\n-            fprintf(stderr, \"parrot: %s\\n\", opt.opt_error);\n- ```\n         fprintf(stderr, \"main: %s\\n\", opt.opt_error);\n       Parrot_exit(interp, 1);\n   }\n  \n   switch (opt.opt_id) {\n   case 'b':\n  ```\n-            setopt(PARROT_BOUNDS_FLAG);\n-            SET_FLAG(PARROT_BOUNDS_FLAG);\n           break;\n       case 'j':\n-            setopt(PARROT_JIT_FLAG);\n-            SET_CORE(PARROT_JIT_CORE);\n           break;\n       case 'o':\n-            setopt(PARROT_EXEC_FLAG);\n-            interp-\u003eoutput_file = opt.opt_arg;\n           break;\n       case 'p':\n-            setopt(PARROT_PROFILE_FLAG);\n-            SET_FLAG(PARROT_PROFILE_FLAG);\n           break;\n       case 'P':\n-            setopt(PARROT_PREDEREF_FLAG);\n-            SET_CORE(PARROT_SWITCH_CORE);\n-            /_SET_FLAG(PARROT_PREDEREF_FLAG);_/\n           break;\n       case 'S':\n-            setopt(PARROT_SWITCH_FLAG);\n-            SET_CORE(PARROT_SWITCH_CORE);\n           break;\n       case 'g':\n-            unsetopt(PARROT_CGOTO_FLAG);\n-            SET_CORE(PARROT_CGOTO_CORE);\n           break;\n       case 't':\n-            setopt(PARROT_TRACE_FLAG);\n-            SET_TRACE(1);\n-            SET_CORE(PARROT_SWITCH_CORE);\n  +#ifdef HAVE_COMPUTED_GOTO\n-            SET_CORE(PARROT_CGP_CORE);\n  +#endif\n  +#ifdef JIT_CAPABLE\n-            SET_CORE(PARROT_JIT_CORE);\n  +#endif\n           break;\n       case 'd':\n-            setopt(PARROT_DEBUG_FLAG);\n-            SET_DEBUG(1);\n           break;\n       case 'h':\n-            usage();\n-            usage(interp);\n           break;\n       case 'v':\n-            version();\n-            version(interp);\n           break;\n       case 'w':\n           Parrot_setwarnings(interp, PARROT_WARNINGS_ALL_FLAG);\n  @@ -172,16 +184,20 @@ parseflags(PARROT_INTERP, int *argc, cha\n           fgetc(stdin);\n           break;\n       case OPT_GC_DEBUG:\n  -#if DISABLE_GC_DEBUG\n  +#ifdef DISABLE_GC_DEBUG\n           Parrot_warn(interp, PARROT_WARNINGS_ALL_FLAG,\n                       \"PARROT_GC_DEBUG is set but the binary was \"\n                       \"compiled with DISABLE_GC_DEBUG.\");\n  #endif\n-            setopt(PARROT_GC_DEBUG_FLAG);\n-            SET_FLAG(PARROT_GC_DEBUG_FLAG);\n           break;\n       case OPT_DESTROY_FLAG:\n-            setopt(PARROT_DESTROY_FLAG);\n-            SET_FLAG(PARROT_DESTROY_FLAG);\n           break;\n-        default:\n-            fprintf(stderr,\n-                \"main: Invalid flag '%s' used.\\n\",\n-                (_argv)[0]);\n       }\n   }\n   *argv += opt.opt_index;\n  @@ -190,7 +206,7 @@ parseflags(PARROT_INTERP, int *argc, cha\n   if ((_argv)[0])\n       return (*argv)[0];\n   else {\n-        usage();\n- ```\n     usage(interp);\n   return 0;   /* This won't happen */\n  ```\n  \n   }\n  }\n  @@ -198,7 +214,7 @@ parseflags(PARROT_INTERP, int _argc, cha\n  /_\n  \n  =item C\u003cstatic void\n  -usage(void)\u003e\n  +usage(PARROT_INTERP)\u003e\n  \n  Returns the user help.\n\n@@ -207,7 +223,7 @@ Returns the user help.\n */\n\n static void\n-usage(void)\n+usage(PARROT_INTERP)\n {\n #ifdef HAVE_COMPUTED_GOTO\n     const char\\* cgoto_info = \"Deactivate computed goto\";\n@@ -230,19 +246,19 @@ usage(void)\n   -v  --version                 Display version information\\n\\\n   -.  --wait                    Wait for a keypress (gives Windows users\\n\\\n                                     time to attach a debugger)\\n\\\n-  -o  --output=FILE             Output to file\\n\\\n     --gc-debug\\n\\\n       Enable garbage collection debugging mode. This may also be enabled\\n\\\n       by setting the environment variable $PARROT_GC_DEBUG to 1.\\n\\\n  \\n\",\n  \n  ##            cgoto_info);\n  \n   Parrot_exit(interp, 0);\n  }\n  \n  /*\n  \n  =item C\u003cstatic void\n  -version(void)\u003e\n  +version(PARROT_INTERP)\u003e\n  \n  Returns the version information.\n\n@@ -251,12 +267,12 @@ Returns the version information.\n */\n\n static void\n-version(void)\n+version(PARROT_INTERP)\n {\n     fprintf(stderr,\n             \"This is parrot version \" PARROT_VERSION \" built for \"\n             PARROT_ARCHNAME \"\\n\\\n-Copyright (C) 2001-2003, The Perl Foundation.\\n\\\n+Copyright (C) 2001-2009, The Perl Foundation.\\n\\\n \\n\\\n Parrot may be copied only under the terms of either the Artistic License or the\\\n \\n\\\n\n```\n```","files":null}]}