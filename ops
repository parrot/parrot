{"version":1,"ops":[{"type":1,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1336611949,"metadata":{"github-id":"MDU6SXNzdWU0NTA0OTEw","github-url":"https://github.com/parrot/parrot/issues/769","origin":"github"},"title":"'make headerizer' fails to remove code from .h files when underlying functions have been deleted from .c files","message":"In commit fc5314165fd9e on Tue May 08, whiteknight, among other changes, removed function Parrot_free_cstring from src/extend.c.   Today, when I was running 'make nocritic_codetest', I noticed I was getting this failure in t/codingstd/c_args_assert.t:\n\n``` perl\nprove t/codingstd/c_arg_assert.t \nt/codingstd/c_arg_assert.t .. # finding macro definitions and invocations\nt/codingstd/c_arg_assert.t .. 1/2 \n#   Failed test 'no unused assert macros'\n#   at t/codingstd/c_arg_assert.t line 67.\n# unused assert macros found:\n# /home/jimk/gitwork/parrot/include/parrot/extend.h: Parrot_free_cstring\n#1 unused assert macros found in total.\n# Looks like you failed 1 test of 2.\nt/codingstd/c_arg_assert.t .. Dubious, test returned 1 (wstat 256, 0x100)\nFailed 1/2 subtests\n```\n\nMost of the time, this kind of failure is easily cured by wrapping the name of a function with ASSERT_ARGS() just after the function declaration.  I went looking in include/parrot/extend.h and found this:\n\n``` c\n/* HEADERIZER BEGIN: src/extend.c */\n/* Don't modify between HEADERIZER BEGIN / HEADERIZER END.  Your changes will be lost. */\n/* ... */\nPARROT_EXPORT\nvoid Parrot_free_cstring(ARGFREE(char *string));\n/* ... */\n#define ASSERT_ARGS_Parrot_free_cstring __attribute__unused__ int _ASSERT_ARGS_CHECK = (0)\n#define ASSERT_ARGS_Parrot_PMC_typenum __attribute__unused__ int _ASSERT_ARGS_CHECK = (\\\n       PARROT_ASSERT_ARG(interp))\n/* Don't modify between HEADERIZER BEGIN / HEADERIZER END.  Your changes will be lost. */\n/* HEADERIZER END: src/extend.c */\n```\n\nThis was puzzling, because normally when you make a change in a source code file -- src/extend.c in this case -- and then run 'make headerizer', you expect the change to be reflected in the HEADERIZER section of the corresponding header file.  So I ran 'make headerizer' once again.  Nothing changed!  So I did precisely what we are told not to do:  I modified code between HEADERIZER_BEGIN and HEADERIZER_END.  See e3383c79050c in master.\n\nBut I'm still puzzled as to why 'make headerizer' failed to do the right thing.  So I opened the 'jkeenan/headerizer_problem' branch in the repository to study this problem.  This branch represents the state of the repo just before I deleted the headerized code in e3383c79050c.","files":null}]}