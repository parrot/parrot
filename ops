{"version":1,"ops":[{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1344971728,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDc3MzY4Njg=","github-url":"https://github.com/parrot/parrot/issues/811#issuecomment-7736868"},"message":"Fixed with df17e9a218\n\nTODO this failing test on swap mounts. This is not what we are testing here.","files":null},{"type":4,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1344971728,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MjI2ODEwMjc="},"status":2},{"type":4,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1346779801,"metadata":{"github-id":"MDEzOlJlb3BlbmVkRXZlbnQyMzkzNjc3Nw=="},"status":1},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1346779904,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDgyNzE2NzU=","github-url":"https://github.com/parrot/parrot/issues/811#issuecomment-8271675"},"message":"Nicholas Clark analyzed the error:\nFrom the output of strace and equivalent I'd deduced that the bug is a\nfailure to sign extend -10 from a 32 bit value to a 64 bit value. I thought\nI'd already said this.\n\nAlthough the inconsistency between C++ and C building the same source code\nis curious. I've no idea if this is because Parrot (or Perl's) Configure\npicks up different types for the two languages even on the same system, or\nif it's because of different library headers between the two, or some\nsubtly of difference in the type system between the two (Perl 5 had odd\nbugs due to using a real C++ bool for C++, and emulating it with a char for\nC), or something else.\n\nBut look for a conversion from a 32 bit signed type to a 32 bit unsigned\ntype, that is then passed to a seek library call that actually expects a\n64 bit signed type.\n\nadougherty came up with a patch:\n\n```\ndiff --git a/src/io/utilities.c b/src/io/utilities.c\nindex 08ed390..0acd4e9 100644\n--- a/src/io/utilities.c\n+++ b/src/io/utilities.c\n@@ -551,7 +551,10 @@ io_sync_buffers_for_write(PARROT_INTERP, ARGMOD(PMC *handle),\n     if (read_buffer \u0026\u0026 !BUFFER_IS_EMPTY(read_buffer)) {\n         const size_t buffer_size = BUFFER_USED_SIZE(read_buffer);\n         Parrot_io_buffer_clear(interp, read_buffer);\n-        vtable-\u003eseek(interp, handle, -buffer_size, SEEK_CUR);\n+       /* To avoid sign extension problems on 32-bit systems with 64-bit\n+           file support, first cast the buffer_size to off_t, then change\n+           the sign. */\n+        vtable-\u003eseek(interp, handle, -((PIOOFF_T)buffer_size), SEEK_CUR);\n     }\n }\n```","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1346781047,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDgyNzIzMDU=","github-url":"https://github.com/parrot/parrot/issues/811#issuecomment-8272305"},"message":"Andy Dougherty's patch fixed it. Applied as 0cc54e6972ae830e7943a15c8db1e14fc9c3cb90\nThanks!","files":null},{"type":4,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1346781047,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MjM5Mzg4Mjc="},"status":2}]}