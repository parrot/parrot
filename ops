{"version":1,"ops":[{"type":3,"author":{"id":"090edab1282a45bd2d4c0e11ceffc2d7454f9e77"},"timestamp":1251518012,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM0NDU=","github-url":"https://github.com/parrot/parrot/issues/517#issuecomment-3503445"},"message":"\u003cp\u003e\na StringHandle PMC could do the job.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"dba15f1da9404f6180e11ce4f17da9bbf3aa9d07"},"timestamp":1251529664,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM0NDY=","github-url":"https://github.com/parrot/parrot/issues/517#issuecomment-3503446"},"message":"\u003cp\u003e\nWhat about implementing something like the \u003cstrong\u003eO_TEMPORARY\u003c/strong\u003e flag with parrot's \u003cstrong\u003eopen\u003c/strong\u003e op? (a file opened with the O_TEMPORARY flag is created with a unique name, and will be deleted by the OS when close() is called on the last open file descriptor for the tempfile)\n\u003c/p\u003e\n\n\u003cp\u003e\nOn Linux, this could be done with the mkstemp() function from libc. The PIR syntax could be something like \u003cstrong\u003eopen \"template\", 't' \u003c/strong\u003e (see 'man 3 mkstemp' for what I mean by \"template\")\n\u003c/p\u003e\n\n\u003cp\u003e\nI think something similar could be implemented for Windows using the GetTempFileName, GetTempFilePath, and CreateFile functions.\n\u003c/p\u003e\n\n\u003cp\u003e\nAny reasons why this would not be a good way to go about it?\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1251536951,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM0NDc=","github-url":"https://github.com/parrot/parrot/issues/517#issuecomment-3503447"},"message":"\u003cp\u003e\njrtayloriv++ . Not having to worry about cleaning up temp files and where they go really simplifies test writing.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1251537016,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM0NDg=","github-url":"https://github.com/parrot/parrot/issues/517#issuecomment-3503448"},"message":"\u003cp\u003e\nShould this be implemented as a dynop?\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1291641684,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM0NDk=","github-url":"https://github.com/parrot/parrot/issues/517#issuecomment-3503449"},"message":"\u003cp\u003e\nA dynop would be fine.  Implementing it somehow would be great.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1310092190,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM0NTA=","github-url":"https://github.com/parrot/parrot/issues/517#issuecomment-3503450"},"message":"\u003cp\u003e\nI think we can either add an O_TEMPORARY flag to IO API, or we can add functionality to the OS PMC. I'm going to take a look at some options for this, because I have use for this kind of feature in Rosella, among other places.\n\u003c/p\u003e","files":null}]}