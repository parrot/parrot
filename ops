{"version":1,"ops":[{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1319412545,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI0OTg1MzA=","github-url":"https://github.com/parrot/parrot/issues/182#issuecomment-2498530"},"message":"I'm not able to reproduce this segfault on master on x86_64/Ubuntu 11.10 with either an optimized or an unoptimized build.  can you specify your platform?","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1319416818,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI0OTg3OTk=","github-url":"https://github.com/parrot/parrot/issues/182#issuecomment-2498799"},"message":"Which sha1/version and platform did this happen on? Can we get a backtrace?","files":null},{"type":3,"author":{"id":"bca615f854f7ca1044265d74ef4974a08d695fb1"},"timestamp":1319450891,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI1MDE3NTg=","github-url":"https://github.com/parrot/parrot/issues/182#issuecomment-2501758"},"message":"Happens with RELEASE_3_9_0. I've built with MSVC++ compiler, on Windows, 64-bit.\n\nAlso, try increasing the number of iterations. 5000 is not enough to trigger it on my box, for example.","files":null},{"type":3,"author":{"id":"76484e451c8adcf68d1a41e60ab7fdf43d921282"},"timestamp":1319457680,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI1MDI1NzQ=","github-url":"https://github.com/parrot/parrot/issues/182#issuecomment-2502574"},"message":"Note that I also wasn't able to reproduce this segfault in pure PIR, but I could when doing the same in Rakudo. See https://rt.perl.org/rt3//Public/Bug/Display.html?id=101912 for the sample code. (64bit linux on RELEASE_3_9_0)","files":null},{"type":3,"author":{"id":"bca615f854f7ca1044265d74ef4974a08d695fb1"},"timestamp":1319458208,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI1MDI2Mjg=","github-url":"https://github.com/parrot/parrot/issues/182#issuecomment-2502628"},"message":"Yes - I guess the extra bits of memory/GC activity in the Rakudo version bring out the issue. Note that it explodes in a different place in the Rakudo one than where I had this PIR version doing so.","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1319459665,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI1MDI4MjU=","github-url":"https://github.com/parrot/parrot/issues/182#issuecomment-2502825"},"message":"Can you reproduce the issue if you use something like a StringBuilder PMC instead of doing the raw string concats directly? Also, can you make the issue appear if you don't use the ByteBuffer PMC to setup the substrings?\n\nI'm trying to narrow down possible causes. I'll try to look at this one today.","files":null},{"type":3,"author":{"id":"bca615f854f7ca1044265d74ef4974a08d695fb1"},"timestamp":1319460029,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI1MDI4ODk=","github-url":"https://github.com/parrot/parrot/issues/182#issuecomment-2502889"},"message":"Having another look, I think that at least the segfault is specific to ByteBuffer. It keeps track of the strstart pointer, however it appears that this may actually change over the lifetime of the string. That seems to be what move_one_buffer in string_gc.c is doing. The segfaults all look like memory corruption of some sort, and trying to access a buffer that got moved would probably cause that.","files":null},{"type":3,"author":{"id":"6cd56829934a8cdbe23b0a30bcc4e29a35ae1a92"},"timestamp":1319572184,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI1MjIwNDk=","github-url":"https://github.com/parrot/parrot/issues/182#issuecomment-2522049"},"message":"I've been able to reproduce it by adding 'sweep 1' to the loop.\n\nYes, looks like ByteBuffer is depending in internal immutability of STRING, which has abandoned some time ago to allow some optimization in concat operations. Fix coming.","files":null},{"type":3,"author":{"id":"6cd56829934a8cdbe23b0a30bcc4e29a35ae1a92"},"timestamp":1319573693,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI1MjIzNjI=","github-url":"https://github.com/parrot/parrot/issues/182#issuecomment-2522362"},"message":"Fixed for me in 65e6ab7b61, please verify.","files":null},{"type":3,"author":{"id":"bca615f854f7ca1044265d74ef4974a08d695fb1"},"timestamp":1319575379,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI1MjI3MzM=","github-url":"https://github.com/parrot/parrot/issues/182#issuecomment-2522733"},"message":"The good news: that ByteBuffer fix makes the Rakudo bug that was originally reported go away. :-)\n\nThe bad news: Something is still not right. The PIR example I have gave still segfaults during string heap compaction. Here's a full stack trace.\n\n```\nmsvcr100.dll!memcpy()  Line 226\nlibparrot.dll!move_one_buffer(parrot_interp_t * interp, Memory_Block * pool, buffer_t * old_buf)  Line 958\nlibparrot.dll!move_buffer_callback(parrot_interp_t * interp, buffer_t * b, void * data)  Line 824\nlibparrot.dll!gc_gms_iterate_live_strings(parrot_interp_t * interp, void (parrot_interp_t *, buffer_t *, void *)* callback, void * data)  Line 1702 + 0x3d bytes\nlibparrot.dll!compact_pool(parrot_interp_t * interp, GC_Statistics * stats, Variable_Size_Pool * pool)  Line 788\nlibparrot.dll!gc_gms_mark_and_sweep(parrot_interp_t * interp, unsigned __int64 flags)  Line 855\nlibparrot.dll!gc_gms_allocate_pmc_header(parrot_interp_t * interp, unsigned __int64 flags)  Line 1412\nlibparrot.dll!Parrot_gc_new_pmc_header(parrot_interp_t * interp, unsigned __int64 flags)  Line 312 + 0xd bytes\nlibparrot.dll!get_new_pmc_header(parrot_interp_t * interp, __int64 base_type, unsigned __int64 flags)  Line 491 + 0xb bytes\nlibparrot.dll!Parrot_pmc_new(parrot_interp_t * interp, __int64 base_type)  Line 160\nlibparrot.dll!Parrot_new_p_sc(__int64 * cur_opcode, parrot_interp_t * interp)  Line 18761 + 0x8 bytes\nlibparrot.dll!runops_fast_core(parrot_interp_t * interp, runcore_t * runcore_unused, __int64 * pc)  Line 503 + 0x23 bytes\nlibparrot.dll!runops_int(parrot_interp_t * interp, unsigned __int64 offset)  Line 225\nlibparrot.dll!runops(parrot_interp_t * interp, unsigned __int64 offs)  Line 128\nlibparrot.dll!Parrot_pcc_invoke_from_sig_object(parrot_interp_t * interp, PMC * sub_obj, PMC * call_object)  Line 338\nlibparrot.dll!Parrot_pcc_invoke_sub_from_c_args(parrot_interp_t * interp, PMC * sub_obj, const char * sig, ...)  Line 140\nlibparrot.dll!Parrot_pf_execute_bytecode_program(parrot_interp_t * interp, PMC * pbc, PMC * args)  Line 2695\nlibparrot.dll!Parrot_api_run_bytecode(PMC * interp_pmc, PMC * pbc, PMC * args)  Line 162\nparrot.exe!main(int argc, const char * * argv)  Line 172 + 0x4d bytes\nparrot.exe!__tmainCRTStartup()  Line 555 + 0x19 bytes\nkernel32.dll!0000000076d3652d()     \n[Frames below may be incorrect and/or missing, no symbols loaded for kernel32.dll]  \nntdll.dll!0000000076e6c521()    \n```","files":null},{"type":3,"author":{"id":"6cd56829934a8cdbe23b0a30bcc4e29a35ae1a92"},"timestamp":1319644628,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI1MzIxMTU=","github-url":"https://github.com/parrot/parrot/issues/182#issuecomment-2532115"},"message":"One more fix added in 393e5e7081, it should avoid negative effects of heap compaction.\n\nThe method get_chars is not fixed yet, and it probably has the same problem. It may be more complicated than the other cases because of the size in codepoints, I'm not sure about the correctness of partial_scan in corner cases,","files":null},{"type":3,"author":{"id":"bca615f854f7ca1044265d74ef4974a08d695fb1"},"timestamp":1319647716,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI1MzI4ODk=","github-url":"https://github.com/parrot/parrot/issues/182#issuecomment-2532889"},"message":"Tried it, but I still get the segfault in the same place with the original PIR program I posted. And it's swallowed 2.7 GB of RAM by then (very, very quickly, I should add).","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1319649474,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI1MzMyNzA=","github-url":"https://github.com/parrot/parrot/issues/182#issuecomment-2533270"},"message":"Can this snippet be written as a test to make it easy to, for\ninstance, run it on a bunch of different platforms, like the gcc\ncompile farm?\n\nOn Wed, Oct 26, 2011 at 9:48 AM, Jonathan Worthington\nreply@reply.github.com\nwrote:\n\n\u003e Tried it, but I still get the segfault in the same place with the original PIR program I posted. And it's swallowed 2.7 GB of RAM by then (very, very quickly, I should add).\n\u003e \n\u003e ## \n\u003e \n\u003e Reply to this email directly or view it on GitHub:\n\u003e https://github.com/parrot/parrot/issues/182#issuecomment-2532889\n\n## \n\nJonathan \"Duke\" Leto jonathan@leto.net\nLeto Labs LLC\n209.691.DUKE // http://labs.leto.net\nNOTE: Personal email is only checked twice a day at 10am/2pm PST,\nplease call/text for time-sensitive matters.","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1355291658,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExMjc3NzM4","github-url":"https://github.com/parrot/parrot/issues/182#issuecomment-11277738"},"message":"@jnthn is this still a problem or can this issue be closed?","files":null},{"type":3,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1355322904,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExMjkwODQz","github-url":"https://github.com/parrot/parrot/issues/182#issuecomment-11290843"},"message":"I fail to segfault on OS X:\n\n```\n$ sw_vers\nProductName:    Mac OS X\nProductVersion: 10.8.2\nBuildVersion:   12C60\n```\n\nRev: 32ac823ed6b446f6d5b9ddcd16a057cb38f20616","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1355342121,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExMzA2NjY5","github-url":"https://github.com/parrot/parrot/issues/182#issuecomment-11306669"},"message":"Closing this issue, please create another or reopen if this is still a problem.","files":null}]}