{"version":1,"ops":[{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1232779142,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI2ODA=","github-url":"https://github.com/parrot/parrot/issues/303#issuecomment-3502680"},"message":"\u003cp\u003e\nThis is a duplicate of RT \u003ca class=\"missing ticket\"\u003e#54520\u003c/a\u003e -- so look there for further examples.\n\u003c/p\u003e\n\n\u003cp\u003e\nPm\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1233961690,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI2ODE=","github-url":"https://github.com/parrot/parrot/issues/303#issuecomment-3502681"},"message":"\u003cp\u003e\nI'm looking at the RT ticket which seems to indicate that this is a problem with class instantiation. I'm looking at the relevant code in src/pmc/class.pmc and src/pmc/object.pmc, but don't see any obvious errors that would prevent methods from being properly inherited by subclasses. I'm going to run some tests today, and when I get home tonight I'll run it through GDB to try and figure out where the problem lies.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1233964189,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI2ODI=","github-url":"https://github.com/parrot/parrot/issues/303#issuecomment-3502682"},"message":"\u003cp\u003e\nThis isn't exactly a duplicate of RT \u003ca class=\"missing ticket\"\u003e#54520\u003c/a\u003e. That ticket involves changing the MRO of a class that's already been instantiated. That is not the case in this ticket where the MRO is not being modified at all after instantiating the ResizablePMCArray and the RPA classes.\n\u003c/p\u003e\n\n\u003cp\u003e\nOn cursory inspection, the relevant code in object.pmc and class.pmc looks to be doing The Right Thing. I'll try to look at this issue later tonight in the debugger to see what's going on here.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1240204360,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI2ODM=","github-url":"https://github.com/parrot/parrot/issues/303#issuecomment-3502683"},"message":"\u003cp\u003e\nAs a quick note, as of r38214 on Ubuntu 9.04 x86_64 the test code above causes a segfault/coredump instead of printing out the error message. This is obviously a change from how it was failing, and it's a change in the wrong direction.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1240216789,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI2ODQ=","github-url":"https://github.com/parrot/parrot/issues/303#issuecomment-3502684"},"message":"\u003cp\u003e\nIn r38217 I made a small change to the sort method. Previously, it was using the macro PMC_size() to determine the number of elements in the array, which only worked with FixedPMCArray PMCs, and not subclasses. So I changed that to a call to VTABLE_elements, which solves that one problem.\n\u003c/p\u003e\n\n\u003cp\u003e\nOf course, that didn't solve the ticket entirely (or I would have closed it). It gets past the part where it was failing previously, and now segfaults somewhere in the call to the comparison PIR function. I don't have time to dig into it tonight. Here's the backtrace in case anybody wants to play with it:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003eProgram received signal SIGSEGV, Segmentation fault.\n0x00007f1f053c5382 in Parrot_convert_arg (interp=0x6fd080, st=0x7fff0db07860)\n    at src/call/pcc.c:1126\n1126                UVal_str(st-\u0026gt;val) = VTABLE_get_string(interp, UVal_pmc(st-\u0026gt;val));\n(gdb) bt\n#0  0x00007f1f053c5382 in Parrot_convert_arg (interp=0x6fd080,\n    st=0x7fff0db07860) at src/call/pcc.c:1126\n#1  0x00007f1f053c5ad2 in Parrot_process_args (interp=0x6fd080,\n    st=0x7fff0db07860, param_or_result=\u0026lt;value optimized out\u0026gt;)\n    at src/call/pcc.c:1705\n#2  0x00007f1f053c6942 in parrot_pass_args_fromc (interp=0x6fd080,\n    sig=0x7f1f0556b42c \"PP\", dest=0x85fef8, old_ctxp=0x85bee0,\n    ap=0x7fff0db07a00) at src/call/pcc.c:1927\n#3  0x00007f1f053c9c39 in runops_args (interp=0x6fd080, sub=0x7f9480,\n    obj=0x7862c0, meth_unused=\u0026lt;value optimized out\u0026gt;, sig=0x7f1f0556b42b \"IPP\",\n    ap=0x7fff0db07a00) at src/call/ops.c:241\n#4  0x00007f1f053ca377 in Parrot_runops_fromc_args_reti (interp=0x6fd080,\n    sub=0x0, sig=0x7f1f0556b42b \"IPP\") at src/call/ops.c:403\n#5  0x00007f1f0541386e in Parrot_quicksort (interp=0x6fd080, data=0x7f6db0,\n    n=2, cmp=0x7f9480) at src/utils.c:941\n#6  0x00007f1f054ede2f in Parrot_FixedPMCArray_nci_sort (interp=0x6fd080,\n    pmc=\u0026lt;value optimized out\u0026gt;) at ./src/pmc/fixedpmcarray.pmc:50\n#7  0x00007f1f054991a2 in Parrot_NCI_invoke (interp=0x6fd080, pmc=0x0,\n    next=0x85feb0) at ./src/pmc/nci.pmc:329\n#8  0x00007f1f0540bafd in runops_slow_core (interp=0x6fd080, pc=0x85fe98)\n    at src/runops_cores.c:461\n#9  0x00007f1f053c8ef2 in runops_int (interp=0x6fd080, offset=0)\n    at src/interpreter.c:982\n#10 0x00007f1f053c9a5b in runops (interp=0x6fd080, offs=\u0026lt;value optimized out\u0026gt;)\n    at src/call/ops.c:107\n#11 0x00007f1f053c9bd0 in runops_args (interp=0x6fd080, sub=0x7f94e0,\n    obj=\u0026lt;value optimized out\u0026gt;, meth_unused=\u0026lt;value optimized out\u0026gt;,\n    sig=0x7f1f0555d9c5 \"vP\", ap=0x7fff0db07cf0) at src/call/ops.c:255\n#12 0x00007f1f053ca5c7 in Parrot_runops_fromc_args (interp=0x6fd080, sub=0x0,\n    sig=0x7f1f0555d9c5 \"vP\") at src/call/ops.c:324\n#13 0x00007f1f0554c7a3 in imcc_run (interp=0x6fd080,\n    sourcefile=0x7fff0db086e1 \"subclasstest.pir\", argc=1, argv=0x7fff0db07f40)\n    at compilers/imcc/main.c:806\n#14 0x0000000000400bb2 in main (argc=1, argv=0x7fff0db07f40) at src/main.c:61\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"099af60226e2576bd4ff0f5c2614b710c745cab6"},"timestamp":1240250679,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI2ODU=","github-url":"https://github.com/parrot/parrot/issues/303#issuecomment-3502685"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/218#comment:6\" title=\"Comment 6 for Ticket #218\"\u003ewhiteknight\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n In r38217 I made a small change to the sort method. Previously, it was using the macro PMC_size() to determine the number of elements in the array, which only worked with FixedPMCArray PMCs, and not subclasses. So I changed that to a call to VTABLE_elements, which solves that one problem.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nThis patch solves ticket but I'm not sure how \"kosher\" is it.\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003ediff --git a/src/pmc/fixedpmcarray.pmc b/src/pmc/fixedpmcarray.pmc\nindex 6eb6e9f..4146ca4 100644\n--- a/src/pmc/fixedpmcarray.pmc\n+++ b/src/pmc/fixedpmcarray.pmc\n@@ -47,7 +47,7 @@ Sort this array, optionally using the provided cmp_func\n         const INTVAL n = SELF.elements();\n         if (n \u0026gt; 1)\n-           Parrot_quicksort(interp, (void **)PMC_array(SELF), n, cmp_func);\n+           Parrot_quicksort(interp, (void **)SELF.get_pointer(), n, cmp_func);\n     }\n /*\n@@ -144,6 +144,19 @@ fixed sized array).\n /*\n+=item C\u0026lt;void *get_pointer()\u0026gt;\n+\n+Get pointer to stored data. Used in sort method.\n+\n+=cut\n+\n+*/\n+\n+    VTABLE void * get_pointer() {\n+        return PMC_array(SELF);\n+    }\n+/*\n+\n =item C\u0026lt;INTVAL get_integer()\u0026gt;\n Returns the number of elements in the array.\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1240252721,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI2ODc=","github-url":"https://github.com/parrot/parrot/issues/303#issuecomment-3502687"},"message":"\u003cp\u003e\nGood job bacek++! I actually had that same idea as soon as I logged off for the night. I can't believe that I saw the problem with PMC_size, but didn't recognize the same exact problem with PMC_array().\n\u003c/p\u003e\n\n\u003cp\u003e\nThe patch looks perfectly kosher. I'll sanity check it later but we should be able to apply it directly. Thanks!\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"099af60226e2576bd4ff0f5c2614b710c745cab6"},"timestamp":1240253552,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI2ODg=","github-url":"https://github.com/parrot/parrot/issues/303#issuecomment-3502688"},"message":"\u003cp\u003e\nI actually tested it and applied in r38227 :)\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"bca615f854f7ca1044265d74ef4974a08d695fb1"},"timestamp":1240273175,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI2ODk=","github-url":"https://github.com/parrot/parrot/issues/303#issuecomment-3502689"},"message":"\u003cp\u003e\n'fraid the patch applied as r38227 is wrong, so reverted it in r38233 (reason stated in the commit message). Pm is about to commit a test case to Parrot that this patch would have broken (bug discovered because it broke a Rakudo test).\n\u003c/p\u003e\n\n\u003cp\u003e\nThanks,\n\u003c/p\u003e\n\n\u003cp\u003e\nJonathan\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1240274424,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI2OTA=","github-url":"https://github.com/parrot/parrot/issues/303#issuecomment-3502690"},"message":"\u003cp\u003e\nTests added in r38234.\n\u003c/p\u003e\n\n\u003cp\u003e\nPm\n\u003c/p\u003e","files":null}]}