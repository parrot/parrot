{"version":1,"ops":[{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1235029105,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5Nzc=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502977"},"message":"\u003cp\u003e\nReplying to \u003ca class=\"new ticket\" href=\"http://trac.parrot.org/parrot/ticket/357\" title=\"cage: Enable meaningful testing of t/native_pbc/*.t (new)\"\u003edoughera\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cp\u003e\nI strongly agree with Andy Dougherty's comments.  My impression is that these tests don't stay fixed once we've fixed them, and they don't stay TODO-ed when we TODO them.  Now, I know that's not literally true, but if you don't stay on #parrot all day long, that's the impression you might get.\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n Version 0.9.1 was released with failing t/native_pbc/*.t tests.  If the tests are to\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n[snip]\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n 1.  The tests act differently in \"DEVELOPING\" versus released directories, meaning all the tests done in an svn-checkout -- even those done just prior to release -- weren't necessarily relevant.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nWe've long had the ability to write tests such that they respond one way if we're \u003ci\u003eDEVELOPING\u003c/i\u003e and another way if we're not.  Parrot::Revision works in this way, so I wrote tests which take that into account.\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003et/configure/018-revision_to_cache.t\nt/configure/061-revision_from_cache.t\nt/configure/017-revision_from_cache.t\n\u003c/pre\u003e\u003cp\u003e\nI suspect that the \u003ci\u003et/native_pbc/*.t\u003c/i\u003e tests could be adapted in the same way.\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n 2.  The release procedure is difficult in practice.  It is not easy, on short notice, to get developers with all the requisite different platforms to run the appropriate scripts, commit the appropriate files, and re-run all the appropriate tests.  Also, because of item 1, even running all the appropriate tests does not ensure that the tests will actually pass in the released version.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nAgreed.\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n [snip]\n What to do?\n First, if the tests are to be kept, they must be designed so that they can be meaningfully run well in advance of the release.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nSee above for part of the solution.\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\u003cbr /\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1235083648,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5Nzg=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502978"},"message":"\u003cp\u003e\n(I removed the \"Milestone 1.0\" setting -- that should probably be reserved for much more important things.)\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1235085893,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5Nzk=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502979"},"message":"\u003cp\u003e\nThere is an open question as to whether cross-platform bytecode is a must-have for 1.0. While this is just for the testing of that feature, we can't do the test properly until the feature is working...\n\u003c/p\u003e\n\n\u003cp\u003e\n(However, given the time remaining until 1.0, I'm assuming that we're not going to get this feature set before then.)\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1235095980,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5ODA=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502980"},"message":"\u003cp\u003e\n\u003cstrong\u003etools/dev/pbc_header.pl\u003c/strong\u003e broke the test files.\n\u003c/p\u003e\n\n\u003cp\u003e\nThere should have been enough time to get current darwin/ppc _3.pbc files.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe procedure described in the release_manager guide explicitly says:\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\nPlease check with C\u0026lt;prove t/native_pbc/*.t\u0026gt;\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nMaybe it needs to be an easier to follow description how to update those pbc's.\nBut tools/dev/mk_native_pbc is much easier now, than before.\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e$ svn revert t/native_pbc/integer_1.pbc\nReverted 't/native_pbc/integer_1.pbc'\nrurban@reini /usr/src/perl/parrot/parrot-svn\n$ perl tools/dev/pbc_header.pl t/native_pbc/integer_1.pbc\nt/native_pbc/integer_1.pbc\n        wordsize      =   4\n        byteorder     =   0\n        floattype     =   0\n        parrot_major  =   0\n        parrot_minor  =   9\n        parrot_patch  =   1\n        bc_major      =   3\n        bc_minor      =  34\n        uuid_type     =   0\n        uuid_size     =   0\n        pad           =  14\n        dir_format    = 1, 0, 0, 0\nrurban@reini /usr/src/perl/parrot/parrot-svn\n$ perl tools/dev/pbc_header.pl --upd t/native_pbc/integer_1.pbc\nrurban@reini /usr/src/perl/parrot/parrot-svn\n$ perl tools/dev/pbc_header.pl t/native_pbc/integer_1.pbc\nt/native_pbc/integer_1.pbc\n        wordsize      = 108\n        byteorder     =  38\n        floattype     = 116\n        parrot_major  = 109\n        parrot_minor  = -51\n        parrot_patch  = 116\n        bc_major      = -34\n        bc_minor      =  90\n        uuid_type     =   0\n        uuid_size     =   0\n        pad           =  14\n        dir_format    = 1, 0, 0, 0\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1235108286,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5ODE=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502981"},"message":"\u003cp\u003e\nI've fixed the broken tools/dev/pbc_header.pl --upd\nwith r36890.\nThe writer was completely rewritten.\n\u003c/p\u003e\n\n\u003cp\u003e\nI've also added the long planned UUID fingerprint feature, so that PBC changes are also detected during devel cycles, once the PBC_COMPAT file is updated.\n\u003c/p\u003e\n\n\u003cp\u003e\nSo the tests can be relaxed if those TODOs are too annoying.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe library packfile reader does not yet check this UUID though.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1235689445,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5ODI=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502982"},"message":"\u003cp\u003e\nEnabled Milestone 1.0 again, as it is rather important that we get no passing TODO tests on the 1.0 release.\n\u003c/p\u003e\n\n\u003cp\u003e\nAnd the fix is really simple.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1235796203,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5ODM=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502983"},"message":"\u003cp\u003e\nAttached is the patch to check the bytecode version for the native pbcs, and to skip if failing.\n\u003c/p\u003e\n\n\u003cp\u003e\nNo todo, as the pbc's are now portable with the patch in TT \u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/254\" title=\"bug: pbc compat: t/native_pbc/number.t:  New failure on some platforms (closed: fixed)\"\u003e#254\u003c/a\u003e.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1235807747,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5ODQ=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502984"},"message":"\u003cp\u003e\nRewrite number.t with new attachment.\nAdded proper coverage testmatrix for number tests, for the various converters.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1235824125,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5ODU=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502985"},"message":"27923 byte attachment from rurban\nat http://trac.parrot.org/parrot/raw-attachment/ticket/357/tt357-better_native_pbc_t.patch\n\n# ```Index: parrot-svn/lib/Parrot/BuildUtil.pm\n\n--- parrot-svn.orig/lib/Parrot/BuildUtil.pm 2009-02-28 01:01:45.296875000 +0100\n+++ parrot-svn/lib/Parrot/BuildUtil.pm  2009-02-28 10:22:34.046875000 +0100\n@@ -12,9 +12,9 @@\n\n =head1 DESCRIPTION\n\n-This package holds three subroutines:  C\u003cparrot_version()\u003e, C\u003cslurp_file\u003e,\n-and C\u003cgenerated_file_header\u003e. Subroutines are not exported--each must be\n-requested by using a fully qualified name.\n+This package holds pre-configure time subroutines, which are not exported\n+and should not require Parrot::Config.\n+Each must be requested by using a fully qualified name.\n\n =head1 SUBROUTINES\n\n@@ -134,13 +134,35 @@\n     return $header;\n }\n\n-1;\n+=item C\u003cget_bc_version()\u003e\n\n-=back\n+Return an array of ($bc_major, $bc_minor) from F\u003cPBC_COMPAT\u003e.\n+This is used in the native_pbc tests.\n+\n+See also F\u003ctools/dev/pbc_header.pl\u003e and F\u003ctools/build/pbcversion_h.pl\u003e.\n\n-=head1 AUTHOR\n+=cut\n\n-Gregor N. Purdy.  Revised by James E Keenan.\n+sub get_bc_version {\n-    my $compat_file = 'PBC_COMPAT';\n-    my ( $bc_major, $bc_minor );\n-    open my $IN, '\u003c', $compat_file or die \"Can't read $compat_file\";\n-    while (\u003c$IN\u003e) {\n-        if (/^(\\d+).0*(\\d+)/) {\n-            ( $bc_major, $bc_minor ) = ( $1, $2 );\n-            last;\n-        }\n-    }\n-    unless ( defined $bc_major \u0026\u0026 defined $bc_minor ) {\n-        die \"No bytecode version found in '$compat_file'.\";\n-    }\n-    close $IN;\n-    return ( $bc_major, $bc_minor );\n  +}\n  +\n  +1;\n  +\n  +=back\n  \n  =cut\n\n# Index: parrot-svn/tools/build/pbcversion_h.pl\n\n--- parrot-svn.orig/tools/build/pbcversion_h.pl 2009-02-28 01:01:45.374875000 +0100\n+++ parrot-svn/tools/build/pbcversion_h.pl  2009-02-28 10:22:34.062500000 +0100\n@@ -21,28 +21,19 @@\n use warnings;\n use strict;\n use lib 'lib';\n+use Parrot::BuildUtil;\n\n## -my ( $major, $minor );\n\n-my $compat_file = 'PBC_COMPAT';\n-open my $IN, '\u003c', $compat_file or die \"Can't read $compat_file\";\n-while (\u003c$IN\u003e) {\n-    if (/^(\\d+).0*(\\d+)/) {\n-        ( $major, $minor ) = ( $1, $2 );\n-        last;\n-    }\n  -}\n  -close $IN;\n  +my ( $major, $minor ) = Parrot::BuildUtil::get_bc_version();\n  \n  unless ( defined $major \u0026\u0026 defined $minor ) {\n-    die \"No bytecode version found in '$compat_file'.\";\n-    die \"No bytecode version found in 'PBC_COMPAT'.\";\n  }\n  \n  print \u003c\u003c \"EOF\";\n  /\\* ex: set ro:\n  - !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!\n    *\n- \\* This file is generated automatically from '$compat_file'\n- \\* This file is generated automatically from 'PBC_COMPAT'\n  - by $0.\n    *\n  - Any changes made here will be lost!\n    Index: parrot-svn/t/native_pbc/integer.t\n    ===================================================================\n    --- parrot-svn.orig/t/native_pbc/integer.t  2009-02-28 01:01:45.311875000 +0100\n    +++ parrot-svn/t/native_pbc/integer.t   2009-02-28 11:13:20.328125000 +0100\n    @@ -7,8 +7,9 @@\n    use lib qw( . lib ../lib ../../lib );\n    use Test::More;\n    use Parrot::Config;\n    +use Parrot::BuildUtil;\n\n-use Parrot::Test tests =\u003e 5;\n+use Parrot::Test tests =\u003e 7;\n\n =head1 NAME\n\n@@ -22,30 +23,32 @@\n\n Tests word-size/float-type/endian-ness for different architectures.\n\n-These tests usually only work on releases, not on svn checkouts\n\n## -and if every release has updated native pbc test files.\n\n-See F\u003ctools/dev/mk_native_pbc\u003e to create the platform-specific native pbcs.\n+These tests usually only work on updated native pbc test files.\n+See F\u003ctools/dev/mk_native_pbc\u003e to create the platform-specific\n+native pbcs.\n\n =head1 PLATFORMS\n-  _1   i386 32 bit opcode_t, 32 bit intval\n-       (linux-gcc-ix86, freebsd-gcc, cygwin)\n-  _1   i386 32 bit opcode_t, 32 bit intval, 8 byte double\n- ```\n    (linux-gcc-i386, freebsd-gcc, cygwin, ...)\n  ```\n-  _2   i386 32 bit opcode_t, 32 bit intval, 12 bit long double\n-       (linux-gcc-ix86)\n-  _2   i386 32 bit opcode_t, 32 bit intval, 12 byte long double\n- ```\n    (linux-gcc-i386 or cygwin with --floatval=\"long double\")\n  ```\n-  _3   PPC BE 32 bit opcode_t, 32 bit intval\n-  _3   PPC BE 32 bit opcode_t, 32 bit intval, 8 byte double\n      (darwin-ppc)\n-  _4   x86_64 12-bit double 64 bit opcode_t\n-       (linux-gcc-x86_64 -m96bit-long-double)\n-  _4   x86_64 64 bit opcode_t, 64 bit intval, 8 byte double\n-       (linux-gcc-x86_64 resp. amd64, solaris-cc-64int)\n  +\n-  _5   x86_64 64 bit opcode_t, 64 bit intval, 16 byte long double\n- ```\n    (linux-gcc-x86_64, solaris-cc-64int --floatval=\"long double\")\n  ```\n-  _5   x86_64 16 bit long double 64 bit opcode_t\n-       (linux-gcc-x86_64, solaris-cc-64int)\n-  _6   big-endian 64 bit opcode_t, 64 bit intval, 8 byte double\n- ```\n    (Sparc64/Solaris, MIPS irix or similar)\n  ```\n-  _6   big-endian 64-bit\n-       (MIPS irix or similar)\n-  _7   big-endian 64 bit opcode_t, 64 bit intval, 16 byte long double\n- ```\n    (Sparc64/Solaris --floatval=\"long double\")\n  ```\n  \n  =cut\n\n@@ -77,6 +80,69 @@\n\n =cut\n\n+my @archtest = qw(4_le 4_le 4_be 4_le 8_le 8_be 8_be);\n+sub this_arch {\n-    return $PConfig{intvalsize}\n-      . \"_\"\n-      . (substr($PConfig{byteorder},0,2) eq '12' ? \"le\" : \"be\");\n  +}\n  +\n  +sub bc_version($) {\n-    my $f = shift;\n-    my $b;\n-    open my $F, \"\u003c\", \"$f\" or return \"Can't open $f: $!\";\n-    binmode $F;\n-    seek $F, 14, 0;\n-    read $F, $b, 8;\n-    my ($bc_major, $bc_minor) = unpack \"cc\", $b;\n-    return ($bc_major . \".\" . $bc_minor);\n  +}\n  +my ( $bc_major, $bc_minor ) = Parrot::BuildUtil::get_bc_version();\n  +my $bc = ($bc_major . \".\" . $bc_minor);\n  +my $arch = this_arch();\n  +# all should pass\n  +my $todo = {};\n  +my $skip = {};\n  +\n  +# expected result\n  +my $output = '270544960';\n  +\n  +# test_pbc_integer(1, \"i386 8-byte double float, 32 bit opcode_t\");\n  +sub test_pbc_integer {\n-    my $id   = shift;\n-    my $desc = shift;\n-    my $file = \"t/native_pbc/integer_$id.pbc\";\n-    my $cvt = \"$archtest[$id-1]=\u003e$arch\";\n-    my $skip_msg;\n-    # check if this a platform where we can produce the needed file\n-    if ($archtest[$id-1] eq $arch) {\n-        $skip_msg = \"Want to help? Regenerate $file \"\n-          . \"with tools/dev/mk_native_pbc --noconf\";\n-    }\n-    else {\n-        $skip_msg  = \"$file is outdated. \"\n-          . \"Need $archtest[$id-1] platform.\";\n-    }\n-    # check if skip or todo\n-  SKIP: {\n-    if ( $skip-\u003e{$id} ) {\n-        skip \"$cvt not yet implemented\", 1\n-    }\n-    elsif ( $todo-\u003e{$id} ) {\n-        skip $skip_msg, 1\n-          if ($bc ne bc_version($file));\n-        pbc_output_is( undef, $output, \"$cvt $desc\",\n-                       todo =\u003e \"$cvt yet untested, TT #357. \"\n-                       . \"Please report success.\" );\n-    }\n-    else {\n-        skip $skip_msg, 1\n-          if ($bc ne bc_version($file));\n-        pbc_output_is( undef, $output, \"$cvt $desc\" );\n-    }\n-  }\n  +}\n  +\n  # execute the file t/native_pbc/integer_1.pbc\n  #\n  # any ordinary intel 386 linux, cygwin, mingw, MSWin32, ...\n  @@ -84,34 +150,24 @@\n  #         wordsize  = 4   (interpreter's wordsize/INTVAL = 4/4)\n  #         byteorder = 0   (interpreter's byteorder       = 0)\n  #         floattype = 0   (interpreter's NUMVAL_SIZE     = 8)\n  -#         parrot-version 0.9.0, bytecode-version 3.34\n  +#         parrot-version 0.9.1, bytecode-version 3.36\n  #         UUID type = 0, UUID size = 0\n  #         no endianize, no opcode, no numval transform\n  #         dirformat = 1\n  # ]\n  -TODO: {\n-    local $TODO;\n-    if ($PConfig{ptrsize} == 8) {\n-        $TODO = \"Known problem on 64bit with reading 32bit dirs. See TT #254\"\n-    } elsif ($PConfig{DEVEL}) {\n-        $TODO = \"devel versions are not guaranteed to succeed\";\n-    }\n  +test_pbc_integer(1, \"i386 8-byte double float, 32 bit opcode_t, 4-byte int\");\n\n-pbc_output_is( undef, '270544960', \"i386 32 bit opcode_t, 32 bit intval\" )\n\n## \\-    or diag \"May need to regenerate t/native_pbc/integer_1.pbc; read test file\";\n\n-# adding --floatval='long double'\n+# adding --floatval=\"long double\" --jitcapable=0\n # HEADER =\u003e [\n #         wordsize  = 4   (interpreter's wordsize/INTVAL = 4/4)\n #         byteorder = 0   (interpreter's byteorder       = 0)\n #         floattype = 1   (interpreter's NUMVAL_SIZE     = 12)\n-#         parrot-version 0.9.0, bytecode-version 3.34\n+#         parrot-version 0.9.1, bytecode-version 3.36\n #         UUID type = 0, UUID size = 0\n #         no endianize, no opcode, no numval transform\n #         dirformat = 1\n # ]\n-pbc_output_is( undef, '270544960', \"i386 32 bit opcode_t, 32 bit intval 12-byte long double\" )\n-    or diag \"May need to regenerate t/native_pbc/integer_2.pbc; read test file\";\n  +test_pbc_integer(2, \"i386 12-byte double float, 32 bit opcode_t, 4-byte int\");\n  \n  # darwin/ppc:\n  \n  # HEADER =\u003e [\n  \n  @@ -123,36 +179,21 @@\n  \n  # no endianize, no opcode, no numval transform\n  \n  # dirformat = 1\n  \n  # ]\n  \n  ## \n  \n  -pbc_output_is(undef, '270544960', \"PPC BE 32 bit opcode_t, 32 bit intval\")\n\n## \\-    or diag \"May need to regenerate t/native_pbc/integer_3.pbc; read test file\";\n\n## -}\n\n-TODO: {\n-    local $TODO;\n-    if ($PConfig{ptrsize} == 4) {\n-        $TODO = \"Known problem on 32bit with reading 64bit dirs. See TT #254\"\n-        # Unknown PMC type to thaw 0\n-    } elsif ($PConfig{DEVEL}) {\n-        $TODO = \"devel versions are not guaranteed to succeed\";\n-    }\n  +test_pbc_integer(3, \"PPC BE 32 bit opcode_t, 4-byte int\");\n  \n  # any ordinary 64-bit intel unix:\n  \n  # HEADER =\u003e [\n  \n  # wordsize  = 8   (interpreter's wordsize/INTVAL = 8/8)\n  \n  # byteorder = 0   (interpreter's byteorder       = 0)\n  \n  # floattype = 0   (interpreter's NUMVAL_SIZE     = 8)\n  \n  -#         parrot-version 0.9.0, bytecode-version 3.34\n  +#         parrot-version 0.9.1, bytecode-version 3.36\n  \n  # UUID type = 0, UUID size = 0\n  \n  # no endianize, no opcode, no numval transform\n  \n  # dirformat = 1\n  \n  # ]\n  \n  +test_pbc_integer(4, \"i86_64 LE 64 bit opcode_t, 8-byte int, 8-byte double\");\n\n-pbc_output_is(undef, '270544960', \"i86_64 LE 64 bit opcode_t, 64 bit intval\")\n\n## \\-    or diag \"May need to regenerate t/native_pbc/integer_4.pbc; read test file\";\n\n-# adding --floatval='long double'\n+# adding --floatval=\"long double\"\n # HEADER =\u003e [\n #         wordsize  = 8   (interpreter's wordsize/INTVAL = 8/8)\n #         byteorder = 0   (interpreter's byteorder       = 0)\n@@ -162,15 +203,22 @@\n #         no endianize, no opcode, no numval transform\n #         dirformat = 1\n # ]\n+test_pbc_integer(5, \"i86_64 LE 64 bit opcode_t, 8-byte int, 16-byte double\");\n\n-pbc_output_is(undef, '270544960', \"i86_64 LE 64 bit opcode_t, 64 bit intval, 16-byte long double\")\n\n## \\-    or diag \"May need to regenerate t/native_pbc/integer_5.pbc; read test file\";\n\n-# Formerly following tests had been set up:\n-# pbc_output_is(undef, '270544960', \"big-endian 64-bit (irix)\");\n-#    or diag \"May need to regenerate t/native_pbc/integer_6.pbc; read test file\";\n+# ppc/mips -m64\n+# HEADER =\u003e [\n+#         wordsize  = 8   (interpreter's wordsize/INTVAL = 8/8)\n+#         byteorder = 1   (interpreter's byteorder       = 0)\n+#         floattype = 0   (interpreter's NUMVAL_SIZE     = 8)\n+#         parrot-version 0.9.1, bytecode-version 3.35\n+#         UUID type = 0, UUID size = 0\n+#         _need_ endianize, no opcode, no numval transform\n+#         dirformat = 1\n+# ]\n+test_pbc_integer(6, \"big-endian 64-bit, 8-byte int, 8-byte double\");\n\n-}\n+# ppc/mips -m64 --floatval=\"long double\"\n+test_pbc_integer(7, \"big-endian 64-bit, 8-byte int, 16-byte double\");\n\n # Local Variables:\n #   mode: cperl\n\n# Index: parrot-svn/t/native_pbc/number.t\n\n--- parrot-svn.orig/t/native_pbc/number.t   2009-02-28 01:01:45.327875000 +0100\n+++ parrot-svn/t/native_pbc/number.t    2009-02-28 10:59:27.718750000 +0100\n@@ -7,8 +7,9 @@\n use lib qw( . lib ../lib ../../lib );\n use Test::More;\n use Parrot::Config;\n+use Parrot::BuildUtil;\n\n-use Parrot::Test tests =\u003e 5;\n+use Parrot::Test tests =\u003e 7;\n\n =head1 NAME\n\n@@ -22,22 +23,47 @@\n\n Tests word-size/float-type/endian-ness for different architectures.\n\n-These tests usually only work on releases, not on svn checkouts\n\n## -and if every release has updated native pbc test files.\n\n-See F\u003ctools/dev/mk_native_pbc\u003e to create the platform-specific native pbcs.\n+These tests usually only work on updated native pbc test files.\n+See F\u003ctools/dev/mk_native_pbc\u003e to create the platform-specific\n+native pbcs.\n\n =head1 PLATFORMS\n-  _1   i386 32 bit opcode_t, 32 bit intval   (linux-gcc-ix86, freebsd-gcc, cygwin)\n-  _2   i386 32 bit opcode_t, 32 bit intval, 12 bit long double (linux-gcc-ix86)\n-  _3   PPC BE 32 bit opcode_t, 32 bit intval  (darwin-ppc)\n-  _4   x86_64 12-bit double 64 bit opcode_t   (linux-gcc-x86_64 -m96bit-long-double)\n-  _5   x86_64 16 bit long double 64 bit opcode_t (linux-gcc-x86_64, solaris-cc-64int)\n-  _6   big-endian 64-bit                     (MIPS irix or similar)\n-  _1   i386 32 bit opcode_t, 32 bit intval, 8 byte double\n-       (linux-gcc-i386, freebsd-gcc, cygwin, ...)\n  +\n-  _2   i386 32 bit opcode_t, 32 bit intval, 12 byte long double\n-       (linux-gcc-i386 or cygwin with --floatval=\"long double\")\n  +\n-  _3   PPC BE 32 bit opcode_t, 32 bit intval, 8 byte double\n-       (darwin-ppc)\n  +\n-  _4   x86_64 64 bit opcode_t, 64 bit intval, 8 byte double\n-       (linux-gcc-x86_64 resp. amd64, solaris-cc-64int)\n  +\n-  _5   x86_64 64 bit opcode_t, 64 bit intval, 16 byte long double\n-       (linux-gcc-x86_64, solaris-cc-64int --floatval=\"long double\")\n  +\n-  _6   big-endian 64 bit opcode_t, 64 bit intval, 8 byte double\n-       (Sparc64/Solaris, MIPS irix or similar)\n  +\n-  _7   big-endian 64 bit opcode_t, 64 bit intval, 16 byte long double\n- ```\n    (Sparc64/Solaris --floatval=\"long double\")\n  ```\n  \n  =cut\n\n+# tt #357: need better testmatrix for coverage overview\n+# float conversion src: left-side (pbc) to dest: upper-side (platform)\n+# 1: tested ok, 0: fails (skip), ?: not yet tested (todo)\n+my $testmatrix = \u003c\u003cEOF;\n- ```\n    8_le 12_le 16_le 8_be 16_be\n  ```\n  \n  +8_le     1     1    ?     ?     ?\n  +12_le    1     1    ?     ?     ?\n  +16_le    1     1    1     ?     ?\n  +8_be     1     1    ?     1     ?\n  +16_be    1     1    1     ?     1\n  +EOF\n  +\n  =begin comment\n  \n  # these are PBC files generated from t/op/number_1.pasm with\n  \n  @@ -55,7 +81,7 @@\n  \n  # \\- include the pbc_dump header info for reference\n  \n  # \\- put the file into MANIFEST\n  \n  # \\- add the file as binary (svn add) and commit it\n  \n  -# thanks -leo\n  +# thanks -leo and reini\n  \n  On test failures please add the output of\n\n@@ -65,6 +91,60 @@\n\n =cut\n\n+#  8_le 12_le 16_le 8_be 16_be\n+#8_le     1     1    ?     ?     ?\n+#12_le    1     1    ?     ?     ?\n+#16_le    1     1    1     ?     ?\n+#8_be     1     1    ?     1     ?\n+#16_be    1     1    1     ?     1\n+my $destarch = { '8_le'  =\u003e [1,4], '12_le' =\u003e [2], '16_le' =\u003e [5],\n-                 '8_be'  =\u003e [3,6], '16_be' =\u003e [7] };\n  +# the reverse: which tests for which arch\n  +my @archtest = qw(8_le 12_le 8_be 8_le 16_le 8_be 16_be);\n  +# @todo lists of tests for your architecture.\n  +# e.g. for arch 8_le =\u003e tests (8_be) =\u003e todo (3 6)\n  +sub generate_skip_list {\n-    my $arch = shift;\n-    my $check = shift;\n-    my %skip;\n-    my @lines = split /\\n/, $testmatrix;\n-    my @dest  = split /\\s+/, shift @lines;\n-    shift @dest unless $dest[0];\n-    my $i = 0;\n-    my %cols  = map { $_ =\u003e $i++ } @dest;\n-    my $col   = $cols{$arch};      # the column for our arch\n-    for my $s (@lines) {\n-        my @s  = split /\\s+/, $s;\n-        my $pbc = shift @s;\n-        if ($s[$col] eq $check) {\n-            for (@{$destarch-\u003e{$pbc}}) { $skip{$_}++ }\n-        }\n-    }\n-    \\%skip\n  +}\n  +# 16_le\n  +sub this_arch {\n-    return $PConfig{numvalsize}\n-      . \"_\"\n-      . (substr($PConfig{byteorder},0,2) eq '12' ? \"le\" : \"be\");\n  +}\n  +\n  +sub bc_version($) {\n-    my $f = shift;\n-    my $b;\n-    open my $F, \"\u003c\", \"$f\" or return \"Can't open $f: $!\";\n-    binmode $F;\n-    seek $F, 14, 0;\n-    read $F, $b, 8;\n-    my ($bc_major, $bc_minor) = unpack \"cc\", $b;\n-    return ($bc_major . \".\" . $bc_minor);\n  +}\n  +my ( $bc_major, $bc_minor ) = Parrot::BuildUtil::get_bc_version();\n  +my $bc = ($bc_major . \".\" . $bc_minor);\n  +my $arch = this_arch();\n  +my $todo = generate_skip_list($arch, '?');\n  +my $skip = generate_skip_list($arch, '0');\n  +\n  my $output = \u003c\u003c 'END_OUTPUT';\n  1\n  4\n  @@ -94,40 +174,65 @@\n  1.12589990684262e+15\n  END_OUTPUT\n\n-# execute t/native_pbc/number_1.pbc\n+# test_pbc_number(1, \"i386 8-byte double float, 32 bit opcode_t\");\n+sub test_pbc_number {\n-    my $id   = shift;\n-    my $desc = shift;\n-    my $cvt = \"$archtest[$id-1]=\u003e$arch\";\n-    my $skip_msg;\n-    # check if this a platform where we can produce the needed file\n-    if ($archtest[$id-1] eq $arch) {\n-        $skip_msg = \"Want to help? Regenerate t/native_pbc/number_$id.pbc \"\n-          . \"with tools/dev/mk_native_pbc --noconf\";\n-    }\n-    else {\n-        $skip_msg  = \"t/native_pbc/number_$id.pbc is outdated. \"\n-          . \"Need $archtest[$id-1] platform.\";\n-    }\n-    # check if skip or todo\n-  SKIP: {\n-    if ( $skip-\u003e{$id} ) {\n-        skip \"$cvt not yet implemented\", 1\n-    }\n-    elsif ( $todo-\u003e{$id} ) {\n-        skip $skip_msg, 1\n-          if ($bc ne bc_version(\"t/native_pbc/number_$id.pbc\"));\n-        pbc_output_is( undef, $output, \"$cvt $desc\",\n-                       todo =\u003e \"$cvt yet untested, TT #357. \"\n-                       . \"Please report success.\" );\n-    }\n-    else {\n-        skip $skip_msg, 1\n-          if ($bc ne bc_version(\"t/native_pbc/number_$id.pbc\"));\n-        pbc_output_is( undef, $output, \"$cvt $desc\" );\n-    }\n-  }\n  +}\n  +\n  +# execute t/native_pbc/number_*.pbc\n  #\n  # any ordinary intel 386 linux, cygwin, mingw, MSWin32, ...\n  # HEADER =\u003e [\n  #         wordsize  = 4   (interpreter's wordsize/INTVAL = 4/4)\n  #         byteorder = 0   (interpreter's byteorder       = 0)\n  #         floattype = 0   (interpreter's NUMVAL_SIZE     = 8)\n  -#         parrot-version 0.9.0, bytecode-version 3.34\n  +#         parrot-version 0.9.1, bytecode-version 3.36\n  #         UUID type = 0, UUID size = 0\n  #         no endianize, no opcode, no numval transform\n  #         dirformat = 1\n  # ]\n  -TODO: {\n-    local $TODO;\n-    if ($PConfig{ptrsize} == 8) {\n-        $TODO = \"Known problem on 64bit with reading 32bit dirs. See TT #254\"\n-    } elsif ($PConfig{DEVEL}) {\n-        $TODO = \"devel versions are not guaranteed to succeed\";\n\n## \\-    }\n\n-pbc_output_is( undef, $output, \"i386 double float 32 bit opcode_t\" )\n-    or diag \"May need to regenerate t/native_pbc/number_1.pbc; read test file\";\n  +test_pbc_number(1, \"i386 8-byte double float, 32 bit opcode_t\");\n  \n  # HEADER =\u003e [\n  \n  # wordsize  = 4   (interpreter's wordsize/INTVAL = 4/4)\n  \n  # byteorder = 0   (interpreter's byteorder       = 0)\n  \n  # floattype = 1   (interpreter's NUMVAL_SIZE     = 12)\n  \n  -#         parrot-version 0.9.0, bytecode-version 3.34\n  +#         parrot-version 0.9.1, bytecode-version 3.36\n  \n  # UUID type = 0, UUID size = 0\n  \n  # no endianize, no opcode, no numval transform\n  \n  # dirformat = 1\n  \n  # ]\n  \n  -pbc_output_is( undef, $output, \"i386 long double float 32 bit opcode_t\")\n-    or diag \"May need to regenerate t/native_pbc/number_2.pbc; read test file\";\n  +test_pbc_number(2, \"i386 12-byte long double float, 32 bit opcode_t\");\n  \n  # darwin/ppc:\n  \n  # HEADER =\u003e [\n  \n  @@ -139,34 +244,21 @@\n  \n  # no endianize, no opcode, no numval transform\n  \n  # dirformat = 1\n  \n  # ]\n  \n  ## \n  \n  -pbc_output_is(undef, $output, \"PPC double float 32 bit BE opcode_t\")\n-    or diag \"May need to regenerate t/native_pbc/number_3.pbc; read test file\";\n  -}\n  -\n  -TODO: {\n-    local $TODO;\n-    if ($PConfig{ptrsize} == 4) {\n-        $TODO = \"Known problem on 32bit with reading 64bit dirs. See TT #254\"\n-        # Unknown PMC type to thaw 0\n-    } elsif ($PConfig{DEVEL}) {\n-        $TODO = \"devel versions are not guaranteed to succeed\";\n-    }\n  +test_pbc_number(3, \"PPC double float 32 bit BE opcode_t\");\n  \n  # any ordinary 64-bit intel unix:\n  \n  # HEADER =\u003e [\n  \n  # wordsize  = 8   (interpreter's wordsize/INTVAL = 8/8)\n  \n  # byteorder = 0   (interpreter's byteorder       = 0)\n  \n  # floattype = 0   (interpreter's NUMVAL_SIZE     = 8)\n  \n  -#         parrot-version 0.9.0, bytecode-version 3.34\n  +#         parrot-version 0.9.1, bytecode-version 3.36\n  \n  # UUID type = 0, UUID size = 0\n  \n  # no endianize, no opcode, no numval transform\n  \n  # dirformat = 1\n  \n  # ]\n  \n  +test_pbc_number(4, \"i86_64 LE 64 bit opcode_t, 8-byte double\");\n\n-pbc_output_is(undef, $output, \"i86_64 LE 64 bit opcode_t, 64 bit intval\")\n\n## \\-    or diag \"May need to regenerate t/native_pbc/number_4.pbc; read test file\";\n\n+# i86_64 with floatval='long double'\n # HEADER =\u003e [\n #         wordsize  = 8   (interpreter's wordsize/INTVAL = 8/8)\n #         byteorder = 0   (interpreter's byteorder       = 0)\n@@ -176,14 +268,22 @@\n #         no endianize, no opcode, no numval transform\n #         dirformat = 1\n # ]\n-pbc_output_is(undef, $output, \"i86_64 LE 64 bit opcode_t, 64 bit intval, long double\")\n-    or diag \"May need to regenerate t/native_pbc/integer_5.pbc; read test file\";\n  +test_pbc_number(5, \"i86_64 LE 64 bit opcode_t, long double\");\n\n-# Formerly there were also a test for:\n-# pbc_output_is(undef, $output, \"big-endian 64-bit irix\")\n-#   or diag \"May need to regenerate t/native_pbc/number_6.pbc; read test file\";\n+# PowerPC64 -m64\n+# HEADER =\u003e [\n+#         wordsize  = 8   (interpreter's wordsize/INTVAL = 8/8)\n+#         byteorder = 1   (interpreter's byteorder       = 0)\n+#         floattype = 0   (interpreter's NUMVAL_SIZE     = 8)\n+#         parrot-version 0.9.1, bytecode-version 3.35\n+#         UUID type = 0, UUID size = 0\n+#         _need_ endianize, no opcode, no numval transform\n+#         dirformat = 1\n+# ]\n+test_pbc_number(6, \"big-endian 64-bit, 8-byte double\");\n\n-}\n+# PowerPC64 --floatval=\"long double\"\n+test_pbc_number(7, \"big-endian 64-bit, 16-byte long double\");\n\n # Local Variables:\n #   mode: cperl\n\n# Index: parrot-svn/t/native_pbc/string.t\n\n--- parrot-svn.orig/t/native_pbc/string.t   2009-02-28 01:01:45.342875000 +0100\n+++ parrot-svn/t/native_pbc/string.t    2009-02-28 11:24:01.000000000 +0100\n@@ -7,6 +7,7 @@\n use lib qw( . lib ../lib ../../lib );\n use Test::More;\n use Parrot::Config;\n+use Parrot::BuildUtil;\n\n use Parrot::Test tests =\u003e 1;\n\n@@ -20,12 +21,12 @@\n\n =head1 DESCRIPTION\n\n-Tests word-size/string/endian-ness for different architectures.\n+Tests word-size/endian-ness for different architectures.\n+TODO: Test foreign charsets and encodings.\n\n-These tests usually only work on releases, not on svn checkouts\n\n## -and if every release has updated native pbc test files.\n\n-See F\u003ctools/dev/mk_native_pbc\u003e to create the platform-specific native pbcs.\n+These tests usually only work on updated native pbc test files.\n+See F\u003ctools/dev/mk_native_pbc\u003e to create the platform-specific\n+native pbcs.\n\n =head1 PLATFORMS\n\n@@ -34,7 +35,8 @@\n   _3   PPC BE 32 bit opcode_t, 32 bit intval (darwin-ppc)\n   _4   x86_64 double float 64 bit opcode_t   (linux-gcc-x86_64, solaris-cc-64int)\n   _5   x86_64 16 bit long double 64 bit opcode_t (linux-gcc-x86_64, solaris-cc-64int)\n-  _6   big-endian 64-bit                     (MIPS irix or similar)\n-  _6   big-endian 64 bit opcode_t, 8 byte double (Sparc64/Solaris, MIPS irix)\n-  _7   big-endian 64 bit opcode_t, 16 byte long double (Sparc64/Solaris, MIPS irix)\n  \n  =cut\n\n@@ -47,11 +49,24 @@\n\n =cut\n\n+sub bc_version($) {\n-    my $f = shift;\n-    my $b;\n-    open my $F, \"\u003c\", \"$f\" or return \"Can't open $f: $!\";\n-    binmode $F;\n-    seek $F, 14, 0;\n-    read $F, $b, 8;\n-    my ($bc_major, $bc_minor) = unpack \"cc\", $b;\n-    return ($bc_major . \".\" . $bc_minor);\n  +}\n  +my ( $bc_major, $bc_minor ) = Parrot::BuildUtil::get_bc_version();\n  +my $bc = ($bc_major . \".\" . $bc_minor);\n  +\n  my $output = \u003c\u003c 'END_OUTPUT';\n  -a2c\n  -Í\n  -Í\n  -a2c\n  +%Ec\n  +Dw\n  +ABCX\n-   X\n  END_OUTPUT\n  \n  # execute t/native_pbc/string_1.pbc\n  \n  @@ -60,30 +75,22 @@\n  \n  # wordsize  = 4   (interpreter's wordsize/INTVAL = 4/4)\n  \n  # byteorder = 0   (interpreter's byteorder       = 0)\n  \n  # floattype = 0   (interpreter's NUMVAL_SIZE     = 8)\n  \n  -#         parrot-version 0.9.0, bytecode-version 3.34\n  +#         parrot-version 0.9.1, bytecode-version 3.36\n  \n  # UUID type = 0, UUID size = 0\n  \n  # no endianize, no opcode, no numval transform\n  \n  # dirformat = 1\n  \n  # ]\n  \n  -TODO: {\n-    local $TODO;\n-    if ($PConfig{ptrsize} == 8) {\n-        $TODO = \"Known problem on 64bit with reading 32bit dirs. See TT #254\"\n-    } elsif ($PConfig{DEVEL}) {\n-        $TODO = \"devel versions are not guaranteed to succeed\";\n-    } else {\n-        $TODO = \"currently broken. See TT #254\";\n\n## \\-    }\n\n## -pbc_output_is( undef, $output, \"i386 32 bit opcode_t, 32 bit intval\" );\n\n-#pbc_output_is( undef, $output, \"i386 32 bit opcode_t, 32 bit intval 12-byte long double\" );\n-#pbc_output_is( undef, $output, \"PPC BE 32 bit opcode_t, 32 bit intval\" );\n-#pbc_output_is( undef, $output, \"i86_64 LE 64 bit opcode_t, 64 bit intval\" );\n-#pbc_output_is( undef, $output, \"i86_64 LE 64 bit opcode_t, 64 bit intval, 16-byte long double\" );\n-#pbc_output_is( undef, $output, \"64bit BE 64 bit opcode_t, 64 bit intval\" );\n+SKIP: {\n-    skip \"Need to regenerate t/native_pbc/string_1.pbc; read test file\", 1\n- ```\n   if ($bc ne bc_version(\"t/native_pbc/string_1.pbc\"));\n  ```\n-    pbc_output_is( undef, $output, \"i386 LE 32 bit opcode_t\" );\n  }\n  +#pbc_output_is( undef, $output, \"i386 LE 32 bit opcode_t, 12-byte long double\" );\n  +#pbc_output_is( undef, $output, \"PPC BE 32 bit opcode_t\" );\n  +#pbc_output_is( undef, $output, \"i86_64 LE 64 bit opcode_t\" );\n  +#pbc_output_is( undef, $output, \"i86_64 LE 64 bit opcode_t, 16-byte long double\" );\n  +#pbc_output_is( undef, $output, \"64bit BE 64 bit opcode_t\" );\n  \n  # Local Variables:\n  \n  # mode: cperl\n  \n  # Index: parrot-svn/tools/dev/mk_native_pbc\n  \n  --- parrot-svn.orig/tools/dev/mk_native_pbc 2009-02-28 01:01:45.452875000 +0100\n  +++ parrot-svn/tools/dev/mk_native_pbc  2009-02-28 10:22:34.171875000 +0100\n  @@ -51,7 +51,7 @@\n           # try --floatval=\"long double\" and see if that makes 12\n           enable_long_double=1\n           # force double on 2nd run not to default to long double\n-            conf=\" --floatval='double'\"\n-            conf=\" --floatval=double\"\n       fi\n   else\n       if [ \"$byteorder\" == \"4321\" ]\n  @@ -83,14 +83,24 @@\n               # try --floatval=\"long double\" and see if that makes 16\n               enable_long_double=1\n               # force double on 2nd run not to default to long double\n-                conf=\" --floatval='double'\"\n-                conf=\" --floatval=double\"\n           else\n               N=5\n-                echo \"5: x86_64 double float 64 bit opcode_t, 16-byte long double\"\n-                echo \"5: x86_64 64 bit opcode_t, 16-byte long double\"\n           fi\n       else\n-            N=6\n-            echo \"6: big-endian 64-bit\"\n-            if [ \"$numvalsize\" == \"8\" ]\n-            then\n-                N=6\n-                echo \"6: big-endian 64-bit\"\n-                # try --floatval=\"long double\" and see if that makes 16\n-                enable_long_double=1\n-                # force double on 2nd run not to default to long double\n-                conf=\" --floatval=double\"\n-            else\n-                N=7\n-                echo \"7: ppc/BE 64 bit opcode_t, 16-byte long double\"\n-            fi\n       fi\n   else\n       echo \"unsupported ptrsize $ptrsize\"\n  Index: parrot-svn/t/op/string.t\n  ===================================================================\n  --- parrot-svn.orig/t/op/string.t   2009-02-18 00:01:52.000000000 +0100\n  +++ parrot-svn/t/op/string.t    2009-02-28 11:25:19.546875000 +0100\n  @@ -2358,6 +2358,7 @@\n  ok 10\n  OUTPUT\n\n+# string_133.pasm, used for t/native_pbc/string.t\n pasm_output_is( \u003c\u003c'CODE', \u003c\u003c'OUTPUT', 'bxors 2' );\n  set S1, \"a2c\"\n  set S2, \"Dw\"\n@@ -2450,6 +2451,7 @@\n\n SKIP: {\n     skip( \"No unicode yet\", 1 );\n-    # This was the previous test used for t/native_pbc/string.t\n   pasm_output_is( \u003c\u003c'CODE', \u003c\u003c'OUTPUT', 'bnots 2' );\n  getstdout P0\n  push P0, \"utf8\"\n\n```\n```","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1235845725,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5ODY=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502986"},"message":"\u003cp\u003e\nnow independent of TT\u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/254\" title=\"bug: pbc compat: t/native_pbc/number.t:  New failure on some platforms (closed: fixed)\"\u003e#254\u003c/a\u003e 64bit fixes\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1235910841,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5ODc=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502987"},"message":"\u003cp\u003e\nApplied as r37045.\n\u003c/p\u003e\n\n\u003cp\u003e\nt/native_pbc/*.pbc need to be regenerated after the PMC deprecations are finished.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1236314239,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5ODg=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502988"},"message":"\u003cp\u003e\nFixed with r37077 and status update with r37077.\nThis is now meaningful, agreed?\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1236563824,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5ODk=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502989"},"message":"\u003cp\u003e\nI have reopened this ticket because you have not addressed the main problem:  The tests done during normal development testing are not the same as those done on a release.  To be specific:  Step 2g of the release manager's guide instructs the release manager to change all the *.pbc files.  Thus the files in the release will not be the ones that were tested.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0c1ee4af33970ee80260d659da672a9306b51181"},"timestamp":1236651237,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5OTA=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502990"},"message":"\u003cp\u003e\nUnfortunately, these tests are not stable or robust enough yet. I'm returning all the t/native_pbc/* tests to their previous skipped state. They will remain skipped until we come up with a more robust testing strategy for bytecode portability.\n\u003c/p\u003e\n\n\u003cp\u003e\nI'll also remove the instructions from the release manager's guide. The release manager's guide represents the group's decisions on a stable, repeatable process for shipping releases. A change that affects the stability of releases must be reviewed by the group.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0c1ee4af33970ee80260d659da672a9306b51181"},"timestamp":1236679417,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5OTE=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502991"},"message":"\u003cp\u003e\nTests skipped in r37254 and release manager guide modified in r37255.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1236930651,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5OTI=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502992"},"message":"\u003cp\u003e\nAllison, please provide arguments about the claim that these tests are not stable or robust enough yet. They are young, but all known tests pass, and some tests on unknown platforms are todo.\n\u003c/p\u003e\n\n\u003cp\u003e\nYour change did not changed it back to the previous skipped state,\nheader was always passing,\nand the skip message says now \"pending robust testing strategy, TT \u003ca class=\"new ticket\" href=\"http://trac.parrot.org/parrot/ticket/357\" title=\"cage: Enable meaningful testing of t/native_pbc/*.t (new)\"\u003e#357\u003c/a\u003e\"\n\u003c/p\u003e\n\n\u003cp\u003e\nHow should a robust test strategy look like?\nGet 100% coverage first? Good. Lets skip all todo tests then for a major release\n(? =\u0026gt; 0)\n\u003c/p\u003e\n\n\u003cp\u003e\nBut disabling these tests will not lead to more robust tests, it will lead to less coverage, less robust tests, with the same bugs in core.\nI've added the previous state commented out, so that at least willing parties\ncan help in adding test coverage.\n\u003c/p\u003e\n\n\u003cp\u003e\nGood that the release_manager guide was changed, because the wrong tool broke the tests in 0.9.1 and it is not needed anyway.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0c1ee4af33970ee80260d659da672a9306b51181"},"timestamp":1236952932,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5OTM=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502993"},"message":"\u003cp\u003e\nAll the native_pbc tests were skipped until you unskipped them 6 months ago. They will all remain skipped.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe tests that we run on the repository in the weeks (and months) before the release must give an accurate measure of whether the tests will pass in the released tarball. In the current process, platform testing before the release is rendered meaningless by fundamental changes to what's tested, made just before the tarball is created. That's simply not acceptable.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1236971578,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5OTQ=","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-3502994"},"message":"\u003cp\u003e\nThere was discussion on the parrot-dev list about this, expanding on the point I repeatedly tried to make above. Here's one specific reference: \u003ca   href=\"http://lists.parrot.org/pipermail/parrot-dev/2009-March/001727.html\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003ehttp://lists.parrot.org/pipermail/parrot-dev/2009-March/001727.html\u003c/a\u003e.  This was the state as of 4 days ago, a mere 8 days before the 1.0 release.\n\u003c/p\u003e\n\n\u003cp\u003e\nFrom your reply at\n\u003ca   href=\"http://lists.parrot.org/pipermail/parrot-dev/2009-March/001730.html\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003ehttp://lists.parrot.org/pipermail/parrot-dev/2009-March/001730.html\u003c/a\u003e, it is not clear to me whether or not the tests have been redesigned.  It \u003ci\u003ewas\u003c/i\u003e clear to me that although you had marked the problem as \"fixed\", the main issue was most definitely not fixed.\n\u003c/p\u003e\n\n\u003cp\u003e\nIt may be that the tests have been redesigned now. I don't know. It is too late for this release, in my opinion. The t/native_pbc/*.pbc files keep changing.  There isn't time prior to release to give them wide testing, fix any issues, and give those fixes wide testing.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1416583985,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYzOTg2MTk0","github-url":"https://github.com/parrot/parrot/issues/394#issuecomment-63986194"},"message":"The tests were redesigned, they are stable and pass since ages","files":null},{"type":4,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1416583985,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTk2ODMxNTcw"},"status":2}]}