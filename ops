{"version":1,"ops":[{"type":3,"author":{"id":"31add63544eae97eedfa22a00d452c0559f0a395"},"timestamp":1239968972,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM1MTQ=","github-url":"https://github.com/parrot/parrot/issues/541#issuecomment-3503514"},"message":"3447 byte attachment from wayland\nat http://trac.parrot.org/parrot/raw-attachment/ticket/560/parrot_libloading_2.patch\n\n# ```Index: src/library.c\n\n--- src/library.c   (revision 38159)\n+++ src/library.c   (working copy)\n@@ -768,6 +768,65 @@\n\n /*\n\n+=item C\u003cSTRING* Parrot_path_str\u003e\n+\n+Returns a STRING that contains the specified path, separated by colons (:).  \n+\n+The C\u003cenum_runtime_ft type\u003e is one or more of the types defined in\n+F\u003cinclude/parrot/library.h\u003e.\n+\n+=cut\n+\n+_/\n+\n+PARROT_EXPORT\n+PARROT_WARN_UNUSED_RESULT\n+PARROT_CAN_RETURN_NULL\n+STRING_\n+Parrot_path_str(PARROT_INTERP, enum_runtime_ft type)\n+{\n-    ASSERT_ARGS(Parrot_path_str)\n-    STRING *prefix;\n-    STRING *full_path;\n-    PMC    *paths;\n-    INTVAL  i, n;\n  +\n  +/\\* TODO: Get the real separator, not this hacked-together stuff */\n  +#ifdef WIN32\n-    STRING \\* const envpathsep = CONST_STRING(interp, \";\"); \n  +#else\n-    STRING \\* const envpathsep = CONST_STRING(interp, \":\");\n  +#endif\n  +\n-    if (type \u0026 PARROT_RUNTIME_FT_DYNEXT)\n-        paths = get_search_paths(interp, PARROT_LIB_PATH_DYNEXT);\n-    else if (type \u0026 (PARROT_RUNTIME_FT_PBC | PARROT_RUNTIME_FT_SOURCE))\n-        paths = get_search_paths(interp, PARROT_LIB_PATH_LIBRARY);\n-    else\n-        paths = get_search_paths(interp, PARROT_LIB_PATH_INCLUDE);\n  +\n-    prefix = Parrot_get_runtime_path(interp);\n-    n = VTABLE_elements(interp, paths);\n  +\n-    for (i = 0; i \u003c n; ++i) {\n-        STRING \\* const path = VTABLE_get_string_keyed_int(interp, paths, i);\n-        STRING *found_name;\n  +\n-        if ( 0 == i ) {\n-            full_path = Parrot_str_copy(interp, path);\n-        } else {\n-            if(path) {\n-                full_path = Parrot_str_append(interp, full_path, envpathsep);\n-                full_path = Parrot_str_append(interp, full_path, path);\n-            }\n-        }\n-    }\n  +\n-    return full_path;\n  +}\n  +\n  +/*\n  +\n  =item C\u003cchar* Parrot_get_runtime_prefix(PARROT_INTERP)\u003e\n  \n  Return a malloced C-string for the runtime prefix.  The calling function\n  \n  # Index: src/dynext.c\n  \n  --- src/dynext.c    (revision 38159)\n  +++ src/dynext.c    (working copy)\n  @@ -620,8 +620,18 @@\n       /*\n        \\* XXX Parrot_ex_throw_from_c_args? return PMCNULL?\n        \\* PMC Undef seems convenient, because it can be queried with get_bool()\n-         \\* --\n-         \\* Changed to Parrot_ex_throw_from_c_args because silently continuing and\n-         \\* giving weird errors later is not a cool look - wayland/Tim Nelson\n        */\n-        return pmc_new(interp, enum_class_Undef);\n-        /\\* return pmc_new(interp, enum_class_Undef); */\n  +\n-        path = Parrot_path_str(interp, PARROT_RUNTIME_FT_DYNEXT);\n  +\n-        Parrot_ex_throw_from_c_args(interp, NULL,\n-                EXCEPTION_LIBRARY_ERROR,\n-                \"Parrot VM: Can't load library '%s'; searched path %s\\n\", \n- ```\n             wo_ext-\u003estrstart, path-\u003estrstart);\n  ```\n  \n   }\n  \n   return run_init_lib(interp, handle, lib_name, wo_ext);\n  \n  # Index: include/parrot/library.h\n  \n  --- include/parrot/library.h    (revision 38159)\n  +++ include/parrot/library.h    (working copy)\n  @@ -83,6 +83,13 @@\n       **attribute__nonnull**(2)\n       FUNC_MODIFIES(*file);\n\n+PARROT_EXPORT\n+PARROT_WARN_UNUSED_RESULT\n+PARROT_CAN_RETURN_NULL\n+STRING\\* Parrot_path_str(PARROT_INTERP,\n-    enum_runtime_ft type)\n-        **attribute__nonnull**(1);\n  +\n  void parrot_init_library_paths(PARROT_INTERP)\n         **attribute__nonnull**(1);\n\n```\n```","files":null},{"type":3,"author":{"id":"31add63544eae97eedfa22a00d452c0559f0a395"},"timestamp":1239986972,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM1MTU=","github-url":"https://github.com/parrot/parrot/issues/541#issuecomment-3503515"},"message":"\u003cp\u003e\nCode to show path during error while loading library\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"31add63544eae97eedfa22a00d452c0559f0a395"},"timestamp":1240007001,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM1MTY=","github-url":"https://github.com/parrot/parrot/issues/541#issuecomment-3503516"},"message":"\u003cp\u003e\nUpdated patch, thanks to changes suggested by bacek, and help from others.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1240008587,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM1MTc=","github-url":"https://github.com/parrot/parrot/issues/541#issuecomment-3503517"},"message":"\u003cp\u003e\nThe format %S is obsolete, you must use %Ss\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"31add63544eae97eedfa22a00d452c0559f0a395"},"timestamp":1240017364,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM1MTg=","github-url":"https://github.com/parrot/parrot/issues/541#issuecomment-3503518"},"message":"2952 byte attachment from wayland\nat http://trac.parrot.org/parrot/raw-attachment/ticket/560/parrot_libloading_3.patch\n\n# ```Index: src/library.c\n\n--- src/library.c   (revision 38159)\n+++ src/library.c   (working copy)\n@@ -768,6 +768,50 @@\n\n /*\n\n+=item C\u003cSTRING* Parrot_path_str\u003e\n+\n+Returns a STRING that contains the specified path, separated by colons (:).  \n+\n+The C\u003cenum_runtime_ft type\u003e is one or more of the types defined in\n+F\u003cinclude/parrot/library.h\u003e.\n+\n+=cut\n+\n+_/\n+\n+PARROT_EXPORT\n+PARROT_WARN_UNUSED_RESULT\n+PARROT_CAN_RETURN_NULL\n+STRING_\n+Parrot_path_str(PARROT_INTERP, enum_runtime_ft type)\n+{\n-    ASSERT_ARGS(Parrot_path_str)\n-    STRING *prefix;\n-    STRING *full_path;\n-    PMC    *paths;\n-    INTVAL  i, n;\n  +\n  +/\\* TODO: Get the real separator, not this hacked-together stuff */\n  +#ifdef WIN32\n-    STRING \\* const envpathsep = CONST_STRING(interp, \";\"); \n  +#else\n-    STRING \\* const envpathsep = CONST_STRING(interp, \":\");\n  +#endif\n  +\n-    if (type \u0026 PARROT_RUNTIME_FT_DYNEXT)\n-        paths = get_search_paths(interp, PARROT_LIB_PATH_DYNEXT);\n-    else if (type \u0026 (PARROT_RUNTIME_FT_PBC | PARROT_RUNTIME_FT_SOURCE))\n-        paths = get_search_paths(interp, PARROT_LIB_PATH_LIBRARY);\n-    else\n-        paths = get_search_paths(interp, PARROT_LIB_PATH_INCLUDE);\n  +\n-    full_path = Parrot_str_join(interp, envpathsep, paths);\n  +\n-    return full_path;\n  +}\n  +\n  +/*\n  +\n  =item C\u003cchar* Parrot_get_runtime_prefix(PARROT_INTERP)\u003e\n  \n  Return a malloced C-string for the runtime prefix.  The calling function\n  \n  # Index: src/dynext.c\n  \n  --- src/dynext.c    (revision 38159)\n  +++ src/dynext.c    (working copy)\n  @@ -620,8 +620,18 @@\n       /*\n        \\* XXX Parrot_ex_throw_from_c_args? return PMCNULL?\n        \\* PMC Undef seems convenient, because it can be queried with get_bool()\n-         \\* --\n-         \\* Changed to Parrot_ex_throw_from_c_args because silently continuing and\n-         \\* giving weird errors later is not a cool look - wayland/Tim Nelson\n        */\n-        return pmc_new(interp, enum_class_Undef);\n-        /\\* return pmc_new(interp, enum_class_Undef); */\n  +\n-        path = Parrot_path_str(interp, PARROT_RUNTIME_FT_DYNEXT);\n  +\n-        Parrot_ex_throw_from_c_args(interp, NULL,\n-                EXCEPTION_LIBRARY_ERROR,\n-                \"Parrot VM: Can't load library '%Ss'; searched path %Ss\\n\", \n- ```\n             wo_ext, path);\n  ```\n  \n   }\n  \n   return run_init_lib(interp, handle, lib_name, wo_ext);\n  \n  # Index: include/parrot/library.h\n  \n  --- include/parrot/library.h    (revision 38159)\n  +++ include/parrot/library.h    (working copy)\n  @@ -83,6 +83,13 @@\n       **attribute__nonnull**(2)\n       FUNC_MODIFIES(*file);\n\n+PARROT_EXPORT\n+PARROT_WARN_UNUSED_RESULT\n+PARROT_CAN_RETURN_NULL\n+STRING\\* Parrot_path_str(PARROT_INTERP,\n-    enum_runtime_ft type)\n-        **attribute__nonnull**(1);\n  +\n  void parrot_init_library_paths(PARROT_INTERP)\n         **attribute__nonnull**(1);\n\n```\n```","files":null},{"type":3,"author":{"id":"31add63544eae97eedfa22a00d452c0559f0a395"},"timestamp":1240035364,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM1MTk=","github-url":"https://github.com/parrot/parrot/issues/541#issuecomment-3503519"},"message":"\u003cp\u003e\nUpdated patch with improvements\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"31add63544eae97eedfa22a00d452c0559f0a395"},"timestamp":1240035461,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM1MjA=","github-url":"https://github.com/parrot/parrot/issues/541#issuecomment-3503520"},"message":"\u003cp\u003e\nFixed what NotFound mentioned.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0cd3b02130a8b42e1ef2ea26b102fedb4bb839e4"},"timestamp":1240091141,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM1MjE=","github-url":"https://github.com/parrot/parrot/issues/541#issuecomment-3503521"},"message":"\u003cp\u003e\nThanks for the patches!\n\u003c/p\u003e\n\n\u003cp\u003e\nAfter discussing this with you on IRC and reading through some of the code, I'm trying to figure out whether this is the right approach.  Some input from the parrot designers and/or HLL guys would help.  Some more specifics on the motivation for this patch would also help; can you provide a test case, or details on how to reproduce your silent failure?\n\u003c/p\u003e\n\n\u003cp\u003e\nThere's a comment in Parrot_load_lib:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e        /*\n         \\* XXX Parrot_ex_throw_from_c_args? return PMCNULL?\n         \\* PMC Undef seems convenient, because it can be queried with get_bool()\n         */\n\u003c/pre\u003e\u003cp\u003e\nThat seems to indicate a lack of clear design choice about how to report failure.  If it's still an open question, I think throwing an exception here (as your patch does) might be the right choice, if only because this code has better knowledge of what the search path was, and thus it can generate a more useful error message than the callers might.\n\u003c/p\u003e\n\n\u003cp\u003e\nSo, tentative +1 from me.\n\u003c/p\u003e\n\n\u003cp\u003e\nMark\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0c1ee4af33970ee80260d659da672a9306b51181"},"timestamp":1240209794,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM1MjI=","github-url":"https://github.com/parrot/parrot/issues/541#issuecomment-3503522"},"message":"\u003cp\u003e\nThanks for the patch!\n\u003c/p\u003e\n\n\u003cp\u003e\nAgreed on throwing an exception. Exceptions used to be difficult to handle, so some of the core code avoided them. The direction we're headed now is towards exceptions for this kind of failure.\n\u003c/p\u003e\n\n\u003cp\u003e\nSince this is a fundamental change to the behavior of a core (and commonly used) opcode, it will need a full deprecation cycle. If a deprecation notice is entered now, the change could be made after the 1.4 release in July. That gives HLL developers a chance to try it out and see if it is likely to cause them any problems.\n\u003c/p\u003e\n\n\u003cp\u003e\nAgreed with Mark that it would be helpful if you'd provide more details on the \"silent failure\" you mention, and a test case or example code. This change is a good one to make, but there may be other aspects to the problem that this patch doesn't address.\n\u003c/p\u003e\n\n\u003cp\u003e\nAnd, while we wait on deprecation cycles, feedback from HLL developers, and more information on the failure, there's some work you can do on the patch. 'Parrot_path_str' needs a better name, to indicate that it's preparing a printable string of the current search paths. Something like 'Parrot_lib_search_paths_as_string'. ('lib' being the subsystem identifier required by the coding conventions.) This function can be added now, and doesn't have to wait until after 1.4, so submit it as a separate patch.\n\u003c/p\u003e\n\n\u003cp\u003e\nGeneral stylistic/coding convention changes:\n\u003c/p\u003e\n\n\u003cul\u003e\u003cli\u003eDon't include a comment to say that X or Y has changed, comments should describe the current state of the code. In this case, you can just delete the comment, which was a TODO.\n\u003c/li\u003e\u003cli\u003eDon't include your name in comments, though you can mention the patch in CREDITS if you want to.\n\u003c/li\u003e\u003cli\u003eDo update the documentation for the function when the behavior changes. In this case there is a mention of throwing an exception, so you just need to expand the cases listed.\n\u003c/li\u003e\u003cli\u003eRemove old code (the \"return pmc_new\" line) rather than commenting it out. In this case, I expect you left in the commented code to make it easier to review, so this is a \"change before applying the patch\".\n\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\nThanks!\nAllison\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"31add63544eae97eedfa22a00d452c0559f0a395"},"timestamp":1242801005,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM1MjM=","github-url":"https://github.com/parrot/parrot/issues/541#issuecomment-3503523"},"message":"2109 byte attachment from wayland\nat http://trac.parrot.org/parrot/raw-attachment/ticket/560/parrot_path_str.patch\n\n# ```Index: src/library.c\n\n--- src/library.c   (revision 38159)\n+++ src/library.c   (working copy)\n@@ -768,6 +768,50 @@\n\n /*\n\n+=item C\u003cSTRING* Parrot_lib_search_paths_as_string\u003e\n+\n+Returns a STRING that contains the specified search path, separated by colons (:).  \n+\n+The C\u003cenum_runtime_ft type\u003e is one or more of the types defined in\n+F\u003cinclude/parrot/library.h\u003e.\n+\n+=cut\n+\n+_/\n+\n+PARROT_EXPORT\n+PARROT_WARN_UNUSED_RESULT\n+PARROT_CAN_RETURN_NULL\n+STRING_\n+Parrot_lib_search_paths_as_string(PARROT_INTERP, enum_runtime_ft type)\n+{\n-    ASSERT_ARGS(Parrot_lib_search_paths_as_string)\n-    STRING *prefix;\n-    STRING *full_search_path;\n-    PMC    *paths;\n-    INTVAL  i, n;\n  +\n  +/\\* TODO: Get the real separator, not this hacked-together stuff */\n  +#ifdef WIN32\n-    STRING \\* const env_search_path_sep = CONST_STRING(interp, \";\"); \n  +#else\n-    STRING \\* const env_search_path_sep = CONST_STRING(interp, \":\");\n  +#endif\n  +\n-    if (type \u0026 PARROT_RUNTIME_FT_DYNEXT)\n-        paths = get_search_paths(interp, PARROT_LIB_PATH_DYNEXT);\n-    else if (type \u0026 (PARROT_RUNTIME_FT_PBC | PARROT_RUNTIME_FT_SOURCE))\n-        paths = get_search_paths(interp, PARROT_LIB_PATH_LIBRARY);\n-    else\n-        paths = get_search_paths(interp, PARROT_LIB_PATH_INCLUDE);\n  +\n-    full_search_path = Parrot_str_join(interp, env_search_path_sep, paths);\n  +\n-    return full_search_path;\n  +}\n  +\n  +/*\n  +\n  =item C\u003cchar* Parrot_get_runtime_prefix(PARROT_INTERP)\u003e\n  \n  Return a malloced C-string for the runtime prefix.  The calling function\n  \n  # Index: include/parrot/library.h\n  \n  --- include/parrot/library.h    (revision 38159)\n  +++ include/parrot/library.h    (working copy)\n  @@ -83,6 +83,13 @@\n       **attribute__nonnull**(2)\n       FUNC_MODIFIES(*file);\n\n+PARROT_EXPORT\n+PARROT_WARN_UNUSED_RESULT\n+PARROT_CAN_RETURN_NULL\n+STRING\\* Parrot_lib_search_paths_as_string(PARROT_INTERP,\n-    enum_runtime_ft type)\n-        **attribute__nonnull**(1);\n  +\n  void parrot_init_library_paths(PARROT_INTERP)\n         **attribute__nonnull**(1);\n\n```\n```","files":null},{"type":3,"author":{"id":"31add63544eae97eedfa22a00d452c0559f0a395"},"timestamp":1242819107,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM1MjQ=","github-url":"https://github.com/parrot/parrot/issues/541#issuecomment-3503524"},"message":"\u003cp\u003e\nOk, I've attached the \"separate patch\" that Allison mentioned.  Let me know if there are problems with it.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1301301375,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM1MjU=","github-url":"https://github.com/parrot/parrot/issues/541#issuecomment-3503525"},"message":"\u003cp\u003e\nwhiteknight,\n\u003c/p\u003e\n\n\u003cp\u003e\nIs the patch submitted by wayland still under consideration?\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1301341903,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM1MjY=","github-url":"https://github.com/parrot/parrot/issues/541#issuecomment-3503526"},"message":"\u003cp\u003e\nYes, this patch does still look viable. I don't know if changing this behavior warrants a deprecation cycle. The argument can be made that this would be a bug fix, not a behavior change.\n\u003c/p\u003e\n\n\u003cp\u003e\nWe can bring it up at the next #ps (I probably won't attend, somebody else can mention it for me).\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1310235562,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM1Mjc=","github-url":"https://github.com/parrot/parrot/issues/541#issuecomment-3503527"},"message":"\u003cp\u003e\nI applied the most recent patch with Parrot_lib_search_paths_as_string. That function isn't wired in yet, but we will find use for it.\n\u003c/p\u003e\n\n\u003cp\u003e\nI'm not going to apply any other patches from this ticket yet, because I am trying to deprecate the current load_bytecode op and replace it with a more full-featured alternative. The new version will certainly throw exceptions instead of silent failures, so if the user wants non-bad behavior they can upgrade.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1310235851,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM1Mjg=","github-url":"https://github.com/parrot/parrot/issues/541#issuecomment-3503528"},"message":"\u003cp\u003e\nI proposed the load_bytecode op for deprecation in \u003ca class=\"new ticket\" href=\"http://trac.parrot.org/parrot/ticket/2146\" title=\"deprecation: Deprecate load_bytecode op (new)\"\u003e#2146\u003c/a\u003e. If that deprecation is accepted, I'll close this ticket and redirect all further information there.\n\u003c/p\u003e","files":null}]}