{"version":1,"ops":[{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1455524511,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE4NDEwODY5Mg==","github-url":"https://github.com/parrot/parrot/issues/1006#issuecomment-184108692"},"message":"`docs/pdds/pdd27_multiple_dispatch.pod` describes \"multiple dispatch\" correctly, dispatching on the types of \"all\" arguments. This is what perl6 wants. However, parrot does not implement \"multiple dispatch\" internally, it is implemented in the nqp level of perl6 instead, with the help of parrots MultiSub PMC.\n\nThe docs mentions that:\n\"Parrot has a single multiple dispatch system, used at the HLL level and\ninternally. {{NOTE: I appreciate the history that led us to have two largely\nindependent MMD systems, but it will cause problems down the road, if we don't\nfix it now.}}\n\nThe heart of the system is the MultiSub PMC. All multiple dispatch routines\nare MultiSub PMCs, subclasses of MultiSub, or polymorphic equivalents of\nMultiSub. Calls to multiple dispatch routines use the Parrot calling\nconventions.\"\n\nFor binary dispatch in certain internal arithmetic binops\nparrot uses src/multidispatch.c which is also documented as such.\n\nThere's no terminology abuse, it is correctly documented.","files":null},{"type":4,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1455524511,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50NTUwMzU3MDgx"},"status":2}]}