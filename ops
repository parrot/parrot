{"version":1,"ops":[{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1250342464,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzMzA=","github-url":"https://github.com/parrot/parrot/issues/481#issuecomment-3503330"},"message":"\u003cp\u003e\nThere is an implementation of MT19937 in runtime/parrot/library/Math/Random/mt19937ar.pir which also ships with a .pbc .\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1250365767,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzMzE=","github-url":"https://github.com/parrot/parrot/issues/481#issuecomment-3503331"},"message":"\u003cp\u003e\nThe Mersenne twister is a good algorithm to use (and if we already have an implementation, all the better). However, It's certainly not the \"best\" algorithm to use and has a relatively complicated implementation. Something like MWC or CMWC would generate numbers faster and be easier to implement. Also the numbers should be of the same quality or higher.\n\u003c/p\u003e\n\n\u003cp\u003e\nFor cryptographic applications we might want to have something like the Blum Blum Shub algorithm.\n\u003c/p\u003e\n\n\u003cp\u003e\nSo what I am saying is, basically, that maybe we should design our randomization interface to support multiple user-selectable back-ends (with a sane default like the Mersenne Twister or CMWC).\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1309667039,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzMzI=","github-url":"https://github.com/parrot/parrot/issues/481#issuecomment-3503332"},"message":"\u003cp\u003e\nwhiteknight, dukeleto: Can we get an update on the status of this ticket?\n\u003c/p\u003e\n\n\u003cp\u003e\nThanks.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1309671339,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzMzM=","github-url":"https://github.com/parrot/parrot/issues/481#issuecomment-3503333"},"message":"\u003cp\u003e\nThis would be nice but is fairly low-priority.  I'd accept (or provide feedback) on a patch.  Since this ticket was filed, I'm not aware of any work having been done.\n\u003c/p\u003e\n\n\u003cp\u003e\nIt also strikes me as a red herring to say that users of other languages will expect a higher quality of randomness.  Users who require high-quality randomness will know to inspect the source and/or documentation to find out what PRNG is being used, if necessary implementing their own PRNG*.  Users who don't need high-quality randomness will generally be happy with a PRNG that's not obviously predictable.\n\u003c/p\u003e\n\n\u003cp\u003e\n[*] I don't intend this to mean that such users are stuck with rolling their own as the only possibility.  If they show up here, on parrot-dev or on #parrot and demonstrate that someone who needs high-quality randomness exists, this ticket will become a higher priority.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1336595257,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU2MTA3MjQ=","github-url":"https://github.com/parrot/parrot/issues/481#issuecomment-5610724"},"message":"After doing a lot of thinking about this issue, I feel like I want to close it as WONTFIX. Different PRNG algorithms have different needs and different interfaces, and attempting to abstract away those differences in general is hard. Trying to abstract them away behind something as unweildy as a dynoplib is even harder. It might not be possible to do it in a way that one user finds acceptable, much less all users.\n\nTake for example the case of a simple uniform PRNG like the Mersenne Twister (which Rosella provides an implementation of). That PRNG requires a seed value, and can return integers from int_min to int_max with uniform probability. However, take something like a Box-Muller generator for normal distributed numbers. That is going to need to take a standard deviation and a mean along with a seed, and it's probably going to want to return floats or pairs of floats with different output characteristics.\n\nAnd different algorithms are going to have different preferences about whether we occasionally re-seed them, or occasionally introduce new sources of entropy, or make no modifications and let the algorithm take care of everything after the initial seed.\n\nA system that needs random numbers is going to need to know what algorithm it prefers and write a wrapper for that specific interface. It's going to need to know what kinds of input values are required and what kinds of output values are expected in return. Having two opcodes like `srand` and `rand` and expecting to be able to jam multiple different algorithms behind that interface is madness. \n\nShould we have multiple different implementations of PRNG available, either in core or elsewhere in the ecosystem? Yes. We shouldn't be doing it in a dynop and we shouldn't expect any kind of easily \"pluggable\" abstracted interface.\n\nI suggest we WONTFIX this ticket, and work on the individual implementation issues separately.","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1336597630,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU2MTE3NzQ=","github-url":"https://github.com/parrot/parrot/issues/481#issuecomment-5611774"},"message":"This is very sensible.  dynops are powerful enough that a reasonably efficient highly-customized PRNG can be implemented in terms of them, either as a one-off project or as part of a specialized library.  Parrot provides a mechanism that's usually random enough for general use.  A fully general interface doesn't make sense as a core thing, except as part of a hypothetical core math library.\n\n+1 to not fixing","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1336602610,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU2MTM1NzA=","github-url":"https://github.com/parrot/parrot/issues/481#issuecomment-5613570"},"message":"+1 to WONTFIX. Making it happen.","files":null}]}