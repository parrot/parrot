{"version":1,"ops":[{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1267090993,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NDE=","github-url":"https://github.com/parrot/parrot/issues/580#issuecomment-3503641"},"message":"\u003cp\u003e\nThis should be fixed as of r44467. Will close after testing further.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1267183098,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NDI=","github-url":"https://github.com/parrot/parrot/issues/580#issuecomment-3503642"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1479#comment:1\" title=\"Comment 1 for Ticket #1479\"\u003ewhiteknight\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n This should be fixed as of r44467. Will close after testing further.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nIs there any test we could write that would demonstrate the problem and the solution?\n\u003c/p\u003e\n\n\u003cp\u003e\nThanks.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aa8915ba52969f979af836ca4704fd27e613004f"},"timestamp":1267208147,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NDM=","github-url":"https://github.com/parrot/parrot/issues/580#issuecomment-3503643"},"message":"11150 byte attachment from aghast\nat http://trac.parrot.org/parrot/raw-attachment/ticket/1479/random-range.t\n\n```\n#! parrot\n# Copyright (C) 2010, Parrot Foundation.\n# $Id:  $\n\n=head1 NAME\n\nt/dynoplibs/random-range.t - Tests random range behavior of math_ops lib.\n\n=head1 SYNOPSIS\n\n        % prove t/dynoblibs/random-range.t\n\n=head1 DESCRIPTION\n\nTests random range using chi-square\n\n=cut\n\n.loadlib 'math_ops'\n.sub add_chi2_entry\n    .param pmc table\n    .param int nu\n    .param num p_10\n    .param num p_05\n    .param num p_025\n    .param num p_01\n    .param num p_001\n\n    $P0 = new ['FixedFloatArray']\n    $P0 = 5\n\n    $P0[0] = p_10\n    $P0[1] = p_05\n    $P0[2] = p_025\n    $P0[3] = p_01\n    $P0[4] = p_001\n\n    table[nu] = $P0\n.end\n\n.sub compute_chi_square\n    .param pmc histogram\n    .param int num_samples\n\n    .local int possible_values\n    possible_values = elements histogram\n\n    .local num expected\n    expected = num_samples\n    expected /= possible_values\n\n    .local num K\n    K = 0.0\n\n    $I0 = possible_values\n    if $I0 == 0 goto end\nchi2_loop:\n    dec $I0\n\n    # Compute:  (O - E)^2 / E\n    $N0 = histogram[$I0]\n    $N0 -= expected\n    $N0 *= $N0\n    $N0 /= expected\n\n    K += $N0\n\n    unless $I0 == 0 goto chi2_loop\n\n    #~ print \"Chi-squared K is: \"\n    #~ say K\nend:\n    .return (K)\n.end\n\n.sub make_chi2_table\n    # This info comes from http://itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\n    # Obtained 26 Feb 2010 -- Austin\n\n    #   Probability of exceeding the critical value\n    # nu    0.10    0.05    0.025   0.01    0.001\n\n    .local pmc table\n    table = new ['ResizablePMCArray']\n\n    add_chi2_entry(table, 1, 2.706, 3.841, 5.024, 6.635, 10.828)\n    add_chi2_entry(table, 2, 4.605, 5.991, 7.378, 9.210, 13.816)\n    add_chi2_entry(table, 3, 6.251, 7.815, 9.348, 11.345, 16.266)\n    add_chi2_entry(table, 4, 7.779, 9.488, 11.143, 13.277, 18.467)\n    add_chi2_entry(table, 5, 9.236, 11.070, 12.833, 15.086, 20.515)\n    add_chi2_entry(table, 6, 10.645, 12.592, 14.449, 16.812, 22.458)\n    add_chi2_entry(table, 7, 12.017, 14.067, 16.013, 18.475, 24.322)\n    add_chi2_entry(table, 8, 13.362, 15.507, 17.535, 20.090, 26.125)\n    add_chi2_entry(table, 9, 14.684, 16.919, 19.023, 21.666, 27.877)\n    add_chi2_entry(table, 10, 15.987, 18.307, 20.483, 23.209, 29.588)\n    add_chi2_entry(table, 11, 17.275, 19.675, 21.920, 24.725, 31.264)\n    add_chi2_entry(table, 12, 18.549, 21.026, 23.337, 26.217, 32.910)\n    add_chi2_entry(table, 13, 19.812, 22.362, 24.736, 27.688, 34.528)\n    add_chi2_entry(table, 14, 21.064, 23.685, 26.119, 29.141, 36.123)\n    add_chi2_entry(table, 15, 22.307, 24.996, 27.488, 30.578, 37.697)\n    add_chi2_entry(table, 16, 23.542, 26.296, 28.845, 32.000, 39.252)\n    add_chi2_entry(table, 17, 24.769, 27.587, 30.191, 33.409, 40.790)\n    add_chi2_entry(table, 18, 25.989, 28.869, 31.526, 34.805, 42.312)\n    add_chi2_entry(table, 19, 27.204, 30.144, 32.852, 36.191, 43.820)\n    add_chi2_entry(table, 20, 28.412, 31.410, 34.170, 37.566, 45.315)\n    add_chi2_entry(table, 21, 29.615, 32.671, 35.479, 38.932, 46.797)\n    add_chi2_entry(table, 22, 30.813, 33.924, 36.781, 40.289, 48.268)\n    add_chi2_entry(table, 23, 32.007, 35.172, 38.076, 41.638, 49.728)\n    add_chi2_entry(table, 24, 33.196, 36.415, 39.364, 42.980, 51.179)\n    add_chi2_entry(table, 25, 34.382, 37.652, 40.646, 44.314, 52.620)\n    add_chi2_entry(table, 26, 35.563, 38.885, 41.923, 45.642, 54.052)\n    add_chi2_entry(table, 27, 36.741, 40.113, 43.195, 46.963, 55.476)\n    add_chi2_entry(table, 28, 37.916, 41.337, 44.461, 48.278, 56.892)\n    add_chi2_entry(table, 29, 39.087, 42.557, 45.722, 49.588, 58.301)\n    add_chi2_entry(table, 30, 40.256, 43.773, 46.979, 50.892, 59.703)\n    add_chi2_entry(table, 31, 41.422, 44.985, 48.232, 52.191, 61.098)\n    add_chi2_entry(table, 32, 42.585, 46.194, 49.480, 53.486, 62.487)\n    add_chi2_entry(table, 33, 43.745, 47.400, 50.725, 54.776, 63.870)\n    add_chi2_entry(table, 34, 44.903, 48.602, 51.966, 56.061, 65.247)\n    add_chi2_entry(table, 35, 46.059, 49.802, 53.203, 57.342, 66.619)\n    add_chi2_entry(table, 36, 47.212, 50.998, 54.437, 58.619, 67.985)\n    add_chi2_entry(table, 37, 48.363, 52.192, 55.668, 59.893, 69.347)\n    add_chi2_entry(table, 38, 49.513, 53.384, 56.896, 61.162, 70.703)\n    add_chi2_entry(table, 39, 50.660, 54.572, 58.120, 62.428, 72.055)\n    add_chi2_entry(table, 40, 51.805, 55.758, 59.342, 63.691, 73.402)\n    add_chi2_entry(table, 41, 52.949, 56.942, 60.561, 64.950, 74.745)\n    add_chi2_entry(table, 42, 54.090, 58.124, 61.777, 66.206, 76.084)\n    add_chi2_entry(table, 43, 55.230, 59.304, 62.990, 67.459, 77.419)\n    add_chi2_entry(table, 44, 56.369, 60.481, 64.201, 68.710, 78.750)\n    add_chi2_entry(table, 45, 57.505, 61.656, 65.410, 69.957, 80.077)\n    add_chi2_entry(table, 46, 58.641, 62.830, 66.617, 71.201, 81.400)\n    add_chi2_entry(table, 47, 59.774, 64.001, 67.821, 72.443, 82.720)\n    add_chi2_entry(table, 48, 60.907, 65.171, 69.023, 73.683, 84.037)\n    add_chi2_entry(table, 49, 62.038, 66.339, 70.222, 74.919, 85.351)\n    add_chi2_entry(table, 50, 63.167, 67.505, 71.420, 76.154, 86.661)\n    add_chi2_entry(table, 51, 64.295, 68.669, 72.616, 77.386, 87.968)\n    add_chi2_entry(table, 52, 65.422, 69.832, 73.810, 78.616, 89.272)\n    add_chi2_entry(table, 53, 66.548, 70.993, 75.002, 79.843, 90.573)\n    add_chi2_entry(table, 54, 67.673, 72.153, 76.192, 81.069, 91.872)\n    add_chi2_entry(table, 55, 68.796, 73.311, 77.380, 82.292, 93.168)\n    add_chi2_entry(table, 56, 69.919, 74.468, 78.567, 83.513, 94.461)\n    add_chi2_entry(table, 57, 71.040, 75.624, 79.752, 84.733, 95.751)\n    add_chi2_entry(table, 58, 72.160, 76.778, 80.936, 85.950, 97.039)\n    add_chi2_entry(table, 59, 73.279, 77.931, 82.117, 87.166, 98.324)\n    add_chi2_entry(table, 60, 74.397, 79.082, 83.298, 88.379, 99.607)\n    add_chi2_entry(table, 61, 75.514, 80.232, 84.476, 89.591, 100.888)\n    add_chi2_entry(table, 62, 76.630, 81.381, 85.654, 90.802, 102.166)\n    add_chi2_entry(table, 63, 77.745, 82.529, 86.830, 92.010, 103.442)\n    add_chi2_entry(table, 64, 78.860, 83.675, 88.004, 93.217, 104.716)\n    add_chi2_entry(table, 65, 79.973, 84.821, 89.177, 94.422, 105.988)\n    add_chi2_entry(table, 66, 81.085, 85.965, 90.349, 95.626, 107.258)\n    add_chi2_entry(table, 67, 82.197, 87.108, 91.519, 96.828, 108.526)\n    add_chi2_entry(table, 68, 83.308, 88.250, 92.689, 98.028, 109.791)\n    add_chi2_entry(table, 69, 84.418, 89.391, 93.856, 99.228, 111.055)\n    add_chi2_entry(table, 70, 85.527, 90.531, 95.023, 100.425, 112.317)\n    add_chi2_entry(table, 71, 86.635, 91.670, 96.189, 101.621, 113.577)\n    add_chi2_entry(table, 72, 87.743, 92.808, 97.353, 102.816, 114.835)\n    add_chi2_entry(table, 73, 88.850, 93.945, 98.516, 104.010, 116.092)\n    add_chi2_entry(table, 74, 89.956, 95.081, 99.678, 105.202, 117.346)\n    add_chi2_entry(table, 75, 91.061, 96.217, 100.839, 106.393, 118.599)\n    add_chi2_entry(table, 76, 92.166, 97.351, 101.999, 107.583, 119.850)\n    add_chi2_entry(table, 77, 93.270, 98.484, 103.158, 108.771, 121.100)\n    add_chi2_entry(table, 78, 94.374, 99.617, 104.316, 109.958, 122.348)\n    add_chi2_entry(table, 79, 95.476, 100.749, 105.473, 111.144, 123.594)\n    add_chi2_entry(table, 80, 96.578, 101.879, 106.629, 112.329, 124.839)\n    add_chi2_entry(table, 81, 97.680, 103.010, 107.783, 113.512, 126.083)\n    add_chi2_entry(table, 82, 98.780, 104.139, 108.937, 114.695, 127.324)\n    add_chi2_entry(table, 83, 99.880, 105.267, 110.090, 115.876, 128.565)\n    add_chi2_entry(table, 84, 100.980, 106.395, 111.242, 117.057, 129.804)\n    add_chi2_entry(table, 85, 102.079, 107.522, 112.393, 118.236, 131.041)\n    add_chi2_entry(table, 86, 103.177, 108.648, 113.544, 119.414, 132.277)\n    add_chi2_entry(table, 87, 104.275, 109.773, 114.693, 120.591, 133.512)\n    add_chi2_entry(table, 88, 105.372, 110.898, 115.841, 121.767, 134.746)\n    add_chi2_entry(table, 89, 106.469, 112.022, 116.989, 122.942, 135.978)\n    add_chi2_entry(table, 90, 107.565, 113.145, 118.136, 124.116, 137.208)\n    add_chi2_entry(table, 91, 108.661, 114.268, 119.282, 125.289, 138.438)\n    add_chi2_entry(table, 92, 109.756, 115.390, 120.427, 126.462, 139.666)\n    add_chi2_entry(table, 93, 110.850, 116.511, 121.571, 127.633, 140.893)\n    add_chi2_entry(table, 94, 111.944, 117.632, 122.715, 128.803, 142.119)\n    add_chi2_entry(table, 95, 113.038, 118.752, 123.858, 129.973, 143.344)\n    add_chi2_entry(table, 96, 114.131, 119.871, 125.000, 131.141, 144.567)\n    add_chi2_entry(table, 97, 115.223, 120.990, 126.141, 132.309, 145.789)\n    add_chi2_entry(table, 98, 116.315, 122.108, 127.282, 133.476, 147.010)\n    add_chi2_entry(table, 99, 117.407, 123.225, 128.422, 134.642, 148.230)\n    add_chi2_entry(table, 100, 118.498, 124.342, 129.561, 135.807, 149.449)\n\n    .return (table)\n.end\n\n.sub make_random_hist\n    .param int min\n    .param int max\n    .param int num_samples\n\n    if max \u003e min goto get_pv\n    die \"Max must be \u003e min\"\n\nget_pv:\n    .local int possible_values\n    possible_values = max - min\n    inc possible_values\n\n    .local pmc histogram\n    histogram = new ['FixedIntegerArray']\n    histogram = possible_values\n\n    $I0 = max - min\ninit:\n    histogram[$I0] = 0\n    dec $I0\n    unless $I0 \u003c 0 goto init\n\n    $I0 = num_samples\n    if $I0 == 0 goto loop_done\nloop:\n    .local int random\n    random = rand min, max\n\n    random -= min\n    $I1 = histogram[random]\n    inc $I1\n    histogram[random] = $I1\n\n    dec $I0\n    unless $I0 \u003c= 0 goto loop\nloop_done:\n\n    .return (histogram)\n.end\n\n.sub print_histogram\n    .param pmc histogram\n    .param int num_samples\n\n    .local num expected\n    expected = num_samples\n    $I0 = elements histogram\n    expected /= $I0\n\n    .local pmc sprintf_args\n    sprintf_args = new ['FixedPMCArray']\n    sprintf_args = 2\n\n    $I0 = elements histogram\nhist_loop:\n    dec $I0\n\n    $N0 = histogram[$I0]\n    $N0 /= expected\n    $P0 = box $N0\n    sprintf_args[0] = $P0\n\n    $N1 = $N0 * 40\n    $I1 = $N1\n    $I1 -= 6    # width of printed $N0, plus space\n    if $I1 \u003e 0 goto make_stars\n    $I1 = 0\nmake_stars:\n\n    $S0 = repeat '*', $I1\n    $P0 = box $S0\n    sprintf_args[1] = $P0\n\n    $S0 = sprintf \"%5.3f %s\", sprintf_args\n    say $S0\n\n    unless $I0 \u003c= 0 goto hist_loop\n\nend:\n.end\n\n.sub test_histogram\n    .param pmc histogram\n    .param num K\n    .param pmc table\n\n    .local int degrees_of_freedom\n    $I0 = elements histogram\n    degrees_of_freedom = $I0 - 1\n\n    .local pmc sprintf_args\n    sprintf_args = new ['ResizablePMCArray']\n    $P0 = box degrees_of_freedom\n    push sprintf_args, $P0\n\n    $I0 = exists table[degrees_of_freedom]\n    if $I0 goto get_data\n\n    $S0 = sprintf \"Don't have chi2 data for %d degrees of freedom\", sprintf_args\n    skip(1, $S0)\n    goto end\n\nget_data:\n\n    .local pmc chi2_data\n    chi2_data = table[degrees_of_freedom]\n    $N0 = chi2_data[0]\n\n    $I0 = islt K, $N0\n\n    $P0 = box $N0\n    unshift sprintf_args, $P0\n    $P0= box K\n    unshift sprintf_args, $P0\n\n    $S0 = sprintf \"K (%5.3f) should be less than limit (%5.3f) for %d degrees of freedom\", sprintf_args\n    ok($I0, $S0)\n\nend:\n    .return ($I0)\n.end\n\n.sub test_random_range\n    .param int range\n    .param int times\n    .param pmc table\n\n    .local int num_samples\n    num_samples = range * times\n\n    .local int min, max\n    min = 10\n    max = min + range\n\n    .local pmc histogram\n    histogram = make_random_hist(min, max, num_samples)\n\n    .local num K\n    K = compute_chi_square(histogram, num_samples)\n\n    $I0 = test_histogram(histogram, K, table)\n\n    #if $I0 goto end\n    #print_histogram(histogram, num_samples)\nend:\n.end    \n\n.sub main :main\n    .include 'test_more.pir'\n\n    .const int TIMES = 10000\n\n    .local int num_tries\n    num_tries = 101\n\n    plan(num_tries)\n\n    $S0 = \"Running tests expecting #TIMES# hits per bucket\"\n    $P0 = split '#', $S0\n    $S0 = TIMES\n    $P0[1] = $S0\n    $S0 = join '', $P0\n    diag($S0)\n\n    .local pmc table\n    table = make_chi2_table()\n\n    $I0 = 0\nloop:\n    inc $I0\n    test_random_range($I0, TIMES, table)\n    if $I0 \u003c num_tries goto loop\n\n.end\n```","files":null},{"type":3,"author":{"id":"aa8915ba52969f979af836ca4704fd27e613004f"},"timestamp":1267229676,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NDQ=","github-url":"https://github.com/parrot/parrot/issues/580#issuecomment-3503644"},"message":"\u003cp\u003e\nI have written a chi-square test for this, but even though the tests now pass frequently (something that they did not do before), they still occasionally fail due to insufficient randomness.\n\u003c/p\u003e\n\n\u003cp\u003e\nSuggestions?\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aa8915ba52969f979af836ca4704fd27e613004f"},"timestamp":1267229747,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NDU=","github-url":"https://github.com/parrot/parrot/issues/580#issuecomment-3503645"},"message":"\u003cp\u003e\nProposed random-range.t test for t/dynoplibs\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1418304521,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY2NjE4NDcz","github-url":"https://github.com/parrot/parrot/issues/580#issuecomment-66618473"},"message":"Our rand48 is better than libc rand() but it will not pass statistical tests.\n\nWe should probe for /dev/urandom, /dev/random, pcg random, arc4random and rand48 (no idea how it is called on windows) and use it in this order, with mt and/or rand() used as fallbacks.","files":null},{"type":3,"author":{"id":"901a96a937d41c99363862ec20cf94766cd8c750"},"timestamp":1418305227,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY2NjE5Nzgy","github-url":"https://github.com/parrot/parrot/issues/580#issuecomment-66619782"},"message":"\u003e no idea how it is called on windows\n\nI think the consensus on windows is to use CryptAcquireContext (passing a `HCRYPTPROV *` + CryptGenRandom","files":null}]}