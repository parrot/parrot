{"version":1,"ops":[{"type":3,"author":{"id":"5d3ddbc9e7589f51af6c90895bd8e1a23dd4171e"},"timestamp":1279587413,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxMjI=","github-url":"https://github.com/parrot/parrot/issues/438#issuecomment-3503122"},"message":"\u003cp\u003e\nFrom what I have understood from Coke:\n\u003c/p\u003e\n\n\u003cp\u003e\nsrc/pmc/stringhandle.pmc has an attribute \"*stringhandle* - which needs to be changed\n\u003c/p\u003e\n\n\u003cp\u003e\n[Relevant Files: src/pmc/string.pmc and src/pmc/stringbuilder.pmc]\n\u003c/p\u003e\n\n\u003cp\u003e\nThe internal buffer is STRING, but should be StringBuilder instead of a String. The main reason is the guts of push_string(), which stringbuilder does better.\n\u003c/p\u003e\n\n\u003cp\u003e\nCoke 'The puts() method that makes it want to update' ??? [Clarification Needed]\n\u003c/p\u003e\n\n\u003cp\u003e\nCoke ' You could start by changing the open() method to initialize the stringhandle attribute with a Stringbuilder instead of a string and seeing what breaks '\n\u003c/p\u003e\n\n\u003cp\u003e\nAre there specific tests for this? How do I run those without running the whole test suite (like perl Build test --test_files )?\n\u003c/p\u003e\n\n\u003cp\u003e\nR\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1279587996,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxMjM=","github-url":"https://github.com/parrot/parrot/issues/438#issuecomment-3503123"},"message":"\u003cp\u003e\nThe initial comments above were against the wrong file, which is why they reference a non-existant method.\n\u003c/p\u003e\n\n\u003cp\u003e\nsrc/pmc/stringhandle has an ATTR named *stringhandle. - this is initialized to a string PMC, but should be a stringbuilder PMC instead. the initialization happens in open().\n\u003c/p\u003e\n\n\u003cp\u003e\nThe string is appended to in puts() - that's why we want stringbuilder, which is much faster/better with appends than the now-immutable string.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe stringhandle tests are in t/pmc/stringhandle.t. You can always ack through the t/ files to find tests that include a given pmc/opcode/etc.\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003eperl t/harness t/pmc/stringhandle.t\n\u003c/pre\u003e\u003cp\u003e\nto run a single test file with the standard harness settings.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"5d3ddbc9e7589f51af6c90895bd8e1a23dd4171e"},"timestamp":1279683190,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxMjQ=","github-url":"https://github.com/parrot/parrot/issues/438#issuecomment-3503124"},"message":"\u003cp\u003e\nI have updated stringhandle and the usage of stringhandle in io with this patch\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003ehttp://sdlperl.ath.cx/parrot_string_patch\n\u003c/pre\u003e\u003cp\u003e\nHowever this causes\n\u003c/p\u003e\n\u003cpre class=\"wiki\"\u003emake[1]: Leaving directory `/home/kthakore/parrot/trunk/docs'\n./ops2c --dynamic src/dynoplibs/io.ops --quiet\nmake: **\\* [src/dynoplibs/io_ops.c] Segmentation fault\n\u003c/pre\u003e\u003cp\u003e\nI can't seem to find the dependency but I will look again later.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"5d3ddbc9e7589f51af6c90895bd8e1a23dd4171e"},"timestamp":1279707624,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxMjU=","github-url":"https://github.com/parrot/parrot/issues/438#issuecomment-3503125"},"message":"\u003cp\u003e\nOk so I got a lot further ... the patch is here now\n\u003c/p\u003e\n\n\u003cp\u003e\n\u003ca   href=\"http://sdlperl.ath.cx/parrot_string_patch\"\u003e\u003cspan class=\"icon\"\u003eÂ \u003c/span\u003ehttp://sdlperl.ath.cx/parrot_string_patch\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nHowever now I am having trouble on the readline test in t/pmc/stringbuilder.t that is using\n\u003c/p\u003e\n\n\u003cp\u003e\nParrot_io_readline(INTERP, SELF);\n\u003c/p\u003e\n\n\u003cp\u003e\nWhich is calling\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003eif (pmc-\u0026gt;vtable-\u0026gt;base_type == enum_class_StringHandle) {\n        INTVAL offset, newline_pos, read_length, orig_length;\n        PMC\\* stringhandle;\n        GETATTR_StringHandle_stringhandle(interp, pmc, stringhandle);\n        if (PMC_IS_NULL(stringhandle))\n            Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_PIO_ERROR,\n                \"Attempt to read from null or invalid PMC\");\n        result = VTABLE_get_string(interp, stringhandle);\n        if (STRING_IS_NULL(result))\n            Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_PIO_ERROR,\n                \"Cannot read from a closed stringhandle\");\n        orig_length = Parrot_str_byte_length(interp, result);\nGETATTR_StringHandle_read_offset(interp, pmc, offset);\n        newline_pos = Parrot_str_find_index(interp, result, CONST_STRING(interp,\n        /\\* No newline found, read the rest of the string. _/\n        if (newline_pos == -1)\n            read_length = orig_length - offset;\n        else\n            read_length = newline_pos - offset + 1; /_ +1 to include the newline\n        result = Parrot_str_substr(interp, result, offset, read_length);\n        SETATTR_StringHandle_read_offset(interp, pmc, newline_pos + 1);\n    }\n\u003c/pre\u003e\u003cp\u003e\nThe problem with this is it is running out of memory. Below is the stack.\n\u003c/p\u003e\n\n\u003cp\u003e\n{{\nFailed allocation of 214446736 bytes\nParrot VM: PANIC: Out of mem!\nC file src/gc/alloc_memory.c, line 151\nParrot file (not available), line (not available)\n...\n(gdb) bt full\n\u003ca class=\"missing ticket\"\u003e#0\u003c/a\u003e  0x00007f38e50fdf3b in raise () from /lib/libpthread.so.0\nNo symbol table info available.\n\u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/1\" title=\"meta: [META] Parrot 1.0 (closed: invalid)\"\u003e#1\u003c/a\u003e  0x00007f38e6e9d33c in do_panic (interp=0x0,\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\nmessage=0x7f38e7005ec8 \"Out of mem\",\nfile=0x7f38e7005e88 \"src/gc/alloc_memory.c\", line=151)\nat src/exceptions.c:728\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n_ASSERT_ARGS_CHECK = 0\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n\u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/2\" title=\"bug: Documentation still shows parrotbug@perl.org (closed: fixed)\"\u003e#2\u003c/a\u003e  0x00007f38e6ea73b9 in failed_allocation (line=151, size=214446736)\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\nat src/gc/alloc_memory.c:31\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nNo locals.\n\u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/3\" title=\"feature: PDD09 GC System (closed: done)\"\u003e#3\u003c/a\u003e  0x00007f38e6ea7631 in mem\u003cspan class=\"underline\"\u003einternal_allocate_zeroed (size=214446736,\n\u003c/span\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\nfile=0x7f38e700b958 \"src/gc/alloc_resources.c\", line=237)\nat src/gc/alloc_memory.c:151\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\n_ASSERT_ARGS_CHECK = 0\nptr = (void * const) 0x0\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n\u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/4\" title=\"todo: opcode deprecation review (closed: done)\"\u003e#4\u003c/a\u003e  0x00007f38e6f0a1cd in alloc_new_block (mem_pools=0x60b8e0, size=214446680,\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\npool=0x60b9c0, why=0x7f38e700bec8 \"inside compact\")\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n---Type \u0026lt;return\u0026gt; to continue, or q \u0026lt;return\u0026gt; to quit---\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\nat src/gc/alloc_resources.c:236\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n_ASSERT_ARGS_CHECK = 0\nnew_block = (Memory_Block *) 0x0\nalloc_size = 214446680\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n\u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/5\" title=\"bug: partcl's [puts hi] exposes memory leaks in r33137 (closed: duplicate)\"\u003e#5\u003c/a\u003e  0x00007f38e6f0a459 in compact_pool (interp=0x60b080, mem_pools=0x60b8e0,\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\npool=0x60b9c0) at src/gc/alloc_resources.c:467\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n_ASSERT_ARGS_CHECK = 0\nj = 139882369041963\ntotal_size = 214446680\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n...\n\u003c/p\u003e\n\n\u003cp\u003e\n\u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/9\" title=\"bug: cannot attach tickets via trac (closed: worksforme)\"\u003e#9\u003c/a\u003e  0x00007f38e6ea7fdd in Parrot_gc_mark_and_sweep (interp=0x60b080, flags=2)\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\nat src/gc/api.c:690\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n_ASSERT_ARGS_CHECK = 0\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n\u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/10\" title=\"bug: -r33351 causes tcl segfault (closed: fixed)\"\u003e#10\u003c/a\u003e 0x00007f38e6f0a748 in mem_allocate (interp=0x60b080, mem_pools=0x60b8e0,\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\nsize=48904, pool=0x60b9c0) at src/gc/alloc_resources.c:326\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n_ASSERT_ARGS_CHECK = 0\nreturn_val = (void *) 0xa2c500\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n\u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/11\" title=\"bug: issame fails for String PMC argument (closed: fixed)\"\u003e#11\u003c/a\u003e 0x00007f38e6eaa700 in gc_ms_allocate_string_storage (interp=0x60b080,\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\nstr=0xa3d960, size=48894) at src/gc/gc_ms.c:1188\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n_ASSERT_ARGS_CHECK = 0\nnew_size = 48904\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n---Type \u0026lt;return\u0026gt; to continue, or q \u0026lt;return\u0026gt; to quit---\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\npool = (Variable_Size_Pool *) 0x60b9c0\nmem = 0x0\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n\u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/12\" title=\"todo: Task list for completing PIRC (closed: wontfix)\"\u003e#12\u003c/a\u003e 0x00007f38e6ea8487 in Parrot_gc_allocate_string_storage (interp=0x60b080,\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\nstr=0xa3d960, size=48894) at src/gc/api.c:511\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n_ASSERT_ARGS_CHECK = 0\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n\u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/13\" title=\"roadmap: set up documentation translation infrastructure (closed: invalid)\"\u003e#13\u003c/a\u003e 0x00007f38e6e4b04c in Parrot_str_clone (interp=0x60b080, s=0x7213f0)\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\nat src/string/api.c:360\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\n_ASSERT_ARGS_CHECK = 0\nalloc_size = 48894\nresult = (STRING * const) 0xa3d960\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n\u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/14\" title=\"todo: fix braced arguments + nested macro expansion (closed: wontfix)\"\u003e#14\u003c/a\u003e 0x00007f38e6fc3ed6 in Parrot_StringBuilder_get_string (interp=0x60b080,\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\n_self=0x69dd10) at ./src/pmc/stringbuilder.pmc:114\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\nbuffer = (STRING *) 0x7213f0\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n\u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/15\" title=\"todo: Add char.set handling to string parsing in pirc (closed: fixed)\"\u003e#15\u003c/a\u003e 0x00007f38e6f1054b in Parrot_io_readline (interp=0x60b080, pmc=0x69dc90)\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\nat src/io/api.c:428\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\nnewline_pos = 139882369096428\nread_length = 6336640\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n---Type \u0026lt;return\u0026gt; to continue, or q \u0026lt;return\u0026gt; to quit---\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\noffset = 40\norig_length = 10976080\nstringhandle = (PMC *) 0x69dd10\n_ASSERT_ARGS_CHECK = 0\nresult = (STRING *) 0x60b080\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n\u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/16\" title=\"todo: fix memory leaks in pirc (closed: wontfix)\"\u003e#16\u003c/a\u003e 0x00007f38e6fc5e67 in Parrot_StringHandle_nci_readline (interp=0x60b080,\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\n_self=0x698450) at ./src/pmc/stringhandle.pmc:291\n\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\nstring_result = (STRING * const) 0x2\n_self = (PMC *) 0x69dc90\n_ctx = (PMC * const) 0x69c8d0\n_ccont = (PMC * const) 0x69c950\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n}}\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"5d3ddbc9e7589f51af6c90895bd8e1a23dd4171e"},"timestamp":1279767643,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxMjY=","github-url":"https://github.com/parrot/parrot/issues/438#issuecomment-3503126"},"message":"\u003cp\u003e\nMemory issues have been fixed. One last issue remains.\n\u003c/p\u003e\n\n\u003cp\u003e\nUsing utf8 encoding on opened StringHandle returns a 'fixed_8' encodingname instead of utf8.\n\u003c/p\u003e\n\n\u003cp\u003e\nMoreover it seems do open() doesn't call StringHandle's open method but Perl_io_open. Which has a special case the just sets the flags and returns the pmc.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe patch has been updated at\n\u003c/p\u003e\n\n\u003cp\u003e\n\u003ca   href=\"http://sdlperl.ath.cx/parrot_string_patch\"\u003e\u003cspan class=\"icon\"\u003eÂ \u003c/span\u003ehttp://sdlperl.ath.cx/parrot_string_patch\u003c/a\u003e\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"5d3ddbc9e7589f51af6c90895bd8e1a23dd4171e"},"timestamp":1279779000,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxMjc=","github-url":"https://github.com/parrot/parrot/issues/438#issuecomment-3503127"},"message":"\u003cp\u003e\nt/pmc/stringhandle.t .. 1/25\nok 5 # skip no asynch calls yet\nt/pmc/stringhandle.t .. 11/25 not ok 12 - record_separator # TODO not yet implemented\nt/pmc/stringhandle.t .. 18/25\n#   Failed test 'readall() - utf8 on opened stringhandle'\n#   at t/pmc/stringhandle.t line 696.\n#          got: 'fixed_8\n# '\n#     expected: 'utf8\n# '\n# Looks like you failed 1 test of 25.\nt/pmc/stringhandle.t .. Dubious, test returned 1 (wstat 256, 0x100)\nFailed 1/25 subtests\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\n(less 1 skipped subtest: 23 okay)\n\u003c/p\u003e\n\u003c/blockquote\u003e","files":null},{"type":3,"author":{"id":"0c1ee4af33970ee80260d659da672a9306b51181"},"timestamp":1280610800,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxMjg=","github-url":"https://github.com/parrot/parrot/issues/438#issuecomment-3503128"},"message":"\u003cp\u003e\nWe need to kill that Parrot_io_open loop. The function call isn't doing anything but setting the the flags attribute, which StringHandle's open method could do directly.\n\u003c/p\u003e\n\n\u003cp\u003e\nDelete these 4 lines from Parrot_io_open in src/io/api.c.\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e149     else if (new_filehandle-\u0026gt;vtable-\u0026gt;base_type == enum_class_StringHandle) {\n150         SETATTR_StringHandle_flags(interp, pmc, flags);\n151         filehandle = pmc;\n152     }\n\u003c/pre\u003e\u003cp\u003e\nDelete this line from the open method in src/pmc/stringhandle.pmc:\n\u003c/p\u003e\n\u003cpre class=\"wiki\"\u003e210         SELF = Parrot_io_open(INTERP, SELF, filename, open_mode);\n\u003c/pre\u003e\u003cp\u003e\nMove the function \"Parrot_io_parse_open_flags\" from src/io/filehandle.c to src/io/api.c (since it is used more broadly than just the FileHandle PMC).\n\u003c/p\u003e\n\n\u003cp\u003e\nAdd the following lines in the appropriate places in the open method in src/pmc/stringhandle.pmc:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003eINTVAL flags;\n...\nflags = Parrot_io_parse_open_flags(INTERP, open_mode);\nSET_ATTR_flags(INTERP, SELF, flags)\n\u003c/pre\u003e\u003cp\u003e\nTest.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1280611011,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxMjk=","github-url":"https://github.com/parrot/parrot/issues/438#issuecomment-3503129"},"message":"\u003cp\u003e\nPartially done in r48234, TODO the open_flags moving.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1291190489,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMxMzA=","github-url":"https://github.com/parrot/parrot/issues/438#issuecomment-3503130"},"message":"\u003cp\u003e\nMoving of Parrot_io_parse_open_flags done in 2611433\n\u003c/p\u003e\n\n\u003cp\u003e\nI'm not sure about the status of this ticket. Are all problems mentioned solved?\n\u003c/p\u003e","files":null}]}