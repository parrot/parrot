{"version":1,"ops":[{"type":1,"author":{"id":"e7ab5189123b7e95617e8f8ef8dc5de0f0eb9b46"},"timestamp":1233991520,"metadata":{"github-id":"MDU6SXNzdWUyODQ4NTUy","github-url":"https://github.com/parrot/parrot/issues/352","origin":"github"},"title":"cmp/bitwise/other mmd vtable functions should not go through proxy pmc","message":"In rakudo 1 \u003c=\u003e undef was doing the right thing while undef \u003c=\u003e 1 was failing.  The first case works because integer.pmc has a multi cmp_num for undef and the VTABLE_get_integer(INTERP, value) call on the Failure value was correctly calling the Failure get_integer vtable method.  When I tried to patch undef.pmcI noticed that I was having trouble getting a cmp_num vtable function in that file to call the Failure get_integer vtable method because the value for SELF was an undef pmc rather than a failure pmc.  After further digging I concluded that the cmp_num function was being called through a proxy pmc and cmp_num was behaving differently in that regard from add and subtract which did an mmd call through the default pmc.  The module lib/Parrot/Pmc2c/PMC/Object.pm generates the vtable forwarding functions and relies on the vtable_method_does_multi subroutine in lib/Parrot/Pmc2c/PMC.pm to decide which vtable methods go through a proxy and which don't.\n\nAfter dropping by #parrot on Feb 5 I was advised that having bitwise and cmp functions go through a proxy pmc might be an oversight and I was asked to come up with an appropriate test if possible.\n\nThe patch included (not attached) below relies on the largely baseless assumption that none of the default pmc vtable mmd functions should go through a proxy from an object when I only seem to have been told that fewer of them should.  I thought at least parts of it might be useful if taken fwiw.\n\nThe attached patch to t/oo/vtableoverride.t should provide some testing for the desired behavior.\n\nCheers,\nRon\n\nThe fwiw parrot patch:\n# Index: lib/Parrot/Pmc2c/PMC.pm\n\n--- lib/Parrot/Pmc2c/PMC.pm (revision 36383)\n+++ lib/Parrot/Pmc2c/PMC.pm (working copy)\n@@ -328,14 +328,27 @@\n     return $self-\u003evtable-\u003eattrs($methodname)-\u003e{write};\n }\n\n+my $multi_cmp           = qr/cmp(?:_num|_string|_pmc)?/;\n+my $multi_logical       = qr/logical_(?:or|and|xor)/;\n+my $multi_bitwise       = qr/bitwise_(?:or|and|xor|shl|shr|lsr)/;\n+my $multi_bitwise_str   = qr/bitwise_(?:or|and|xor)/;\n+my $multi_arithmetic    = qr/add|subtract|multiply|divide|floor_divide|modulus|pow/;\n+\n+my $multi_bitwise_style         = qr/(?:$multi_bitwise|repeat)(?:_int)?/o;\n+my $multi_bitwise_str_style     = qr/(?:$multi_bitwise|concat)(?:_str)?/o;\n+my $multi_arithmetic_style      = qr/$multi_arithmetic(?:_int|_float)?/o;\n+\n+my $multi_bit_or_arith_style = qr/\n-    (?:i_)?\n-    (?:$multi_bitwise_style|$multi_bitwise_str_style|$multi_arithmetic_style)\n  +/xo;\n  +\n  sub vtable_method_does_multi {\n     my ( $self, $methodname ) = @_;\n  \n     return 1 if ($methodname =~ m/^\n-                (?:i_)?\n-                (?:add|subtract|multiply|divide|floor_divide|modulus)\n-                (?:_int|_float)?\n-              $/x);\n-        (?:$multi_cmp|$multi_logical|$multi_bit_or_arith_style)\n-    $/xo);\n  }\n  \n  sub super_method {\n\nOriginally http://trac.parrot.org/parrot/ticket/285","files":null}]}