{"version":1,"ops":[{"type":3,"author":{"id":"8c86ede03c8e80b0dad5131138f96e957a4ee66b"},"timestamp":1380988966,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI1NzUxMTcw","github-url":"https://github.com/parrot/parrot/issues/990#issuecomment-25751170"},"message":"I (zefram@fysh.org) wrote:\n\n\u003e typeof_s_p on it shows that it's a PMCProxy, but isa_i_p_sc claims both that it is a PMCProxy and (falsely) that it is of the class of the original object from which it was derived.\n\nLooking at the implementation, I can see where at least some of this bizarre behaviour comes from. The definition of the vtable method \"isa_pmc\" in class.pmc has some startling logic blunders. For a start, it checks whether the target class metaobject is the same object as the invocant, and returns true if they are. It therefore claims that X is-a X for all classes X; for example, claiming that my Foo class metaobject is-a Foo. Further down the same method it iterates over the superclasses of the class of the invocant, and asks each of them whether they are of the target class.\n\nGenerally, the code confuses is-a (is-an-instance-of) with is-a-subclass-of. There don't seem to be any methods (either in the vtable or in the method namespace) for asking whether one class is a subclass of another. Some such method is required, and the \"isa_pmc\" implementations should use it.\n\n-zefram","files":null}]}