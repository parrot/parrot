{"version":1,"ops":[{"type":3,"author":{"id":"099af60226e2576bd4ff0f5c2614b710c745cab6"},"timestamp":1273512405,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI1ODA=","github-url":"https://github.com/parrot/parrot/issues/276#issuecomment-3502580"},"message":"\u003cp\u003e\nNow it's failing in with different message. Reassign to plobsing as \"Image Master\" :)\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e\nbacek@fireball:~/src/parrot$ ./parrot tt.pir\nhi\nhi\nfrozen\nsrc/pmc/imageio.c:287: failed assertion 'id - 1 == VTABLE_elements(interp, PARROT_IMAGEIO(info)-\u0026gt;todo)'\nBacktrace - Obtained 18 stack frames (max trace depth is 32).\n/home/bacek/src/parrot/blib/lib/libparrot.so.2.3.0 [0x7fc4b3929f2c]\n/home/bacek/src/parrot/blib/lib/libparrot.so.2.3.0(Parrot_confess+0x29) [0x7fc4b38cdb4f]\n/home/bacek/src/parrot/blib/lib/libparrot.so.2.3.0 [0x7fc4b39f28ba]\n/home/bacek/src/parrot/blib/lib/libparrot.so.2.3.0 [0x7fc4b39f3713]\n/home/bacek/src/parrot/blib/lib/libparrot.so.2.3.0 [0x7fc4b3a0f0c0]\n/home/bacek/src/parrot/blib/lib/libparrot.so.2.3.0 [0x7fc4b3960f6f]\n/home/bacek/src/parrot/blib/lib/libparrot.so.2.3.0 [0x7fc4b39f3549]\n/home/bacek/src/parrot/blib/lib/libparrot.so.2.3.0(Parrot_thaw+0x49) [0x7fc4b39613a9]\n/home/bacek/src/parrot/blib/lib/libparrot.so.2.3.0 [0x7fc4b3901a15]\n/home/bacek/src/parrot/blib/lib/libparrot.so.2.3.0 [0x7fc4b3962be1]\n/home/bacek/src/parrot/blib/lib/libparrot.so.2.3.0 [0x7fc4b396219d]\n/home/bacek/src/parrot/blib/lib/libparrot.so.2.3.0 [0x7fc4b393af2a]\n/home/bacek/src/parrot/blib/lib/libparrot.so.2.3.0(Parrot_pcc_invoke_from_sig_object+0xb1) [0x7fc4b3936d31]\n/home/bacek/src/parrot/blib/lib/libparrot.so.2.3.0(Parrot_pcc_invoke_sub_from_c_args+0xeb) [0x7fc4b3936e6b]\n/home/bacek/src/parrot/blib/lib/libparrot.so.2.3.0(imcc_run+0x5bc) [0x7fc4b3a4522c]\n./parrot [0x4018c6]\n/lib/libc.so.6(__libc_start_main+0xfd) [0x7fc4b15caabd]\n./parrot [0x401219]\nAborted\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1273613343,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI1ODE=","github-url":"https://github.com/parrot/parrot/issues/276#issuecomment-3502581"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/132#comment:3\" title=\"Comment 3 for Ticket #132\"\u003ebacek\u003c/a\u003e:\nThe problem is that the automagically generated vtable methods in object (where are they comming from?) are wrong for freeze and thaw (remove Object.{freeze,thaw} dummies and watch the fireworks for proof).\n\u003c/p\u003e\n\n\u003cp\u003e\nI've hidden the associated freeze vtable in r46511, which gets the test a little further.\n\u003c/p\u003e\n\n\u003cp\u003e\nFor example, they depend on self-\u0026gt;_class being defined, but no PMCs are guarranteed to exist until thawfinish.\n\u003c/p\u003e\n\n\u003cp\u003e\nI'm willing to work on the issue, but I'll probably need some help from people familiar with the deep magic involved in parrot pmcproxied objects.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1273668515,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI1ODI=","github-url":"https://github.com/parrot/parrot/issues/276#issuecomment-3502582"},"message":"\u003cp\u003e\nReplying to \u003ca class=\"new ticket\" href=\"http://trac.parrot.org/parrot/ticket/132\" title=\"bug: Can't thaw a Sub (or a PIR subclass of a Sub) (new)\"\u003ecoke\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cp\u003e\nIt appears that not even a Sub proper can be thawed (likely because Subs aren't first class citizens as far as PBC is concerned).\n\u003c/p\u003e\n\n\u003cp\u003e\nCode:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e.sub main :main\n  .local pmc pirC\n  pirC = compreg 'PIR'\n  .local string code\n  code = \u0026lt;\u0026lt;\"END_CODE\"\n.sub bar\n  say \"hi\"\n.end\nEND_CODE\n  .local pmc compiled\n  compiled = pirC(code)\n  .local pmc sub\n  sub = compiled[0] # just want the first executable sub here.\n  sub() # works\n  $S0 = freeze sub\n  say \"frozen\"\n  $P2 = thaw $S0\n  say \"thawed\"\n  $P2()\n.end\n\u003c/pre\u003e\u003cp\u003e\nOutput:\n\u003c/p\u003e\n\u003cpre class=\"wiki\"\u003ehi\nfrozen\nthawed\nzsh: segmentation fault  ./parrot test2.pir\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1364224592,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1Mzk5MTQ2","github-url":"https://github.com/parrot/parrot/issues/276#issuecomment-15399146"},"message":"@Coke can you reproduce this on a recent Parrot master or Parrot 5.0.0 ? If so, re-open this issue.\n\nCreating a pull request with a test would be even better.\n\n Closing for now, since the last comment was 3 years ago.","files":null},{"type":3,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1364229942,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NDA1MDg0","github-url":"https://github.com/parrot/parrot/issues/276#issuecomment-15405084"},"message":"Run the code in the original ticket: it still fails on parrot master (cc14047).\n\nThe error message changed again, but it's still failing.\n\n```\nhi\nhi\nfrozen\nthawed\nsrc/call/context.c:737: failed assertion 'Parrot_pcc_get_regs_used(interp, ctx, REGNO_PMC) \u003e idx'\nBacktrace - Obtained 19 stack frames (max trace depth is 32).\n0   libparrot.dylib                     0x000000010fbde17a Parrot_print_backtrace + 58\n1   libparrot.dylib                     0x000000010fbdca6b Parrot_confess + 155\n2   libparrot.dylib                     0x000000010fc09b3a Parrot_pcc_get_PMC_reg + 170\n3   libparrot.dylib                     0x000000010fba1cf7 Parrot_get_class_p_sc + 103\n4   libparrot.dylib                     0x000000010fc3b82a runops_fast_core + 186\n5   libparrot.dylib                     0x000000010fc3ac9a runops_int + 250\n6   libparrot.dylib                     0x000000010fc0865d runops + 477\n7   libparrot.dylib                     0x000000010fbff354 Parrot_pcc_invoke_from_sig_object + 436\n8   libparrot.dylib                     0x000000010fbdee69 Parrot_ext_call + 569\n9   libparrot.dylib                     0x000000010fd5ca16 Parrot_Task_invoke + 342\n10  libparrot.dylib                     0x000000010fbff2f3 Parrot_pcc_invoke_from_sig_object + 339\n11  libparrot.dylib                     0x000000010fbdee69 Parrot_ext_call + 569\n12  libparrot.dylib                     0x000000010fc43313 Parrot_cx_next_task + 323\n13  libparrot.dylib                     0x000000010fc42fd2 Parrot_cx_outer_runloop + 162\n14  libparrot.dylib                     0x000000010fc42cff Parrot_cx_begin_execution + 319\n15  libparrot.dylib                     0x000000010fc56289 Parrot_pf_execute_bytecode_program + 409\n16  libparrot.dylib                     0x000000010fbd4bfd Parrot_api_run_bytecode + 541\n17  parrot                              0x000000010fb647e1 main + 561\n18  libdyld.dylib                       0x00007fff8eb417e1 start + 0\nAttempting to get PIR backtrace.  No guarantees.  Here goes...\ncurrent instr.: 'bar' pc 0 (gh_276.pir:3)\ncalled from Sub 'main' pc 57 (gh_276.pir:32)\ncalled from Sub '__PARROT_ENTRY_MAIN__' pc 359 (frontend/parrot2/prt0.pir:129)\n```","files":null},{"type":4,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1364229942,"metadata":{"github-id":"MDEzOlJlb3BlbmVkRXZlbnQ0Mjg0Njk1Mg=="},"status":1}]}