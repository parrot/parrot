{"version":1,"ops":[{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1274857081,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzMjM=","github-url":"https://github.com/parrot/parrot/issues/479#issuecomment-3503323"},"message":"\u003cp\u003e\nexit() is called on line 96 of src/exit.c . A compile-time macro should be put in that calls exit() unless the current OS is RTEMS.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"099af60226e2576bd4ff0f5c2614b710c745cab6"},"timestamp":1274861133,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzMjQ=","github-url":"https://github.com/parrot/parrot/issues/479#issuecomment-3503324"},"message":"\u003cp\u003e\nThere is also some calls to \u003ctt\u003eexit\u003c/tt\u003e inside \u003ctt\u003esrc/gc\u003c/tt\u003e...\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1274884134,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzMjU=","github-url":"https://github.com/parrot/parrot/issues/479#issuecomment-3503325"},"message":"\u003cpre class=\"wiki\"\u003e\u0026gt;  There are various ways to make this happen, and various levels of\n\u0026gt;  configurability, such as allowing a custom exit handler, but for starters,\n\u0026gt;  we just want Parrot on RTEMS to unconditionally not call the system exit()\n\u0026gt;  when shutting down, as this causes RTEMS to reboot.\nNote that according to the docs all calls to exit or _exit are wrong.\nThe documented way to exit is to return control to whoever run the\nfirst runloop on the main interpreter. The current behavior is wrong,\nit breaks not only rtems, but embedding usages that wants to keep\nrunning is spite of whatever happens in the parrot code.\nSo I think we must fix the full issue, not just making a special case for RTEMS.\n--\nSalu2\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1284924862,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzMjY=","github-url":"https://github.com/parrot/parrot/issues/479#issuecomment-3503326"},"message":"\u003cp\u003e\nCommenters/committers:\n\u003c/p\u003e\n\n\u003cp\u003e\nCould we get an update on the status of this ticket?\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1286411627,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzMjc=","github-url":"https://github.com/parrot/parrot/issues/479#issuecomment-3503327"},"message":"\u003cp\u003e\nThis is not an RTEMS-specific problem. Any embedding application (irssi, vim, apache, perl5, etc) also wants more control over what happens when parrot exits.\n\u003c/p\u003e\n\n\u003cp\u003e\nWe should require a hook be installed on init by the parent application (and there is always a parent application, parrot.exe being a particularly simple one) to determine what happens in these cases.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1336589915,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU2MDgzNzI=","github-url":"https://github.com/parrot/parrot/issues/479#issuecomment-5608372"},"message":"the exit function is now no longer called from within src/exit.c, and should not be (to the best of my knowledge) called from anywhere within Parrot. This is now a front-end issue. The question is, do we want to use the same frontend (frontend/parrot2/main.c) for these systems and put in an #ifdef around the exit() calls so we don't exit if the system doesn't support it, or should we create a separate frontend entirely for these embedded systems with their specific needs in mind?","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1336609992,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU2MTU0OTg=","github-url":"https://github.com/parrot/parrot/issues/479#issuecomment-5615498"},"message":"No, I was very mistaken. There are many calls to exit in the codebase. Several of them can probably be replaced with PANIC(), which currently falls back to exit() but which can be modified in the future. Several other instances can be replaced with Parrot_x_exit() or Parrot_x_jump_out(). I'm going to do some of that now.","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1336611603,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU2MTU3OTk=","github-url":"https://github.com/parrot/parrot/issues/479#issuecomment-5615799"},"message":"@dukeleto: I'm putting together some alternatives now. Instead of calling exit(), we're going to use a macro called PARROT_FORCE_EXIT(x) in include/parrot/exit.h. What should this be, in RTEMS? Also, are there any defined macros we can use to determine whether we are compiling for RTEMS or not?","files":null}]}