{"version":1,"ops":[{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1422999203,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcyNzM5NTMy","github-url":"https://github.com/parrot/parrot/issues/1200#issuecomment-72739532"},"message":"Interesting, empty `mem_pools` is allowed though.\nCan you print the value of cur_var_ptr, like `p/x  cur_var_ptr` please? Looks like in an illegal memory segment.\n\nWith this setup you should get more info:\n\n```\nperl Configure.pl --debugging --ccflags=-DMEMORY_DEBUG\nmake\ngdb --args ./parrot -D101 -- winxed.pbc -c --noan tools/dev/pbc_to_exe.winxed\n```\n\nI don't have an arm VM yet, but should not be that hard to set it up. I'll try. I hope I can repro it with linux though. OpenBSD has much better memory libs.","files":null},{"type":2,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1423000499,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjI5NjA2ODEz"},"title":"SIGBUS on OpenBSD/arm, invalid ptr with GMS gc","was":"SIGBUS on OpenBSD/arm, invalid ptr with GMS gc"},{"type":5,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1423000502,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDIyOTYwNjgzMw=="},"added":["Bug"],"removed":[]},{"type":5,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1423000504,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDIyOTYwNjg1Mg=="},"added":["Component-GC"],"removed":[]},{"type":5,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1423000510,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDIyOTYwNjkxOQ=="},"added":["Platform-bsd"],"removed":[]},{"type":3,"author":{"id":"fe8af3263289cd763d1456c9b165be9f1ccc1f9b"},"timestamp":1423043709,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcyODI3NjE4","github-url":"https://github.com/parrot/parrot/issues/1200#issuecomment-72827618"},"message":"Hereâ€™s a backtrace with debugging enabled:\n\n```\n./parrot winxed.pbc -c --noan tools/dev/pbc_to_exe.winxed              \n*** Signal SIGBUS in /home/pascal/src/parrot (Makefile:937 'tools/dev/pbc_to_exe\n.pir')\n~/src/parrot $ gdb -c parrot.core --args ./parrot winxed.pbc -c --noan tools/ \u003e\nGNU gdb 6.3\nCopyright 2004 Free Software Foundation, Inc.\nGDB is free software, covered by the GNU General Public License, and you are\nwelcome to change it and/or distribute copies of it under certain conditions.\nType \"show copying\" to see the conditions.\nThere is absolutely no warranty for GDB.  Type \"show warranty\" for details.\nThis GDB was configured as \"arm-unknown-openbsd5.6\"...\nCore was generated by `parrot'.\nProgram terminated with signal 10, Bus error.\nReading symbols from /home/pascal/src/parrot/blib/lib/libparrot.so.7.0.2...done.\nLoaded symbols for /home/pascal/src/parrot/blib/lib/libparrot.so.7.0.2\nReading symbols from /usr/lib/libutil.so.12.1...done.\nLoaded symbols for /usr/lib/libutil.so.12.1\nReading symbols from /usr/lib/libpthread.so.18.1...done.\nLoaded symbols for /usr/lib/libpthread.so.18.1\nReading symbols from /usr/lib/libreadline.so.4.0...done.\nLoaded symbols for /usr/lib/libreadline.so.4.0\nReading symbols from /usr/lib/libncurses.so.14.0...done.\nLoaded symbols for /usr/lib/libncurses.so.14.0\nReading symbols from /usr/lib/libstdc++.so.57.0...done.\nLoaded symbols for /usr/lib/libstdc++.so.57.0\nReading symbols from /usr/lib/libm.so.9.0...done.\nLoaded symbols for /usr/lib/libm.so.9.0\nReading symbols from /usr/lib/libc.so.77.3...done.\nLoaded symbols for /usr/lib/libc.so.77.3\nReading symbols from /usr/libexec/ld.so...done.\nLoaded symbols for /usr/libexec/ld.so\n#0  0x48c583fc in trace_mem_block (interp=0x4df91a00, mem_pools=0x0, \n    lo_var_ptr=3221215368, hi_var_ptr=3221217200) at src/gc/system.c:473\n473             const size_t ptr = *(size_t *)cur_var_ptr;\n(gdb) bt\n#0  0x48c583fc in trace_mem_block (interp=0x4df91a00, mem_pools=0x0, \n    lo_var_ptr=3221215368, hi_var_ptr=3221217200) at src/gc/system.c:473\n#1  0x48c58678 in trace_system_stack (interp=0x4df91a00, mem_pools=0x0)\n    at src/gc/system.c:239\n#2  0x48c58724 in trace_system_areas (interp=0x4df91a00, mem_pools=0x0)\n    at src/gc/system.c:209\n#3  0x48c57b44 in Parrot_gc_trace_root (interp=0x4df91a00, mem_pools=0x0, \n    trace=GC_TRACE_FULL) at src/gc/mark_sweep.c:187\n#4  0x48c55530 in gc_gms_mark_and_sweep (interp=0x4df91a00, flags=0)\n    at src/gc/gc_gms.c:850\n#5  0x48c55780 in gc_gms_maybe_mark_and_sweep (interp=0x4df91a00, flags=0)\n    at src/gc/gc_gms.c:1527\n#6  0x48c55a58 in gc_gms_allocate_pmc_header (interp=0x4df91a00, \n    flags_unused=0) at src/gc/gc_gms.c:1540\n#7  0x48c439c4 in Parrot_gc_new_pmc_header (interp=0x4df91a00, flags=0)\n    at src/gc/api.c:314\n#8  0x48ca38b4 in get_new_pmc_header (interp=0x4df91a00, base_type=15, flags=0)\n    at src/pmc.c:572\n#9  0x48ca4594 in Parrot_pmc_new (interp=0x4df91a00, base_type=15)\n    at src/pmc.c:217\n#10 0x48c6ffc4 in Parrot_pcc_reuse_continuation (interp=0x4df91a00, \n    call_context=0x458febc4, next=0x43187fe4) at src/call/context.c:892\n---Type \u003creturn\u003e to continue, or q \u003creturn\u003e to quit---\n#11 0x48be53bc in Parrot_callmethodcc_p_sc (cur_opcode=0x43187fd8, \n    interp=0x4df91a00) at src/ops/core_ops.c:18616\n#12 0x48ca6cdc in runops_fast_core (interp=0x4df91a00, \n    runcore_unused=0x4fc45320, pc=0x43187fd8) at src/runcore/cores.c:495\n#13 0x48ca659c in runops_int (interp=0x4df91a00, offset=73069)\n    at src/runcore/main.c:220\n#14 0x48c6eaa0 in runops (interp=0x4df91a00, offs=132) at src/call/ops.c:123\n#15 0x48c64ec0 in Parrot_pcc_invoke_from_sig_object (interp=0x4df91a00, \n    sub_obj=0x47760d54, call_object=0x47760da4) at src/call/pcc.c:307\n#16 0x48c3b0c4 in Parrot_ext_call (interp=0x48ea1e47, sub_pmc=0x47760d68, \n    signature=0x48f0192c \"X88\") at src/extend.c:164\n#17 0x48e038d4 in Parrot_Task_invoke (interp=0x4df91a00, _self=0x47760c64, \n    next=0x0) at task.pmc:175\n#18 0x48c64e5c in Parrot_pcc_invoke_from_sig_object (interp=0x4df91a00, \n    sub_obj=0x47760c64, call_object=0x47760d68) at src/call/pcc.c:299\n#19 0x48c3b064 in Parrot_ext_call (interp=0x0, sub_pmc=0x4f282a20, \n    signature=0x48f0192c \"X88\") at src/extend.c:155\n#20 0x48cb0acc in Parrot_cx_next_task (interp=0x4df91a00, scheduler=0x477602a0)\n    at src/scheduler.c:231\n#21 0x48cb0b90 in Parrot_cx_outer_runloop (interp=0x4df91a00)\n    at src/scheduler.c:149\n#22 0x48cb0f2c in Parrot_cx_begin_execution (interp=0x4df91a00, \n---Type \u003creturn\u003e to continue, or q \u003creturn\u003e to quit---\n    main=0x47760778, argv=0x477603f4) at src/scheduler.c:109\n#23 0x48cc66cc in Parrot_pf_execute_bytecode_program (interp=0x4df91a00, \n    pbc=0x47760c50, args=0x477603f4) at src/packfile/api.c:2905\n#24 0x48c30b5c in Parrot_api_run_bytecode (interp_pmc=0x4598f750, \n    pbc=0x47760c50, args=0x477603f4) at src/embed/bytecode.c:161\n#25 0x0000affc in main (argc=5, argv=0xbfffe01c) at frontend/parrot2/main.c:186\n(gdb) p/x cur_var_ptr\n$1 = 0xbfffd889\n(gdb) \n```","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1423043852,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcyODI3OTE1","github-url":"https://github.com/parrot/parrot/issues/1200#issuecomment-72827915"},"message":"Yes, you were right. `0xbfffd889` is unaligned. That's why we don't get the SIGBUS on other platforms. I'll check to repro it on such a strict CPU. Probably we just need to skip such unaligned ptrs","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1423044243,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcyODI4ODU3","github-url":"https://github.com/parrot/parrot/issues/1200#issuecomment-72828857"},"message":"Nope, much easier. ptrdiff_t apparently has size 1 for this platform, but needs to be 4 or 8.\n`cur_var_ptr++` just advanced `lo_var_ptr` by 1, which is of course invalid.\n\n```\n    for (cur_var_ptr = lo_var_ptr; cur_var_ptr \u003c (ptrdiff_t)hi_var_ptr; cur_var_ptr++) {\n        /* XXX yes, ptr may be uninitialized here. valgrind and asan complains. */\n        const size_t ptr = *(size_t *)cur_var_ptr;\n```\n\n`printf %x 3221215368` (lo_var_ptr=3221215368) =\u003e `bfffd888` vs `bfffd889` (cur_var_ptr)\n\nBut looking up the definition for `ptrdiff_t` on arm gives me `signed int`, which does look ok. So it looks like a compiler bug. cur_var_ptr is not a `char*`.\nhttp://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0067d/BABFCGFC.html\n\"the type ptrdiff_t is defined as signed int.\"\n\nwhich gcc version exactly?","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1423045415,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcyODMxNjM2","github-url":"https://github.com/parrot/parrot/issues/1200#issuecomment-72831636"},"message":"Can you check this fix?\n\n```\ndiff --git src/gc/system.c src/gc/system.c\nindex 2e20493..71de04e 100644\n--- src/gc/system.c\n+++ src/gc/system.c\n@@ -440,7 +440,7 @@ trace_mem_block(PARROT_INTERP,\n {\n     ASSERT_ARGS(trace_mem_block)\n     size_t    prefix;\n-    ptrdiff_t cur_var_ptr;\n+    size_t    cur_var_ptr;\n\n     const size_t buffer_min = get_min_buffer_address(interp, mem_pools);\n     const size_t buffer_max = get_max_buffer_address(interp, mem_pools);\n```\n\nIt is also in the branch `smoke-me/gc-ptrdiff-gh1200`","files":null},{"type":3,"author":{"id":"fe8af3263289cd763d1456c9b165be9f1ccc1f9b"},"timestamp":1423053094,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcyODQ2ODE0","github-url":"https://github.com/parrot/parrot/issues/1200#issuecomment-72846814"},"message":"No, still gets a SIGBUS for the same reason.  For the record, ptrdiff_t is a long on OpenBSD/arm, see: http://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/src/sys/arch/arm/include/_types.h?rev=1.16\u0026content-type=text/plain\n\nCompiler used is GCC 4.2.1.\n\nBut regardless of whether cur_var_ptr is an int, long or size_t, cur_var_ptr++ will still only advance it by 1.  To get the behaviour you want, it would have to be a pointer.","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1423059098,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcyODU5OTUy","github-url":"https://github.com/parrot/parrot/issues/1200#issuecomment-72859952"},"message":"Right!","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1423212294,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDczMjA0MjA0","github-url":"https://github.com/parrot/parrot/issues/1200#issuecomment-73204204"},"message":"Only ARM \u003cv6 CPUs will fail on unaligned access. We also need to add the `-Wcast-align` warning to catch it for other problems on RISC CPUs\n\nReproducible on armv5-linux only on native HW, not with qemu, and only after `# echo 5 \u003e /proc/cpu/alignment` as root.\nOn older kernels it was  `/proc/sys/debug/alignment`  (\u003c2.5? http://www.arm.linux.org.uk/developer/v2.5/2.5.0.php) \n- http://www.mjmwired.net/kernel/Documentation/arm/mem_alignment\n- https://stackoverflow.com/questions/16548059/how-to-trap-unaligned-memory-access\n\nThe gcc needs to support `-maligned-access` also, which it does not with gcc4.6.","files":null},{"type":4,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1423471606,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MjMyMzExOTY0"},"status":2}]}