{"version":1,"ops":[{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1348783191,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDg5NTY0ODE=","github-url":"https://github.com/parrot/parrot/issues/847#issuecomment-8956481"},"message":"Thanks for the testcase. This code changed, yes. I'll try to fix it ASAP. We have now an extra io_sync_buffers_for_read() function which does not handle STDIN/STDOUT in the READLINE case.","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1348783624,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDg5NTY2Nzk=","github-url":"https://github.com/parrot/parrot/issues/847#issuecomment-8956679"},"message":"Fixed with 1fe3b78","files":null},{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1348810994,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDg5NjUxOTY=","github-url":"https://github.com/parrot/parrot/issues/847#issuecomment-8965196"},"message":"If I'm reading 1fe3b78 correctly, it appears to me that the standard output is flushed when .readline is invoked on _any_ filehandle, not just standard input.  That's not exactly correct either.\n\nThe standard behavior I've always encountered (in C and Perl 5) is that when standard output is line buffered, the buffer is flushed whenever input is requested from a line buffered device that requires characters to be obtained from the device.  See the second paragraph of http://pubs.opengroup.org/onlinepubs/7908799/xsh/stdio.html , or section 7.19.3 of the C99 specification.  Or just follow what a Perl 5 program does with standard input and output by default.\n\nPm","files":null},{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1348841305,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDg5NzczOTY=","github-url":"https://github.com/parrot/parrot/issues/847#issuecomment-8977396"},"message":"The problem isn't limited to .readline -- programs using .read on the standard input also no longer have stdout flushed prior to input:\n\n```\npmichaud@kiwi:/zip/perl/parrot-4.6.0$ cat ../pz4.pir\n.sub 'main' :main\n    $P0 = getstdin\n\n    print \"abc: \"\n    $S0 = $P0.'read'(1)\n    say $S0\n.end\n\npmichaud@kiwi:/zip/perl/parrot-4.6.0$ ./parrot ../pz4.pir\nabc: hello\nh\npmichaud@kiwi:/zip/perl/parrot-4.6.0$\n\npmichaud@kiwi:/zip/perl/parrot-4.8.0$ ./parrot ../pz4.pir\nhello\nabc: h\npmichaud@kiwi:/zip/perl/parrot-4.8.0$ \n\npmichaud@kiwi:/zip/perl/parrot$ git describe --tags\nRELEASE_4_8_0-78-g1fe3b78\npmichaud@kiwi:/zip/perl/parrot$ ./parrot ../pz4.pir\nhello\nabc: h\npmichaud@kiwi:/zip/perl/parrot$ \n```\n\nNote that in Parrot 4.6.0, the prompt was displayed prior to reading input from standard input; in 4.8.0 and in RELEASE_4_8_0-78-g1fe3b78, the program waits for input before displaying the prompt.\n\nBy way of comparison, here's what Perl 5 and C do:\n\n```\npmichaud@kiwi:/zip/perl$ cat pz4.p5\n#!/usr/bin/perl\n\nprint 'abc: ';\nread STDIN, $s, 1;\nprint \"$s\\n\";\n\npmichaud@kiwi:/zip/perl$ perl pz4.p5\nabc: hello\nh\n```\n\nNote that Perl 5 flushes standard output prior to the read from standard input.  Similarly in C:\n\n```\npmichaud@kiwi:/zip/perl$ cat pz4.c\n#include \u003cstdio.h\u003e\n\nint main()\n{\n    int ch;\n    printf(\"abc: \");\n    ch = getchar();\n    printf(\"%c\\n\", ch);\n}\n\npmichaud@kiwi:/zip/perl$ make pz4\ncc     pz4.c   -o pz4\npmichaud@kiwi:/zip/perl$ ./pz4\nabc: hello\nh\n```\n\nFeels like Parrot ought to be able to support the same standard default behavior as Perl 5 and C.\n\nPm","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1348845649,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDg5Nzk4MzU=","github-url":"https://github.com/parrot/parrot/issues/847#issuecomment-8979835"},"message":"+1 to reverting back to our old behavior","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1348873218,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDg5OTc5MDQ=","github-url":"https://github.com/parrot/parrot/issues/847#issuecomment-8997904"},"message":"This is a bug, and represents a case which was clearly not covered by our test suite. I'm going to revert rurban's fix now and patch this issue.","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1348875201,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDg5OTg0MzQ=","github-url":"https://github.com/parrot/parrot/issues/847#issuecomment-8998434"},"message":"I reverted rurban's fix in 3260e22, and put in a possible fix in 2922c18.\n\nI had mistakenly thought that the old IO system was setting up STDOUT as being linebuffered. However, on second read through it seems like stdout buffering was left up to the OS in the old system, and Parrot was not buffering it explicitly. I may be mistaken again, but I think this is what was happening.\n\nIn 2922c18 I removed buffering from stdout and run a small test program similar to the one posted by pmichaud. It appears to be working correctly. Can we confirm that this is the correct behavior at the rakudo level?","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1355257176,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExMjYwOTYx","github-url":"https://github.com/parrot/parrot/issues/847#issuecomment-11260961"},"message":"I think this issue has been resolved. Can somebody confirm and close this issue?","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1355267389,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExMjY5MTY2","github-url":"https://github.com/parrot/parrot/issues/847#issuecomment-11269166"},"message":"The perl6 folks indeed confirmed that the issues were resolved with whiteknight's fixes.\nWe could not come up with an testcase, because it involved interactive input.","files":null},{"type":4,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1355267389,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MzE4MjMzMjE="},"status":2}]}