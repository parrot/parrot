{"version":1,"ops":[{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1356036586,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExNTkxMTQ5","github-url":"https://github.com/parrot/parrot/issues/893#issuecomment-11591149"},"message":"Test it on a multi-core machine with \n`watch prove -v t/op/say.t`","files":null},{"type":3,"author":{"id":"507abfae537e007c08969e763a32a0acbd878b1b"},"timestamp":1356037246,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExNTkxODM2","github-url":"https://github.com/parrot/parrot/issues/893#issuecomment-11591836"},"message":"Is this really a problem? say is not in any way atomic. Concurrent output onto a single stream will lead to discontinous output. Even if you change say to add the \\n before printing, just having a sufficiently large string (to overflow the OS's buffer) and some luck will bring the problem back.\nThere are so many layers before the output hits the screen that output like \"tthhreraed1a\\n2\\n\" is still possible even if you improve say like described. Changing say to improve this situation seems like papering over the problem. It will still not be fixed.","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1356038844,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExNTkyODI4","github-url":"https://github.com/parrot/parrot/issues/893#issuecomment-11592828"},"message":"Stefan, you are right. IO buffering will always disturb concurrent prints. \nBut it is very distracting that such a simple op will interleave and the fix was easy enough. \nEsp. for printing simple TAP lines. I had to use print \"ok 1\\n\" instead of say \"ok 1\"","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1356044600,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExNTk2MjIy","github-url":"https://github.com/parrot/parrot/issues/893#issuecomment-11596222"},"message":"It is true that @niner is completely correct. But in the name of minimizing surprising behavior to _users_ (who shouldn't have to know how the internals work, if they don't want to), I am +1 to @rurban's change.\n\nWIth this change, say() is still not atomic in all situations, but it will act atomic-ish in more situations, which is convenient.\n\nThis is definitely something that should be clearly explained in our documentation, with many examples.","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1356054939,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExNjAwMTcw","github-url":"https://github.com/parrot/parrot/issues/894#issuecomment-11600170"},"message":"On 12/20/12 6:08 PM, leto wrote:\n\n\u003e We need to teach Configure.pl to detect if qemu is available. This is related to #173 and will allow us to emulate the cross-compilation of Parrot under qemu.\n\u003e \n\u003e If qemu is found, it's version number should also be printed in the Configure.pl .\n\nFor the qemu-ignorant amongst us (e.g, me), can you provide (a) a \nrationale for this detection; (b) link to qemu's documentation; and (c) \nparticularly link to its API?\n\nThe latter will enable us how to write a probe for it.\n\nThank you very much.\njimk\n\n\u003e ---\n\u003e \n\u003e Reply to this email directly or view it on GitHub:\n\u003e https://github.com/parrot/parrot/issues/894","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1356220369,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExNjQyNjM5","github-url":"https://github.com/parrot/parrot/issues/894#issuecomment-11642639"},"message":"Detecting qemu is IMHO worthless. \nWe should detect if we are running under an open embedded cross-compilation bb recipe.\nqemu just simulates hw and compiling remotely does not care if done via qemu/kvm/real hw \nor ssh/ttyS0 connected hosts.\n\nBut we need to detect the bitbake/oe-init-build-env environment, which does an actual cross-compilation.\nI'm trying to add a parrot.bb recipe, currently there is only one for perl (enabling cross compiling).\n\nWhat I see are two distinct env variables being set:\n\n```\nBB_ENV_EXTRAWHITE=MACHINE DISTRO TCMODE TCLIBC http_proxy ftp_proxy https_proxy all_proxy ALL_PROXY no_proxy SSH_AGENT_PID SSH_AUTH_SOCK BB_SRCREV_POLICY SDKMACHINE BB_NUMBER_THREADS BB_NO_NETWORK PARALLEL_MAKE GIT_PROXY_COMMAND GIT_PROXY_IGNORE SOCKS5_PASSWD SOCKS5_USER SCREENDIR\nBUILDDIR=/opt/poky/build\n```\n\nBUILDDIR must end in build\nPATH must have bitbake/bin included.","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1357240939,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExODU2ODIx","github-url":"https://github.com/parrot/parrot/issues/894#issuecomment-11856821"},"message":"@rurban what you are describing was my intent for this issue. The last time I looked, the Emacs BitBake recipe used qemu to cross-compile, which is what I want to emulate for Parrot.\n\nI have read the BB recipe for Perl 5 (a while ago) and when I looked, it did many many source modifications to enable cross-compiling, which is not something I want to emulate.\n\nCan you put your parrot.bb in a branch of parrot.git, maybe somewhere in the ports/ directory ?","files":null},{"type":3,"author":{"id":"cbe6e71aaa3cc60d73912da3795c6a40e2b85ad5"},"timestamp":1357245902,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExODYwMDE4","github-url":"https://github.com/parrot/parrot/issues/894#issuecomment-11860018"},"message":"It's unlikely that Parrot will get included upstream in the openembedded-core or poky repositories directly. However what you can do is create a Parrot \"layer\" which would allow Parrot support to be easily added to build configurations based on oe-core or poky (what is now known as the Yocto Project from an organizational point of view).\n\nThe layer would then be referenced here:\n\nhttp://www.openembedded.org/wiki/LayerIndex\n\nso that people will know of its existence and can make use of it. \n\nHere is some documentation on creating layers for use with the Yocto Project:\n\nhttp://www.yoctoproject.org/docs/current/dev-manual/dev-manual.html#understanding-and-creating-layers\n\nI'm happy to answer questions or review the layer once you get going on it. \n\nScott (Yocto Project core team developer)","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1357255580,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExODY1ODc1","github-url":"https://github.com/parrot/parrot/issues/894#issuecomment-11865875"},"message":"Thanks @ScottGarman ! Do you have any suggestions for an already existing meta-layer that we could emulate? Is meta-ruby a good example?\n\nhttp://cgit.openembedded.org/meta-openembedded/tree/meta-ruby?id=master","files":null},{"type":3,"author":{"id":"cbe6e71aaa3cc60d73912da3795c6a40e2b85ad5"},"timestamp":1357414528,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExOTE4NTc0","github-url":"https://github.com/parrot/parrot/issues/894#issuecomment-11918574"},"message":"Yes, meta-ruby looks like a great layer to model yours from - it's as minimal as possible.","files":null}]}