{"version":1,"ops":[{"type":1,"author":{"id":"5db01e6955098c59a39e9df4b8bd3f1fdf43341a"},"timestamp":1479273511,"metadata":{"github-id":"MDU6SXNzdWUxODk1OTI4Nzk=","github-url":"https://github.com/parrot/parrot/issues/1234","origin":"github"},"title":"Inconsistency between mult and add with PMCs","message":"I'm new to Parrot, but it is a very interesting and impressive project.  I'm particularly interested in its use as an educational tool.\n\nI have a question about the mult and add opcodes for Integer/Float PMC.  They seem to be inconsistent with each-other, and I wasn't able to find any detailed documentation about this particular issue.  I would expect that when an `Integer` and a `Float` are used in a mathematical operation (in either order), the result should be a `Float`.  However, that's not what happens.  For example:\n\n```\nsub 'main' :main\n  $P0 = box 3\n  $P1 = box 1.25\n  $P2 = $P0 * $P1\n\n  $S0 = typeof $P2\n  say $S0\n\n  $P0 = box 1.25\n  $P1 = box 3\n  $P2 =  $P0 * $P1\n\n  $S0 = typeof $P2\n  say $S0\n.end\n```\n\nI would expect this should produce `Float` PMCs in both cases, but instead, outputs:\n\n```\nInteger\nFloat\n```\n\nHowever, when the add opcode is used, we get different results:\n\n```\n.sub 'main' :main\n  $P0 = box 3\n  $P1 = box 1.25\n  $P2 = $P0 + $P1\n\n  $S0 = typeof $P2\n  say $S0\n\n  $P0 = box 1.25\n  $P1 = box 3\n  $P2 = $P0 + $P1\n\n  $S0 = typeof $P2\n  say $S0\n.end\n```\n\nOutput:\n```\nFloat\nFloat\n```\n\nIs this an error, or is it the expected behavior?  Similar results can be seen when comparing any of the addition operations (+ or -) and any of the multiplication operations (*, / , %).  If this is the expected behavior, it seems at odds with the way that most HLLs work.\n\nThanks!","files":null}]}