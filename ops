{"version":1,"ops":[{"type":3,"author":{"id":"56b030459ff5c3e63b58d71e1bed10897e6a7686"},"timestamp":1258426652,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3ODg=","github-url":"https://github.com/parrot/parrot/issues/625#issuecomment-3503788"},"message":"\u003cp\u003e\nNote that dynpmcs with destroy() must be destroyed before the ParrotLibrary PMCs which represent their shared libraries (RT \u003ca class=\"missing ticket\"\u003e#46761\u003c/a\u003e).\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1284001814,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3ODk=","github-url":"https://github.com/parrot/parrot/issues/625#issuecomment-3503789"},"message":"\u003cp\u003e\nJust wanted to note that this issue causes nt/exit.t to coredump in Blikzkost's test suite. sorear++ and NotFound++ describe the issue in #parrot on 8.Sept.2010 :\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e\u0026lt;@sorear\u0026gt; dukeleto: Parrot has no concept of ordering in global destruction\n\u0026lt;@sorear\u0026gt; dukeleto: blizkost SV proxies need to drop Perl-side references when destroyed\n\u0026lt;@sorear\u0026gt; dukeleto: that means 1. blizkost needs to still be loaded 2. the Perl interpreter needs to still exist\n\u0026lt;@NotFound\u0026gt; dukeleto: I suppose the problem is that it tries to destroy the sub that is calling exit.\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1293416052,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3OTA=","github-url":"https://github.com/parrot/parrot/issues/625#issuecomment-3503790"},"message":"\u003cp\u003e\nMilestone 3.6 deleted\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1314490450,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3OTE=","github-url":"https://github.com/parrot/parrot/issues/625#issuecomment-3503791"},"message":"\u003cp\u003e\nCan anyone an update on the status of this ticket?\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"099af60226e2576bd4ff0f5c2614b710c745cab6"},"timestamp":1325702318,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3OTI=","github-url":"https://github.com/parrot/parrot/issues/625#issuecomment-3503792"},"message":"\u003cp\u003e\nHello.\n\u003c/p\u003e\n\n\u003cp\u003e\nI would like to close this bug as \"wontfix\". GCable objects can't be represented as acyclic graph in general case. So \"children\" of \"some PMC\" can be actually \"parent\" of same PMC. We do need different mechanism to support such behavior. E.g. \"finalize\"/\"dispose\" from JVM/CLR world.\n\u003c/p\u003e\n\n\u003cp\u003e\n--\nBacek\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1336524658,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1OTA0NDE=","github-url":"https://github.com/parrot/parrot/issues/625#issuecomment-5590441"},"message":"I agree with @bacek. Ordered destruction in general is a no-go. What we can do instead, an idea that @moritz recommended, is to use something like a 2-pass sweep. The first pass executes destroy vtables while everything is still alive, the second pass reclaims the memory. That would make many of these kinds of problems go away, although there could possibly be a negative effect from making multiple cache-unfriendly passes over memory.\n\nI suggest we close this ticket and start brain-storming new ideas on a wiki page or something. Any ideas?","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1336540397,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1OTI5MzY=","github-url":"https://github.com/parrot/parrot/issues/632#issuecomment-5592936"},"message":"A compacting will be a very large project.  I'm fine with this going to the wiki.  It's definitely more of a wishlist item than something being actively worked on or in need of attention.","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1336569127,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1OTk1OTc=","github-url":"https://github.com/parrot/parrot/issues/632#issuecomment-5599597"},"message":"I've created a new wiki page https://github.com/parrot/parrot/wiki/Tasklist:-GC to hold details about GC wishlist and tasklist items. I've linked to this ticket on that page and we can continue the discussion there. I'm closing this ticket.","files":null},{"type":4,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1336569127,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTUwODA0NzU="},"status":2},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1421229002,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5ODkyMjk1","github-url":"https://github.com/parrot/parrot/issues/632#issuecomment-69892295"},"message":"Just a note: Our generational collector gms is far from being good. It is in fact horrible, 20% slower than ms2 without generations. \nA copying collector would be at least twice as fast as ms2, but would need at least twice as much memory.","files":null}]}