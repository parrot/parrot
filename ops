{"version":1,"ops":[{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1243389508,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM5MTg=","github-url":"https://github.com/parrot/parrot/issues/652#issuecomment-3503918"},"message":"\u003cp\u003e\nOne way I was imagining this might be implemented is to indeed have Configure.pl generate two versions of each of the relevant variables, e.g. \u003ctt\u003e libparrot_linkflags\u003c/tt\u003e and \u003ctt\u003e inst_libparrot_linkflags \u003c/tt\u003e, to pick an example from TT \u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/698\" title=\"patch: [PATCH] Mac OS X build fix (closed: fixed)\"\u003e#698\u003c/a\u003e.  In the build directory, parrot_config would contain both of these, but the normal usage, namely \u003ctt\u003e libparrot_linkflags\u003c/tt\u003e would pick up the build directory version.  Upon building the parrot_config for installation, however, every inst_* variable would be copied to it's corresponding non-inst_ variable\n(e.g. inst_libparrot_linkflags would be copied to libparrot_linkflags) so that in the installed version, you would also simply use \u003ctt\u003e libparrot_linkflags\u003c/tt\u003e.  That is, users of parrot's config information would use the same interface regardless.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe change would also be rather mechanical -- each inst_ variable has a corresponding version without the inst_ prefix.  The inst_ variables could all be set up in Configure.pl right after the plain versions were set.  Unfortunately, the installed vs. not-installed information is currently spread out in diverse ways across many files.  Various build tools have --install flags that do various things.  Ideally, in the end, all they would do is pick out which parrot_config file to load in, and much of the remaining conditional code could be eliminated.\n\u003c/p\u003e\n\n\u003cp\u003e\nAt least that's how I've been thinking it might look going forward.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1245267640,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM5MTk=","github-url":"https://github.com/parrot/parrot/issues/652#issuecomment-3503919"},"message":"\u003cp\u003e\nA few other loosely-related tickets are:   TT \u003ca class=\"reopened ticket\" href=\"http://trac.parrot.org/parrot/ticket/476\" title=\"bug: Binaries should not contain rpath (reopened)\"\u003e#476\u003c/a\u003e, TT \u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/495\" title=\"todo: [TODO] remove hardcoded path from installable pbc_to_exe (closed: fixed)\"\u003e#495\u003c/a\u003e, TT \u003ca class=\"reopened ticket\" href=\"http://trac.parrot.org/parrot/ticket/540\" title=\"bug: installed versions of dynext/*.so still link to -lparrot in build ... (reopened)\"\u003e#540\u003c/a\u003e, TT \u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/691\" title=\"bug: installed pbc_to_exe can't find config.fpmc. (closed: fixed)\"\u003e#691\u003c/a\u003e, TT \u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/735\" title=\"patch: path for installed header files (closed: fixed)\"\u003e#735\u003c/a\u003e,  TT \u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/739\" title=\"patch: path of installed config.fpmc file on a 64bit system (closed: fixed)\"\u003e#739\u003c/a\u003e, and TT \u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/762\" title=\"bug: parrot_config --dump: libparrot_linkflags, rpath_blib contain references ... (closed: wontfix)\"\u003e#762\u003c/a\u003e.  All of these rely on basic config information.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"31add63544eae97eedfa22a00d452c0559f0a395"},"timestamp":1248263437,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM5MjA=","github-url":"https://github.com/parrot/parrot/issues/652#issuecomment-3503920"},"message":"\u003cp\u003e\nAnyone looking at this should be aware of \u003ca   href=\"http://lists.parrot.org/pipermail/parrot-dev/2009-July/002482.html\"\u003e\u003cspan class=\"icon\"\u003eÂ \u003c/span\u003ehttp://lists.parrot.org/pipermail/parrot-dev/2009-July/002482.html\u003c/a\u003e\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1290597392,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM5MjE=","github-url":"https://github.com/parrot/parrot/issues/652#issuecomment-3503921"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/649#comment:5\" title=\"Comment 5 for Ticket #649\"\u003ewhiteknight\u003c/a\u003e:\nI think this ship has sailed.  It might be more fruitful to close this ticket and open a new one that more specifically addresses the issue from the point of view of a language developer or an embedder/extender.\n\u003c/p\u003e","files":null}]}