{"version":1,"ops":[{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1305832723,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4MzE=","github-url":"https://github.com/parrot/parrot/issues/351#issuecomment-3502831"},"message":"\u003cpre class=\"wiki\"\u003eOn Wed, May 18, 2011 at 03:35:10PM -0000, Parrot wrote:\n\u0026gt;  The getprop op is strange because it has a signature getprop_p_s_p. By\n\u0026gt;  analogy, the getattr opcode has signature getattr_p_p_s. setprop_p_s_p and\n\u0026gt;  setattr_p_s_p are similar and are not a problem.\n\u0026gt;\n\u0026gt;  getprop_p_s_p should be changed to getprop_p_p_s for symmetry with other\n\u0026gt;  ops.\nNote that Rakudo uses this opcode heavily.\n\u0026gt;  Also, we should take some time to reconsider the whole properties\n\u0026gt;  mechanism, since I don't think it is used often. It *is* used, but not\n\u0026gt;  often and I'm not sure that it's the best mechanism for doing what we want\n\u0026gt;  to do with it.\nNote that Rakudo uses this opcode heavily.  All of Rakudo's ability\nto maintain container types, r/w, flattening behavior, subroutine\nsignatures, etc. is based on the properties mechanism.\nRakudo even has its own dynop to enable a set of PMCs to share the\nsame prophash (e.g., in arrays, where all of the elements have a\ncommon type constraint).\nSo far it works well for us (if perhaps a little expensive), so\nconsider this a tag that says \"there's at least one heavy user of\nthis feature\" before we mess with it too much.  :-)\nPm\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1305837639,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4MzI=","github-url":"https://github.com/parrot/parrot/issues/351#issuecomment-3502832"},"message":"\u003cp\u003e\nI knew Rakudo was using it, I wasn't sure to what extent. I'm glad to hear it is more commonly used (and without any major problems).\n\u003c/p\u003e\n\n\u003cp\u003e\nI would still like to change getprop_p_s_p to getprop_p_p_s. That's a small, low-priority aesthetic nit, but I wanted to keep track of the issue anyway. I marked this ticket \"trivial\" when I created it, so nobody needs to get worried about this quite yet.\n\u003c/p\u003e\n\n\u003cp\u003e\nAs a follow-up, does this property system work as well as you would like it to? Are there any changes you could suggest? If we're talking about a major overhaul of the object model to begin sooner than later, object properties is something we could get right if it isn't already right.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1305843209,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4MzM=","github-url":"https://github.com/parrot/parrot/issues/351#issuecomment-3502833"},"message":"\u003cpre class=\"wiki\"\u003eOn Thu, May 19, 2011 at 01:40:39PM -0000, Parrot wrote:\n\u0026gt; Comment(by whiteknight):\n\u0026gt;\n\u0026gt;  I knew Rakudo was using it, I wasn't sure to what extent. I'm glad to hear\n\u0026gt;  it is more commonly used (and without any major problems).\n\u0026gt;\n\u0026gt;  I would still like to change getprop_p_s_p to getprop_p_p_s.\nThis should be no problem -- add getprop_p_p_s now, give clients\n(like Rakudo) a supported release or two to make the switch, then\neliminate getprop_p_s_p.\nFWIW, getprop's inconsistent with other ops has always struck me as\nodd as well, so I'm fine with the proposed change.\n\u0026gt;  As a follow-up, does this property system work as well as you would like\n\u0026gt;  it to? Are there any changes you could suggest? If we're talking about a\n\u0026gt;  major overhaul of the object model to begin sooner than later, object\n\u0026gt;  properties is something we could get right if it isn't already right.\nWe probably won't know entirely until we have Rakudo completely switched\nover to the new system, although Jonathan might have some insights to\nshare here.\nPm\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"099af60226e2576bd4ff0f5c2614b710c745cab6"},"timestamp":1330591526,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQyNTQ0MjA=","github-url":"https://github.com/parrot/parrot/issues/351#issuecomment-4254420"},"message":"Do we really need \"properties\" on PMCs when we have \"attributes\"? They are used inconsistently (and many times interchangeably in our codebase).","files":null},{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1330611636,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQyNTg3MzI=","github-url":"https://github.com/parrot/parrot/issues/351#issuecomment-4258732"},"message":"What do you mean by \"attributes\"?\n\nAs I understand it, properties are named slots created at runtime that can be attached to individual PMC instances.  Attributes are named slots that are defined for an entire PMC type when the type is defined (and before any instances are created).  In a dynamic language environment, we often want to be able to stash information onto a single PMC without having to define a new attribute or type to do it.\n\nIn the (few) places where PCT, NQP, and Rakudo have used properties in the past, it has definitively been because attributes weren't really workable or optimal for the use case.\n\nI can't speak to consistency of the terms in the Parrot codebase, sorry.  :-)\n\nPm","files":null},{"type":3,"author":{"id":"099af60226e2576bd4ff0f5c2614b710c745cab6"},"timestamp":1330636494,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQyNzAzMzU=","github-url":"https://github.com/parrot/parrot/issues/351#issuecomment-4270335"},"message":"Thank you for explanation.\n\nTo summarize (my understanding) of \"attributes\" vs \"properties\":\nAttributes are class specific.\nProperties are object specific. And defined as generic \"hash\" interface. In terms of parrot properties stored in _metadata field.\n\nBased on this I would like to propose to remove next VTABLE methods: getprop, setprop, delprop and getprops and implement their logic inside corresponding ops.\n\n(Yes, I should probably open another ticket for this...)","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1330637385,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQyNzA2NTA=","github-url":"https://github.com/parrot/parrot/issues/351#issuecomment-4270650"},"message":"So long as the ops stay the same (or improve over time, as per the original suggestion in this ticket), I think we can remove the vtables. They are never overridden in any meaningful way and serve as unnecessary cruft. \n\nCan we override get_prop or set_prop from PIR?","files":null},{"type":3,"author":{"id":"099af60226e2576bd4ff0f5c2614b710c745cab6"},"timestamp":1330637688,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQyNzA3NDk=","github-url":"https://github.com/parrot/parrot/issues/351#issuecomment-4270749"},"message":"No, getprop/setprops are never overridden.","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1364235328,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NDEwODUx","github-url":"https://github.com/parrot/parrot/issues/351#issuecomment-15410851"},"message":"This ticket is a bit ambiguous. @pmichaud : is there anything you need from Parrot regarding this? If not, please close. As far as I understand, @bacek and @Whiteknight are no longer working on this.","files":null},{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1364238480,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NDE1NTkx","github-url":"https://github.com/parrot/parrot/issues/351#issuecomment-15415591"},"message":"I believe that the original intent of the ticket was fulfilled a year ago in commit 4a482c7.\n\nWhatever the status quo is, we're not likely to change it soon with respect to this issue, so I'm closing the ticket.","files":null},{"type":4,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1364238480,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50NDI4NzA2NTU="},"status":2}]}