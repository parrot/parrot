{"version":1,"ops":[{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1265945919,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzNzI=","github-url":"https://github.com/parrot/parrot/issues/495#issuecomment-3503372"},"message":"\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n  - Remove all \"i_*\" vtables. These are less frequently used and tend to be implemented internally in terms of the 3-argument vtables.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nAs noted in \u003ca class=\"new ticket\" href=\"http://trac.parrot.org/parrot/ticket/1433\" title=\"RFC: Add a vtable function to get arithmetic mode (new)\"\u003e#1433\u003c/a\u003e, I disagree with the notion that Parrot should completely do away with the optimization possibilities provided by having separate \"inplace\" versus \"create a new value\" operations available to PMCs.  It's not just the core PMCs at issue here, but also the PMC types that other HLLs may choose to use or implement.\n\u003c/p\u003e\n\n\u003cp\u003e\nPm\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"099af60226e2576bd4ff0f5c2614b710c745cab6"},"timestamp":1290721562,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzNzM=","github-url":"https://github.com/parrot/parrot/issues/495#issuecomment-3503373"},"message":"\u003cp\u003e\nHello.\n\u003c/p\u003e\n\n\u003cp\u003e\n-1 from me. I think it should be other way around. Implement 3-args math ops in terms of i_* ops. E.g. \u003ctt\u003e $a := $b + $c \u003c/tt\u003e is same as \u003ctt\u003e $a := $b; $a += $c \u003c/tt\u003e. Core PMCs can always fallback 3-args ops to 2-args. HLL can choose different implementation.\n\u003c/p\u003e\n\n\u003cp\u003e\nOTOH, current 3-args ops with $dest _should_ always allocate new PMC for $dest without reusing old PMC. It's closely related to \"lvalue semantics\" ticket.\n\u003c/p\u003e\n\n\u003cp\u003e\n--\nBacek.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1290736123,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzNzQ=","github-url":"https://github.com/parrot/parrot/issues/495#issuecomment-3503374"},"message":"\u003cpre class=\"wiki\"\u003eOn Thu, Nov 25, 2010 at 01:46:02PM -0000, Parrot wrote:\n\u0026gt;  Hello.\n\u0026gt;\n\u0026gt;  -1 from me. I think it should be other way around. Implement 3-args math\n\u0026gt;  ops in terms of i_* ops. E.g. {{{ $a := $b + $c }}} is same as {{{ $a :=\n\u0026gt;  $b; $a += $c }}}. Core PMCs can always fallback 3-args ops to 2-args. HLL\n\u0026gt;  can choose different implementation.\nPlease, no.  An 3-argument inplace add is *not* always the same as\na 2-argument inplace add.  In particular, adding two very large Integers\ncould result in a BigInt, and I definitely think we should not be morphing\nPMCs to achieve that.\nPut another way, over time I've come to realize that immutable values\nare a good thing, and inplace operations are the antithesis of that.\nPlease don't make them the core/default.\nPm\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"56b030459ff5c3e63b58d71e1bed10897e6a7686"},"timestamp":1290738450,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzNzU=","github-url":"https://github.com/parrot/parrot/issues/495#issuecomment-3503375"},"message":"\u003cpre class=\"wiki\"\u003eOn Thursday 25 November 2010 at 09:48, Patrick R wrote:\n\u0026gt; Put another way, over time I've come to realize that immutable values\n\u0026gt; are a good thing, and inplace operations are the antithesis of that.\n\u0026gt; Please don't make them the core/default.\n+1.  It's the optimizer's job to cheat by removing temporaries and coalescing\nmultiple resources, not the programmer's.\n-- c\n\u003c/pre\u003e","files":null}]}