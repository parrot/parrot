{"version":1,"ops":[{"type":3,"author":{"id":"bda1c2af6cf86f8312c0380d1f34dd4288076995"},"timestamp":1271295232,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI1NzM=","github-url":"https://github.com/parrot/parrot/issues/274#issuecomment-3502573"},"message":"\u003cp\u003e\nthis is blocking Blizkost *.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"531f213490a150dd157bb329db78197c5d1f681e"},"timestamp":1272228348,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI1NzQ=","github-url":"https://github.com/parrot/parrot/issues/274#issuecomment-3502574"},"message":"\u003cp\u003e\nSome more data points.  This occurs with any module that loads PCT/Grammar.pbc, or loading PCT/Grammar.pbc itself.  It does not occur with PCT/HLLCompiler.pbc.  It was possible to make Blizkost load by narrowing the load_bytecode opcode to only load HLLCompiler; thus this is no longer a blocker.  I am still curious what causes this though.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1285654978,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI1NzU=","github-url":"https://github.com/parrot/parrot/issues/274#issuecomment-3502575"},"message":"748 byte attachment from plobsing\nat http://trac.parrot.org/parrot/raw-attachment/ticket/1542/ns_abduction.patch\n\n# ```Index: src/pmc/namespace.pmc\n\n--- src/pmc/namespace.pmc   (revision 49323)\n+++ src/pmc/namespace.pmc   (working copy)\n@@ -468,8 +468,10 @@\n         if (val_is_NS) {\n             /\\* TODO - this hack needs to go */\n             Parrot_NameSpace_attributes *nsinfo = PARROT_NAMESPACE(value);\n-            nsinfo-\u003eparent = SELF;  /\\* set parent */\n-            nsinfo-\u003ename   = key;   /\\* and name */\n-            if (PMC_IS_NULL(nsinfo-\u003eparent)) {\n-                nsinfo-\u003eparent = SELF;  /\\* set parent */\n-                nsinfo-\u003ename   = key;   /\\* and name */\n- ```\n         }\n  \n       if (new_tuple) {\n           VTABLE_set_pmc_keyed_int(INTERP, new_tuple, NS_slot_ns, value);\n  ```\n\n```\n```","files":null},{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1285672833,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI1NzY=","github-url":"https://github.com/parrot/parrot/issues/274#issuecomment-3502576"},"message":"\u003cp\u003e\nHere's why PCT is in the perl6 HLL:\n\u003c/p\u003e\n\n\u003cul\u003e\u003cli\u003eRakudo exports PCT (among other things) into perl6 root namespace using Namespace.export_to\n\u003c/li\u003e\u003cli\u003eNamespace.export_to adds to the target namespace using Namespace.set_pmc_keyed_str\n\u003c/li\u003e\u003cli\u003ewhen Namespace.set_pmc_keyed_str detects that it is adding a Namespace to a Namespace, it reparents the child Namespace to SELF.\n\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\nThis means that PCT is available both as ['parrot';'PCT'] and ['perl6';'PCT'], but anything under PCT will think it is in ['perl6';'PCT'].\n\u003c/p\u003e\n\n\u003cp\u003e\nThe good news is that the HLL associated with Namespaces, Subs, etc in this heirarchy should remain unchanged.\n\u003c/p\u003e\n\n\u003cp\u003e\nThe bad news is that it appears we have yet another Namespace \u0026lt;=\u0026gt; Class mismatch occuring (which is why we get the 'Parrent isn't a Class' error).\n\u003c/p\u003e\n\n\u003cp\u003e\nA small patch to src/pmc/namespace.pmc is sufficient to fix *this* bug, but I think more important here is the overall insanity of the reparenting special case at all. Also the lingering Namespace/Class associations (which is the root of this as well as other bugs).\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1285672978,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI1Nzc=","github-url":"https://github.com/parrot/parrot/issues/274#issuecomment-3502577"},"message":"\u003cp\u003e\nOnly adopt Namespaces without parents.\n\u003c/p\u003e","files":null}]}