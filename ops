{"version":1,"ops":[{"type":1,"author":{"id":"e7ab5189123b7e95617e8f8ef8dc5de0f0eb9b46"},"timestamp":1347986461,"metadata":{"github-id":"MDU6SXNzdWU2OTU4MDQy","github-url":"https://github.com/parrot/parrot/issues/835","origin":"github"},"title":"ByteBuffer size/resize doesn't play well with string assignment","message":"It started with my initializing a bytebuffer big enough to fit a string and then assigning the string to the bytebuffer.  I should not really have to worry about the buffer size in this case but I don't see why doing so should break.  After looking a bit further I found that resizing could cause a similar problem.  I tested the code below on both 32 bit ubuntu and cygwin.  The symptoms were a bit different but tests 6 and 8 below failed in both cases.\n\n``` parrot\n.sub test :main\n    .include 'test_more.pir'\n\n    .local int i\n\n    .local string s1, s2\n    s1 = 'ABC'\n    s2 = 'DEF'\n\n    .local pmc b_normal, b_resize_normal, b_init_size, b_resize_too_big\n    b_normal = new ['ByteBuffer']\n    b_resize_normal = new ['ByteBuffer']\n    b_init_size = new ['ByteBuffer'],4\n    b_resize_too_big = new ['ByteBuffer']\n\n    b_normal = s1\n    i = b_normal[0]\n    is(i, 65, 'simple init - no problem expected')\n    b_normal = s2\n    i = b_normal[0]\n    is(i, 68, 'reset string with new value')\n\n    b_resize_normal = s1\n    i = b_resize_normal[0]\n    is(i, 65, 'simple init - no problem expected')\n\n    # oddly also works resize to smallar values like 2,1,0\n    b_resize_normal = 3\n    b_resize_normal = s2\n    i = b_resize_normal[0]\n    is(i, 68, 'reset resized normal buff with new string')\n\n    b_init_size[0] = 65\n    b_init_size[1] = 66\n    b_init_size[2] = 67\n    # line below probably not needed but I shouldn't cause problem\n    b_init_size[3] = 0\n\n    i = b_init_size[0]\n    is(i, 65, 'simple init - no problem expected')\n\n    b_init_size = s2\n    i = b_init_size[0]\n    is(i, 68, 'reset sized buff with new string')\n\n    b_resize_too_big = s1\n    i = b_resize_too_big[0]\n    is(i, 65, 'simple init - no problem expected')\n\n    b_resize_too_big = 5\n    b_resize_too_big = s2\n    i = b_resize_too_big[0]\n    is(i, 68, 'reset resized too big buff with new string')\n.end\n```","files":null}]}