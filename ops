{"version":1,"ops":[{"type":1,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1402947619,"metadata":{"github-id":"MDU6SXNzdWUzNTgyOTA2Nw==","github-url":"https://github.com/parrot/parrot/issues/1080","origin":"github"},"title":"GSOC#2 compile-time expand pcc params and set the return result","message":"PCCMETHODs can be optimized to omit the run-time call to `Parrot_pcc_fill_params_from_c_args(interp, _call_object, sig, \u0026_self, args...);`\nand create the necessary C code to fill the params directly in pmc2c.\nE.g. for \"Pi\" `_self = VTABLE_get_pmc_keyed_int(interp, _call_object, 0);` with `_self` being the first arg and `0` being the index for the first argument.\n\nSame for assigning the RETURN result:\n`Parrot_pcc_set_call_from_c_args(interp, _call_object, rettype, result);`\nwhich only sets one argument, so a call `set_call_from_varargs` is not needed, just the type-specific part from `set_call_from_varargs`.\nE.g. `VTABLE_set_integer_keyed_int(interp, _call_object, 0, retvar);`\n\nUnfortunately we have to check the number of provided arguments at run-time: `VTABLE_get_integer(interp, _call_object);` and throw `EXCEPTION_INVALID_OPERATION` if too less or too many.\n`:optional` and `:opt_flag` handling can be left to the old slow method or also expanded. (see `rurban/pcc-opt-gh1080`)\nThe flags flatten, lookahead, name and slurpy and multiple return values are rarely used and should be left to the old method. `:constant` should be expanded, but is not used yet.\n\nThis saves two unneccessary nested function calls, and one intermediate PMC creation just for holding the sig array and will lead to about 2-4% faster code with method calls. The arity check for the number of provided vs expected args is now the bottleneck.","files":null}]}