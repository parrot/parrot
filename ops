{"version":1,"ops":[{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1336571853,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU2MDA2MzI=","github-url":"https://github.com/parrot/parrot/issues/175#issuecomment-5600632"},"message":"Notice that Rosella has several sorting benchmarks already, which show comparative timings between different algorithms (including the built-in .sort method of our Array types). If it's good enough that they exist anywhere, maybe we can close this ticket. If we would like a version to host here in the parrot repo, we can definitely create new benchmark files.","files":null},{"type":3,"author":{"id":"3a88bca8b08bbf0fed7e0e78ae35bc543d83152b"},"timestamp":1357118552,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExODAyNzcy","github-url":"https://github.com/parrot/parrot/issues/175#issuecomment-11802772"},"message":"Is this issue still valid? If so, I'd like to try to contribute to parrot by trying to do this.\n\nThanks!","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1357142599,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExODEyODkw","github-url":"https://github.com/parrot/parrot/issues/175#issuecomment-11812890"},"message":"Yes, please contribute.\n\nPut it into examples/benchmarks/ and add the results into the documentation.","files":null},{"type":3,"author":{"id":"3a88bca8b08bbf0fed7e0e78ae35bc543d83152b"},"timestamp":1357143256,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExODEzMzM4","github-url":"https://github.com/parrot/parrot/issues/175#issuecomment-11813338"},"message":"Great!\n\nCould you please specify what precisely needs to be done here? I am kind of confused by the comments above. \n\nReini Urban notifications@github.com wrote:\n\n\u003e Yes, please contribute.\n\u003e \n\u003e Put it into examples/benchmarks/ and add the results into the\n\u003e documentation.\n\u003e \n\u003e ---\n\u003e \n\u003e Reply to this email directly or view it on GitHub:\n\u003e https://github.com/parrot/parrot/issues/175#issuecomment-11812890\n\nmr.Shu, http://mr.shu.io","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1357163940,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExODI2MjU5","github-url":"https://github.com/parrot/parrot/issues/175#issuecomment-11826259"},"message":"@mrshu glad to hear you are interested!\n\nSince I created this ticket originally, I should explain it more.\n\nWe are looking for some sorting benchmarks, in particular, sorting \"large\" arrays. Since there are a few different kinds of arrays in Parrot (FixedIntegerArray, ResizableStringArray, etc...) it would be useful to have a benchmark script for each kind of array.\n\nAlso, feel free to use whatever Parrot language you want (PIR/Winxed/NQP), but I would recommend against using PASM, since that is mostly used a code generation target language. We don't intend for real humans to write PASM anymore :)\n\nThe benchmark scripts should be able to take at least one command-line option to specify how large of an array to sort. Another optional option could be the number of threads to use, if you have a parallel algorithm. Since threads just landed in master, this is quite exciting and we want to measure their performance in the real world.\n\nOne option is to make each array benchmark sort the array using multiple algorithms, or you could split that up into various sub-scripts that benchmark a specific kind of array with a specific sorting algorithm.\n\nThe ultimate goal is to use these benchmarks in a continuous integration environment, so we can measure performance changes on a per-commit basis.\n\nI know that wasn't quite a detailed spec, but I hope that gives you enough info to start. Take a look here for some example benchmarks:\n\nhttps://github.com/parrot/parrot/tree/master/examples/benchmarks\n\nand always feel free to ask for help on #parrot on Freenode and/or email the parrot-dev mailing list.","files":null},{"type":3,"author":{"id":"3a88bca8b08bbf0fed7e0e78ae35bc543d83152b"},"timestamp":1357215071,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExODQxNzU5","github-url":"https://github.com/parrot/parrot/issues/175#issuecomment-11841759"},"message":"@leto Thanks a lot for your extensive comment!\n\nI've got one direct question: Is there some implementation of sort function in PIR or other laguages which can be used with parrot or should I implement that myself?","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1357235081,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExODUyOTkx","github-url":"https://github.com/parrot/parrot/issues/175#issuecomment-11852991"},"message":"It looks like FixedIntegerArray and FixedPMCArray have sort() methods, which you can find in src/pmc/{fixedintegerarray,fixedpmcarray}.pmc . That is probably a good place to start. You might also want to look at examples/shootout/knucleotide.pir which has a custom sort() method.\n\nDon't let that stop you from implementing your own interesting sort() method, but starting with one that already exists may be easier for you in the beginning as you get familiar with how Parrot works.\n\nJust as some background, foo.pmc files are written in a heavily macroized flavor of C and then run through a processor which generates a foo.c file which is what actually gets compiled.\n\nAs an aside, I _heavily_ recommend the program \"ack\" to do \"code spelunking\". It is basically recursive grep on steroids and was written by one of our fellow Parrot hackers, @petdance. http://betterthangrep.com","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1357267659,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExODcwNDM2","github-url":"https://github.com/parrot/parrot/issues/175#issuecomment-11870436"},"message":"Oops! I mistakenly said that #parrot was on Freenode, but it is actually on irc.perl.org . Thanks to @coke for noticing.","files":null},{"type":3,"author":{"id":"3a88bca8b08bbf0fed7e0e78ae35bc543d83152b"},"timestamp":1357495666,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExOTMxNzE0","github-url":"https://github.com/parrot/parrot/issues/175#issuecomment-11931714"},"message":"Thanks again for all the help. \n\nI felt really bad for just discussing and not writing any code so here is an simple benchmark for sort function on FixedIntegerArray. It takes a command line argument -- how many integers to sort. \n\nPlease have a look at it and let me know what you think.","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1357497376,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExOTMyMTQ0","github-url":"https://github.com/parrot/parrot/issues/175#issuecomment-11932144"},"message":"Looks good for the start. I added it as branch `mrshu/simple_sort_benchmark-gh175`.\nPlease provide a good default `N`, and add similar code for strings and PMC, and add \nsome timing code and a small comparison.\n\nInteresting timings would be fixed against resizable, and int against other types (with custom sort cmp methods).","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1357499061,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExOTMyNDg5","github-url":"https://github.com/parrot/parrot/issues/175#issuecomment-11932489"},"message":"My suggestion for a default N is 10,000\n\n@rurban do we have an example of any other benchmarks that do their own timing/comparison?\n\nSince one of the main reasons to have this benchmark is to run it in continuous integration, it might be better to have each kind of sorting benchmark as a separate script, so we can get the individual timing information.","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1364171343,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1MzczMDc2","github-url":"https://github.com/parrot/parrot/issues/175#issuecomment-15373076"},"message":"We have a bunch of sorting benchmarks now, thanks to @paultcochrane and @mrshu ! Closing.","files":null}]}