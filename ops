{"version":1,"ops":[{"type":3,"author":{"id":"507abfae537e007c08969e763a32a0acbd878b1b"},"timestamp":1341989041,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY4OTkzMDI=","github-url":"https://github.com/parrot/parrot/issues/798#issuecomment-6899302"},"message":"On Tuesday 10 July 2012 23:28:55 you wrote:\n\n\u003e A fresh morning, gives us a fresh segmentation violation. And, I even know\n\u003e where. When (in the embedded context of mod_parrot) I call upon 'sleep(1)'\n\u003e to wait for a second I receive a segmentation violation, with the following\n\u003e backtrace:\n\u003e \n\u003e #0  0xb78269b7 in Parrot_cx_stop_task (interp=0x80099270, next=0x8059182c)\n\u003e     at src/scheduler.c:328\n\u003e #1  0xb7827450 in Parrot_cx_schedule_sleep (interp=0x80099270, time=1,\n\u003e     next=0x8059182c) at src/scheduler.c:641\n\u003e #2  0xb77b3467 in Parrot_sleep_ic (cur_opcode=0x80591824, interp=0x80099270)\n\u003e at src/ops/core_ops.c:22117\n\u003e #3  0xb78201d7 in runops_fast_core (interp=0x80099270,\n\u003e     runcore_unused=0x8016e660, pc=0x80591824) at src/runcore/cores.c:499\n\u003e #4  0xb781f719 in runops_int (interp=0x80099270, offset=0)\n\u003e     at src/runcore/main.c:220\n\u003e #5  0xb77f6be0 in runops (interp=0x80099270, offs=0) at src/call/ops.c:126\n\u003e #6  0xb77f001c in Parrot_pcc_invoke_from_sig_object (interp=0x80099270,\n\u003e     sub_obj=0x801c1a30, call_object=0x801aebbc) at src/call/pcc.c:338\n\u003e #7  0xb77d2823 in Parrot_api_pmc_invoke (\n\u003e     interp_pmc=interp_pmc@entry=0x8016a400, sub=0x801c1a30,\n\u003e     signature=0x801aebbc) at src/embed/pmc.c:544\n\u003e #8  0xb7fda7b4 in mod_parrot_run (interp=interp@entry=0x8016a400,\n\u003e     req=req@entry=0x800f9390, compilerName=0x80086348 \"winxed\")\n\u003e     at mod_parrot_run.c:66\n\u003e \n\u003e (The rest is all apache). Closer inspection gives us that interp-\u003ecur_task\n\u003e is 0x0, and the local task variable is the same. Thus we crash at exactly\n\u003e line 328 of src/scheduler.c, which looks like this:\n\u003e \n\u003e #327    PMC \\* const task = Parrot_cx_current_task(interp);\n\u003e #328    Parrot_Task_attributes \\* const tdata = PARROT_TASK(task);\n\u003e \n\u003e My gut feeling is that this is an embedding API issue. Any comments are\n\u003e greatly appreciated.\n\nYou are not running the scheduler's outer runloop and therefore are not using \ngreen threads. The sleep implementation depends on green threads being active, \nwhich is why it fails in your case. I was not aware of another way to have \nParrot start executing code but Parrot_pf_execute_bytecode_program\n\nWhat exactly are you trying to do?\n\nStefan","files":null},{"type":3,"author":{"id":"0a92d3f9f01a5a4514d86646f7597e2b20e9fd61"},"timestamp":1341993370,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5MDAzNDU=","github-url":"https://github.com/parrot/parrot/issues/798#issuecomment-6900345"},"message":"The other way to start parrot executing code is to:\n- Load bytecode using Parrot_api_load_bytecode_file\n- 'Readify' this bytecode using Parrot_api_ready_bytecode (i.e., bring it into the interpreter, returning its main subroutine)\n- Invoke this subroutine using Parrot_pmc_invoke\n\nAnd this is useful for me as it allows me to pass multiple (complex) arguments to my loader functions, one of which is a pointer.\nThe workarround means passing those same arguments in an array, which is kludgey from my perspective. \nIn short, I believe the 'subroutine invocation' flow I described is legitimate.","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1342031078,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5MTUwNjY=","github-url":"https://github.com/parrot/parrot/issues/798#issuecomment-6915066"},"message":"I agree that @bdw's workflow is legitimate. It is just that nobody has tickled this codepath from the new embedding API, previously. @niner what are our options for making it work?","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1342036395,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5MTc1Nzg=","github-url":"https://github.com/parrot/parrot/issues/798#issuecomment-6917578"},"message":"@bdw: Can you please try the threads branch? I assume it will work over there.","files":null},{"type":3,"author":{"id":"0a92d3f9f01a5a4514d86646f7597e2b20e9fd61"},"timestamp":1342084619,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5MzA1MDg=","github-url":"https://github.com/parrot/parrot/issues/798#issuecomment-6930508"},"message":"@rurban The fault persists with the threads branch. I somehow can't get debugging symbols with my local installation of gdb, unfortunately, so I can't really help with.\n\nFor others whishing to reproduce it, just clone mod_parrot.git, run Configure.pl, and type 'make test'. It should eventually launch gdb. Then, request http://localhost:8000/streaming.wxd; this should hang, and gdb should have caught a segfault.\n\nI'm thinking of ways to make it work, but most of them require some restructuring of parrot as far as i can tell.\nFor the record and those worrying, I'm not stuck on this, there are plenty of other things I can and need to do.","files":null},{"type":3,"author":{"id":"507abfae537e007c08969e763a32a0acbd878b1b"},"timestamp":1342085973,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5MzA4OTY=","github-url":"https://github.com/parrot/parrot/issues/798#issuecomment-6930896"},"message":"On Wednesday 11 July 2012 11:24:50 you wrote:\n\n\u003e I agree that @bdw's workflow is legitimate. It is just that nobody has\n\u003e tickled this codepath from the new embedding API, previously. @niner what\n\u003e are our options for making it work?\n\nSomehow the invocation has to end in a task being scheduled and \nParrot_cx_outer_runloop being called.\n\nIf the only reason for using Parrot_pmc_invoke instead of \nParrot_pf_execute_bytecode_program is the single vs. multiple parameters \nissue, then we could just provide a convenience function which packs the \nparameters into an array. The called function would still have to unpack the \nparameters though.\n\nWe could also simply make Parrot_cx_schedule_sleep more resilient in this \nsituation and just issue a sleep() call if green threads is not active. But \nthis would not help in other cases where the code assumes that there's an \nactive task. That path would lead to a whole lot of complications for a little \nconvenience.","files":null},{"type":3,"author":{"id":"0a92d3f9f01a5a4514d86646f7597e2b20e9fd61"},"timestamp":1342086987,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5MzEyMTQ=","github-url":"https://github.com/parrot/parrot/issues/798#issuecomment-6931214"},"message":"@niner It is a bit more subtle than that. If, for example, you run a compiler via the api, you can do this now, but only using pmc_invoke. You can use Parrot_api_pmc_invoke for callling different functions of a script (or different methods on an object); I think this is useful for an embedded language. For me, this is convenience; for other uses it is a necessity. I will post a report on the call stack for both approaches here.","files":null},{"type":3,"author":{"id":"0a92d3f9f01a5a4514d86646f7597e2b20e9fd61"},"timestamp":1342097903,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5MzQzMTA=","github-url":"https://github.com/parrot/parrot/issues/798#issuecomment-6934310"},"message":"What is boils down to:\nParrot_api_pmc_invoke calls Parrot_pcc_invoke_from_sig_object, and this starts running code \nParrot_api_run_bytecode calls Parrot_pf_execute_bytecode_program which calls Parrot_cx_begin_execution which calls Parrot_cx_outer_runloop which calls Parrot_ext_call which calls Parrot_pcc_invoke_from_sig_object\n\nNow, I am confused, because there is no obvious method to make the first and the second method converge somewhere before Parrot_pcc_invoke_from_sig_object.\nI am very confused in general.\nWould it be a reasonable thing to create a task for the interpreter upon running construction? \nI'm thinking some more on this.","files":null},{"type":3,"author":{"id":"507abfae537e007c08969e763a32a0acbd878b1b"},"timestamp":1342119348,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5NDQyNTk=","github-url":"https://github.com/parrot/parrot/issues/798#issuecomment-6944259"},"message":"\u003e Would it be a reasonable thing to create a task for the interpreter upon\n\u003e running construction? I'm thinking some more on this.\n\nThat alone would not be enough. For sleep to work, the currently executed code \nhas to be this task.\n\nTasks are rather simple. They take a code PMC which can be anything invokable \nand an optional data PMC which it passes on as parameter. This is actually not \nthat different from Parrot_pcc_invoke_from_sig_object which both \nParrot_api_pmc_invoke and Parrot_ext_call end up calling: a sub and one PMC as \nparameter.\n\nSo maybe all we need is a flag on the task, so it knows wether to pass data as \nparameter for Parrot_ext_call or to use it as signature for \nParrot_pcc_invoke_from_sig_object directly. Maybe we can even detect the use \ncase automatically. Or instead of using a flag, create the call signature on \nsetting the data attribute (if it is not a signature already) and always use \nParrot_pcc_invoke_from_sig_object.\n\nThe task creation and scheduling could be hidden in Parrot_api_pmc_invoke \nthereby unifying the call stacks of executed code. I'm not 100 % sure if the \nsemantics are really the same as a simple sub invoke and obviously it can only \nbe a slower. Any thoughts on this?","files":null},{"type":3,"author":{"id":"507abfae537e007c08969e763a32a0acbd878b1b"},"timestamp":1342267290,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY5ODIzODM=","github-url":"https://github.com/parrot/parrot/issues/798#issuecomment-6982383"},"message":"I have implemented my suggestion in the gh798_embed_api_green_threads branch (based on the threads branch). Does it fix the issue for you?\n\nThe existing tests do pass with this branch, but it's incomplete, since in the examples the scheduler's initialization is not done fully. Have to move threading initialization out of Parrot_cx_begin_execution and somewhere where it's run even in embedding situations, e.g. Parrot_api_make_interpreter","files":null},{"type":3,"author":{"id":"0a92d3f9f01a5a4514d86646f7597e2b20e9fd61"},"timestamp":1342428698,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDcwMDExOTk=","github-url":"https://github.com/parrot/parrot/issues/798#issuecomment-7001199"},"message":"Yes, this does fix it. So, I'm happy for now.","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1416750295,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDY0MTE4MzIx","github-url":"https://github.com/parrot/parrot/issues/798#issuecomment-64118321"},"message":"This fix d215d68d7ec6d6e5685fc7261dc110247af4a287 is in master","files":null},{"type":4,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1416750295,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTk3MzE1Mjgw"},"status":2}]}