{"version":1,"ops":[{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1265369058,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzMDg=","github-url":"https://github.com/parrot/parrot/issues/475#issuecomment-3503308"},"message":"\u003cp\u003e\nIIRC, there was some discussion on #parrot on Jan 31 to the effect that the problem may be specific to FAT32 filesystems.  It was reported that such systems can only resolve time intervals like the ones being tested here to 2 second intervals.\n\u003c/p\u003e\n\n\u003cp\u003e\nCan anyone comment?\n\u003c/p\u003e\n\n\u003cp\u003e\nIf this is true (I'm ignorant here), is there some way we can probe for FAT32?\n\u003c/p\u003e\n\n\u003cp\u003e\nOr are we testing the untestable?\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1265407858,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzMDk=","github-url":"https://github.com/parrot/parrot/issues/475#issuecomment-3503309"},"message":"\u003cp\u003e\n\u003ca   href=\"http://en.wikipedia.org/wiki/File_Allocation_Table\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003ehttp://en.wikipedia.org/wiki/File_Allocation_Table\u003c/a\u003e , look for \"2 second\".\n\u003c/p\u003e\n\n\u003cp\u003e\nWe could probe for fat32, but we could also just cheat and just add a 2 second sleep to the test before modifying the file.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1265410070,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzMTA=","github-url":"https://github.com/parrot/parrot/issues/475#issuecomment-3503310"},"message":"\u003cp\u003e\nYes, there's a limit to the timing resolution.  If you look at perl5's test t/op/stat.t, you'll see an amazing (or depressing, depending on your point of view) accumulation of skips and workarounds.  There's even a note that for cygwin, a 3-second delay was needed (though that dates back to 2001; I don't know if it's still true.)  That test can still get fooled if a Unix user is working on a FAT filesystem (yes, that does happen).  Adding a sleep is about the most reliable thing you can do.  Of course if you add too many sleeps throughout the test directory, you noticeably slow down the whole 'make test' process.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1265447557,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMzMTE=","github-url":"https://github.com/parrot/parrot/issues/475#issuecomment-3503311"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1422#comment:2\" title=\"Comment 2 for Ticket #1422\"\u003ecoke\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n \u003ca   href=\"http://en.wikipedia.org/wiki/File_Allocation_Table\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003ehttp://en.wikipedia.org/wiki/File_Allocation_Table\u003c/a\u003e , look for \"2 second\".\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nThanks for the link.\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n We could probe for fat32, but we could also just cheat and just add a 2 second sleep to the test before modifying the file.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nHmm, not sure whether that would work here.  It appears to me that in this test we're \u003cstrong\u003enot\u003c/strong\u003e modifying the file.  So I don't know where we would stick the \u003ctt\u003esleep\u003c/tt\u003e.\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e     96 # Create a file in a directory that does not exist.\n     97 my $f3 = Parrot::IO::File-\u0026gt;new( tmp_file_path(\n           't', 'one', 'two', 'file3        .bar' ) );\n     98 ok( $f3, 'file new' );\n...\n    158 # Status (stat info)\n    159 my $time = time;\n    160 ok( !$f3-\u0026gt;modified_since($time), 'not modified_since' );\n    161\n    162 # So that the modified time will be greater than $time.\n    163 sleep 1 while time() \u0026lt;= ( $time + 1 );\n\u003c/pre\u003e\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null}]}