{"version":1,"ops":[{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1412784126,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU4MzgxNzgy","github-url":"https://github.com/parrot/parrot/issues/1095#issuecomment-58381782"},"message":"imcc: `set_lexical()` gets those wrongly quoted names from the parser\n\n```\n .lex 'bar\\o', $P0 =\u003e \"bar\\\\o\" # correct\n .lex \"foo\\\\o\", $P0 =\u003e \"foo\\\\\\\\o\" # wrong\n .lex \"foo\\o\", $P0 =\u003e \"foo\\\\o\" # wrong\n```\n\nand this is also wrongly parsed:\n\n```\nstore_lex \"foo\\o\", P1 =\u003e \"fooo\" #wrong\n```","files":null},{"type":2,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1412785256,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50MTc1ODUzMzMw"},"title":"wrongly parsed quoted names, like .lex 'foo\\o', .lex \"foo\\\\o\", set_global \"foo\\o\"","was":"wrongly parsed double-quoted .lex names, .lex \"foo\\\\o\""},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1412837960,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU4NDcwNDcx","github-url":"https://github.com/parrot/parrot/issues/1095#issuecomment-58470471"},"message":"There's more nonsense going on:\n- A parsed name (a STRINGC) can be single or double-quoted, but both are treated as single-quoted (unescaped). But not when it's a \n  - HLL: only \" + unescaped\n  - only mk_sub_address_fromc (sub, outer, sub_label_op_c) is correct, i.e. checks for \" or ' and unescapes only \"\n  - loadlib only accepts \" and unescapes\n  - pmc_const accepts both, strips and treats both as unescaped (mk_pmc_const_named)\n- all other names are stored as constant **with** the surrounding quotes. I.e. you can specify 'str' or \"str\" but both are different strings then.\n- unknown escape sequences are ignored, e.g. \"\\o\" will be \"o\", \\\" will be \" and more. I changed this with 940ede1e6889a015c2d808b470370d63e9450846 to die on unknown escape sequences for A-Za-z, but silently skip the \\ with other chars, as before. To allow `\\\", \\\\``` and more. See GH #1103\n- empty strings cannot occur in imcc, as they are either \"\" or ''\n\nThe encoding and quoting is later resolved in `IMCC_string_from__STRINGC` and `IMCC_string_from_reg` with proper unescaping, but the constants are at this time already interned in the symbol table.\n\ne.g. annotated `t/compilers/imcc/syn/clash_15.pir` (added some tracings):\n\n```\n#    mk_const ''bar\\o''\n#    mk_const ''ok 1''\n#    mk_const ''bar\\o''\n#    mk_const '\"foo\\\\o\"'\n#    mk_const ''ok 2''\n#    mk_const '\"foo\\\\o\"'\n#    mk_const '\"foo\\\\o\"'\n#    mk_const '\"foo\\o\"'\n#    mk_const ''ok 3''\n#    mk_const '\"fooo\"'\n#    mk_const ''ok 4''\n#    mk_const '\"foo\\o\"'\n#    mk_const '\"foo\\o\"'\n#    mk_const '\"fooo\"'\n#    mk_const '\"()\"'\n0000 set S0, \"bar\\\\o\"\n0003 box P0, \"ok 1\"\n0006 set_global S0, P0\n0009 get_global P1, \"bar\\\\o\"\n000c say P1\nok 1\n000e set S1, \"foo\\\\o\"\n0011 box P0, \"ok 2\"\n0014 set_global \"foo\\\\o\", P0\n0017 get_global P1, \"foo\\\\o\"\n001a say P1\nok 2\n001c set S2, \"fooo\"\n001f box P0, \"ok 3\"\n0022 set S3, \"fooo\"\n0025 box P1, \"ok 4\"\n0028 set_global \"fooo\", P0\n002b get_global P2, \"fooo\"\n002e say P2\nok 3\n0030 get_global P2, \"fooo\"\n0033 say P2\nok 3\n0035 set_returns PC0\n```\n\nand the same for the .lex testcase `clash_14.pir`:\n\n```\n#    mk_const 'bar\\o'\n#    .lex 'bar\\o'\n#    mk_const ''ok 1''\n#    mk_const ''bar\\o''\n#    mk_const ''bar\\o''\n#    mk_const 'foo\\\\o'\n#    .lex 'foo\\\\o'\n#    mk_const ''ok 2''\n#    mk_const '\"foo\\\\o\"'\n#    mk_const '\"foo\\\\o\"'\n#    mk_const 'foo\\o'\n#    .lex 'foo\\o'\n#    mk_const ''ok 3''\n#    mk_const '\"foo\\o\"'\n#    mk_const '\"foo\\o\"'\n#    mk_const '\"()\"'\n0000 box P1, \"ok 1\"\n0003 store_lex \"bar\\\\o\", P1\n#    store_lex_sc_p 'bar\\o'\n0006 find_lex P2, \"bar\\\\o\"\n#    lexpad.get 'bar\\o'\n#    find_lex_p_sc 'bar\\o'\n0009 say P2              \nok 1\n000b box P1, \"ok 2\"      \n000e store_lex \"foo\\\\o\", P1\n#    store_lex_sc_p 'foo\\o'\n0011 find_lex P2, \"foo\\\\o\" \n#    lexpad.get 'foo\\o'\n#    find_lex_p_sc 'foo\\o'\n0014 say P2                \nok 2\n0016 box P1, \"ok 3\"        \n0019 store_lex \"fooo\", P1  \n#    store_lex_sc_p 'fooo'\nLexical 'fooo' not found\n```","files":null},{"type":5,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1413530678,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDE3OTg2ODM1Nw=="},"added":["Bug"],"removed":[]},{"type":5,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1413530682,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDE3OTg2ODM5MA=="},"added":["Pri-critical"],"removed":[]},{"type":5,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1413530684,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDE3OTg2ODQxMA=="},"added":["Sev-high"],"removed":[]},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1413530812,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NDc2MTY3","github-url":"https://github.com/parrot/parrot/issues/1095#issuecomment-59476167"},"message":"Clarification, as the fix will need some time: The workaround for perl6 and other HLLs is to use single-quotes for `.lex` names. Single quotes are preferred, only some special ops require double-quotes: `HLL` and `loadlib`.","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1414242951,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYwNDgyNDM0","github-url":"https://github.com/parrot/parrot/issues/1095#issuecomment-60482434"},"message":"Merged a documentation warning into 6.10.0:\n\n**Limitation**: For now use only single-quotes for lexical variable\nnames!  Double-quoted lexical names in `.lex` are treated as already\nescaped, i.e. only as single-quoted and are not unescaped.","files":null},{"type":5,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1414242980,"metadata":{"github-id":"MDE0OlVubGFiZWxlZEV2ZW50MTgzNjQ0OTYy"},"added":[],"removed":["Bug"]},{"type":5,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1414242984,"metadata":{"github-id":"MDE0OlVubGFiZWxlZEV2ZW50MTgzNjQ0OTY1"},"added":[],"removed":["Pri-critical"]},{"type":5,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1414242986,"metadata":{"github-id":"MDE0OlVubGFiZWxlZEV2ZW50MTgzNjQ0OTY2"},"added":[],"removed":["Sev-high"]},{"type":5,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1414243001,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDE4MzY0NDk4OA=="},"added":["Todo-feature"],"removed":[]},{"type":2,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1414244358,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50MTgzNjQ2OTM4"},"title":"wrongly parsed double-quoted .lex names, .lex \"foo\\\\o\"","was":"wrongly parsed quoted names, like .lex 'foo\\o', .lex \"foo\\\\o\", set_global \"foo\\o\""},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1415692068,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyNTEyODc1","github-url":"https://github.com/parrot/parrot/issues/1095#issuecomment-62512875"},"message":"Took the easy road, and just unescaped double-quoted .lex string constants for now in `smoke-me/lexqnames-gh1095`","files":null},{"type":4,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1415695868,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTkxMjc3NTE0"},"status":2},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1415695876,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYyNTE4Mzgw","github-url":"https://github.com/parrot/parrot/issues/1095#issuecomment-62518380"},"message":"smoked fine on nqp and perl6 also.","files":null}]}