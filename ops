{"version":1,"ops":[{"type":3,"author":{"id":"0c1ee4af33970ee80260d659da672a9306b51181"},"timestamp":1269833675,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM1Mzg=","github-url":"https://github.com/parrot/parrot/issues/545#issuecomment-3503538"},"message":"\u003cp\u003e\nThese opcodes are already magical, in that they don't actually take a FIA as the first argument, they take a string and convert it into an FIA.\n\u003c/p\u003e\n\n\u003cp\u003e\nCompletely removing the magic would require a separate opcode call for each arg, which is unnecessarily expensive. The general idea (I discussed it with bacek during the CallContext refactor, but it doesn't look like I documented it anywhere) is to push the magic further: instead of creating a FIA and using it to directly poke into the opcode memory in set_args, etc, IMCC will create the CallContext directly from the signature string and following arguments. The signature would still be a single PMC argument, just a CallContext argument instead of an FIA.\n\u003c/p\u003e\n\n\u003cp\u003e\nOne possible way of \"regularizing\" the magic would be to say that set_args, etc always and only take a single PMC argument (a CallContext), and introduce some new syntax to PIR for aggregate creation.\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e  .local pmc array, hash, callrecord\n  array = ( 'a', 'b', 3, 4 )\n  hash = ( 'foo' =\u0026gt; 'bar', 'baz' =\u0026gt; 1 )\n  callrecord = ( 'hello', 'name' =\u0026gt; 'Fred' ) :call_sig('SSnS')\n  set_args callrecord\n\u003c/pre\u003e\u003cp\u003e\nIt's not particularly strange, since it's pretty much the same syntax we use now for subroutine calls and returns. The old 'set_args' etc names wouldn't really fit at that point, but then adding new opcodes for the new behavior is a clean deprecation path.\n\u003c/p\u003e","files":null}]}