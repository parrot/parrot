{"version":1,"ops":[{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1336355378,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1NDI3MDQ=","github-url":"https://github.com/parrot/parrot/issues/372#issuecomment-5542704"},"message":"morph VTABLE _is_ odd. It's behavior is poorly defined and it's abused too often. Frankly, there is no behavior from morph VTABLE, depending on the types involved, which I would consider \"odd\". I suggest we don't try to test it and instead move to deprecate morph.","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1336411040,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1NTUyNTA=","github-url":"https://github.com/parrot/parrot/issues/372#issuecomment-5555250"},"message":"+1 to remove/deprecate VTABLE_morph","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1355292320,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExMjc3OTE0","github-url":"https://github.com/parrot/parrot/issues/372#issuecomment-11277914"},"message":"VTABLE_morph is still around. Anybody want to volunteer to deprecate it now and remove it after the next stable release?","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1364235101,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NDEwNjI0","github-url":"https://github.com/parrot/parrot/issues/372#issuecomment-15410624"},"message":"VTABLE_morph is still on the chopping block. This might make a good task for @paultcochrane . It would be nice to get this removed before 5.3.0 is cut.","files":null},{"type":3,"author":{"id":"bee7e06ff9c483ab433edaff12e7fcad590d4df3"},"timestamp":1364850360,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NzM3MzQ1","github-url":"https://github.com/parrot/parrot/issues/372#issuecomment-15737345"},"message":"If VTABLE_morph has been used to change an object (for example into PMCNULL), how should the existing code behave?  For example in `src/call/args.c` at line 346, the morph call seems to set `call_object` to `PMCNULL`.  How would this be handled \"normally\" (meaning without VTABLE_morph)?","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1364851077,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDE1NzM3OTEy","github-url":"https://github.com/parrot/parrot/issues/372#issuecomment-15737912"},"message":"@paultcochrane good questions. I would break some layers of abstraction and just do whatever VTABLE_morph is doing under the hood, directly in args.c. You may want to define a macro to accomplish that in args.c .\n\nBasically, the morph VTABLE is a bad idea, especially in args.c, which just about every function call in Parrot has to go through. Removing morph may actually speed up function calls dramatically.","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1394068470,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM2ODE0OTI1","github-url":"https://github.com/parrot/parrot/issues/372#issuecomment-36814925"},"message":"Actually this branch is a bit slower.\n\n```\nfor t in t/benchmark/*.pir; do    ./parrot -O2 -o $t.O2.pbc $t;    ./parrot -O1 -o $t.O1.pbc $t;    ./parrot -o $t.O0.pbc $t; done\ntime for t in t/benchmark/*.O0.pbc; do ./parrot $t \u003e/dev/null; done\n```\n\n0m4.920s vs 0m4.759s i.e. 3.4% slower","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1394343514,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM3MTE5Njkw","github-url":"https://github.com/parrot/parrot/issues/372#issuecomment-37119690"},"message":"-1 we need to keep the morph vtable and the morph ops, esp. to enable coercion (casting) of user PMCs, which should not be done with set_pmc alone.\n\nset_pmc is called by assign_p_p, but this never calls morph.\nmorph should be explicit and not implicit.\ni.e. not `P1 = P2`\nbut `P1 = morph P2`, as in C: `myclass p1 = (myclass)p2;`\n\nAnd for the records: I still disagree with the destructive behavior of simply deprecating required functionality, without any close understanding and communication downstream. If there is bug, fix it, and do not remove the feature. There are countless examples of this.\n\nAnd it was pretty trivial to fix","files":null}]}