{"version":1,"ops":[{"type":1,"author":{"id":"aa8915ba52969f979af836ca4704fd27e613004f"},"timestamp":1250470139,"metadata":{"github-id":"MDU6SXNzdWUyODQ4NzA1","github-url":"https://github.com/parrot/parrot/issues/497","origin":"github"},"title":"Probable edge-condition bug in PBC file generation","message":"For some time now (weeks), I've been dealing with an intermittent bug (apparently) with PBC file generation at the bottom of the PGE/NQP tool chain.\n\nI'm working on a language compiler, using PGE+NQP with the generated language directory structure provided by the standard scripts.\n\nAt odd intervals, I'll make my compiler, and when I try to run \"close.pbc\" I'll get something like this:\n\n```\nCONSTANT_close.pir: Size in directory 231772 doesn't match size 0 at offset 0x38010\nPackFile_unpack segment 'FIXUP_close.pir' directory length 6236 length in file 6236 needed 6224 for unpack\nPackFile_unpack segment 'CONSTANT_close.pir' directory length 0 length in file 0 needed 8 for unpack\nPackFile_unpack segment 'PIC_idx_close.pir' directory length 0 length in file 0 needed 4 for unpack\nPackFile_unpack segment 'BYTECODE_close.pir_DB' directory length 0 length in file 0 needed 8 for unpack\nIllegal fixup offset (2) in enum_fixup_sub\n```\n\nExcept that the integer literals are usually different.\n\n== Workaround ==\n\nI have noticed that the problem seems to relate to the code being assembled. As a result, I find that if I doubly-include some .pir file the problem goes away - until the next time.\n\nI have a set of library modules that I jam together into a single file for final assembly:\n\n```\nCOMPILER_LIBS_PIR := \\\n    library/close/Compiler/Array.pir            \\\n    library/close/Compiler/Config.pir           \\\n    library/close/Compiler/Dumper.pir       \\\n    library/close/Compiler/Lookups.pir      \\\n    library/close/Compiler/Messages.pir     \\\n    library/close/Compiler/MessageVisitor.pir   \\\n    library/close/Compiler/Namespaces.pir       \\\n    library/close/Compiler/Node.pir         \\\n    library/close/Compiler/PrettyPrintVisitor.pir   \\\n    library/close/Compiler/Scopes.pir           \\\n    library/close/Compiler/String.pir           \\\n    library/close/Compiler/SymbolLookupVisitor.pir  \\\n    library/close/Compiler/SymbolResolutionVisitor.pir  \\\n    library/close/Compiler/Symbols.pir      \\\n    library/close/Compiler/TypeResolutionVisitor.pir\\\n    library/close/Compiler/Types.pir            \\\n    library/close/Compiler/Types.pir            \\\n    library/close/Compiler/Visitor.pir\n```\n\nThese files are concatenated into a single `src/gen_library.pir` that is included into my close.pir compiler driver.\n\nIf I pick one - Types.pir in this case - and double-include it, it pretty consistently changes whatever is happening enough that the generated .PBC file becomes valid again.\n\nIt is for this reason that I suspect the problem is some kind of \"edge case\" - maybe a page boundary, or some 16-bit -ism. I have no real evidence, though.\n\nOriginally http://trac.parrot.org/parrot/ticket/928","files":null}]}