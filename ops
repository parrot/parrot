{"version":1,"ops":[{"type":1,"author":{"id":"8c86ede03c8e80b0dad5131138f96e957a4ee66b"},"timestamp":1381219948,"metadata":{"github-id":"MDU6SXNzdWUyMDY2NDU0MA==","github-url":"https://github.com/parrot/parrot/issues/1013","origin":"github"},"title":"Vtable-overridden invokable loses itself as argument","message":"Reported by: zefram@fysh.org\n\nIf I override the \"invoke\" vtable entry for a user-defined class, and then call an object of that class as a function, and pass in the object being invoked as the first argument, then that first argument gets dropped from the invocation. Demonstration (two working cases and then the failing case):\n\n```\n$ cat t52.pir \n.sub \"\" :anon :init :load\n       $P0 = newclass \"MyFunc\"\n.end\n.namespace [\"MyFunc\"]\n.sub invoke :vtable\n       .param pmc a\n       say \"ok\"\n       .return ()\n.end\n.namespace []\n.sub main :main\n       $P0 = new \"MyFunc\"\n       $P1 = new \"MyFunc\"\n       $P0(\"a\")\n       $P0($P1)\n       $P0($P0)\n.end\n```\n\n```\n$ ./parrot t52.pir \nok\nok\ntoo few positional arguments: 1 passed, 2 (or more) expected\ncurrent instr.: 'parrot;MyFunc;invoke' pc 6 (t52.pir:5)\ncalled from Sub 'main' pc 40 (t52.pir:16)\n```\n\nAs you can see, passing in an unrelated object (a string being autoboxed) works fine. Passing in a different object of the invokable class also works. The failure occurs only when the first argument is the object being invoked. The object does still get invoked; if the signature will accept fewer arguments then the body of the invoke method runs. If there are arguments after the one that disappears then they are received normally, even if they are also the object being invoked.\n\nIt looks as though the culprit is this code in the invoke method in object.pmc:\n\n```\n    if ((VTABLE_elements(INTERP, call_sig) == 0\n    ||   VTABLE_get_pmc_keyed_int(INTERP, call_sig, 0) != SELF))\n        VTABLE_unshift_pmc(INTERP, call_sig, SELF);\n```\n\nIt should unshift the invocant unconditionally.\n\nI see no way to work around this bug. If I know that I'm calling an invoke-overridden object, I could pass in the invocant as an extra first argument, suppressing the conditional unshift. But the point of overriding invoke is that I don't have to know what kind of thing I'm calling. If I pass an ordinary Sub itself as a first argument then that behaves as an ordinary argument. So there's no way to call an invokable that works consistently.\n\n-zefram\n\n```\nSummary of my parrot 5.7.0 configuration:\n configdate='Sat Oct  5 12:42:43 2013 GMT'\n Platform:\n   osname=linux, archname=x86_64-linux-gnu-thread-multi\n   perl=/usr/bin/perl\n```","files":null}]}