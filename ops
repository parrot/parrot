{"version":1,"ops":[{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1280736669,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3NDM=","github-url":"https://github.com/parrot/parrot/issues/613#issuecomment-3503743"},"message":"\u003cp\u003e\nReplying to \u003ca class=\"assigned ticket\" href=\"http://trac.parrot.org/parrot/ticket/1726\" title=\"todo: Missing POD in .pmc files (and a couple of others) (assigned)\"\u003emikehh\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n at r48245 make headerizer furnishes the following output:\n\u003c/p\u003e\n\u003cpre class=\"wiki\"\u003e\u0026gt; compilers/imcc/imcc.y: adv_named_set_u has no POD\n\u0026gt; compilers/pirc/src/main.c: process_file has no POD\n\u0026gt; compilers/pirc/src/pircompunit.c: set_sub_multi_types has no POD\n\u0026gt; compilers/pirc/src/pirparser.c: YYID  has no POD\n...\n\u003c/pre\u003e\u003c/blockquote\u003e\n\n\u003cp\u003e\nmikehh:  Are these \u003ctt\u003ehas no POD\u003c/tt\u003e messages useful from the standpoint of someone working with \u003ctt\u003emake headerizer\u003c/tt\u003e?  Or would we be better off moving them entirely to the output of a new \u003ci\u003et/codingstd/pmc_docs.t\u003c/i\u003e file?\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"96fb2e2e33b59677e3a85ec74746c085275c50d1"},"timestamp":1281300828,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3NDQ=","github-url":"https://github.com/parrot/parrot/issues/613#issuecomment-3503744"},"message":"\u003cp\u003e\nI don't think that that particular message (... has no POD) is of particular relevance to make headerizer (could be wrong ... comments?) but having a specific test for it would be a good thing.\n\u003c/p\u003e\n\n\u003cp\u003e\nWe could have a TODO list initially as we did with c_function_docs.t and a Wiki entry, until we have the entries done.\n\u003c/p\u003e\n\n\u003cp\u003e\nCheers, Michael (mikehh)\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1281310253,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3NDU=","github-url":"https://github.com/parrot/parrot/issues/613#issuecomment-3503745"},"message":"\u003cp\u003e\nCreated branch tt1726_pmc_pod to work on this TT.  Initial objective will be to create a \u003ci\u003et/codingstd/pmc_docs.t\u003c/i\u003e that works somewhat like \u003ci\u003ec_function_docs.t\u003c/i\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1281326973,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3NDY=","github-url":"https://github.com/parrot/parrot/issues/613#issuecomment-3503746"},"message":"5828 byte attachment from jkeenan\nat http://trac.parrot.org/parrot/raw-attachment/ticket/1726/bigint\n\n``` 1..1\nnot ok 1 - src/pmc/bigint.pmc # TODO Missing function docs\n#   Failed (TODO) test 'src/pmc/bigint.pmc'\n#   at t/codingstd/pmc_docs.t line 93.\n# src/pmc/bigint.pmc\n# Undocumented functions:\n# \n# PARROT_CANNOT_RETURN_NULL\n# PARROT_WARN_UNUSED_RESULT\n# static BIGINT*\n# bigint_get_self(PARROT_INTERP, ARGIN(PMC *self))\n# Need:\n# =item C\u003cstatic BIGINT* bigint_get_self(PARROT_INTERP, PMC *self)\u003e\n# \n# PARROT_WARN_UNUSED_RESULT\n# PARROT_CANNOT_RETURN_NULL\n# static char *\n# bigint_get_string(PARROT_INTERP, ARGIN(PMC *self), int base)\n# Need:\n# =item C\u003cstatic char * bigint_get_string(PARROT_INTERP, PMC *self, int base)\u003e\n# \n# PARROT_WARN_UNUSED_RESULT\n# static INTVAL\n# bigint_cmp(PARROT_INTERP, ARGIN(PMC *self), ARGIN(PMC *value))\n# Need:\n# =item C\u003cstatic INTVAL bigint_cmp(PARROT_INTERP, PMC *self, PMC *value)\u003e\n# \n# PARROT_WARN_UNUSED_RESULT\n# static INTVAL\n# bigint_cmp_int(PARROT_INTERP, ARGIN(PMC *self), INTVAL value)\n# Need:\n# =item C\u003cstatic INTVAL bigint_cmp_int(PARROT_INTERP, PMC *self, INTVAL value)\u003e\n# \n# PARROT_WARN_UNUSED_RESULT\n# static double\n# bigint_get_double(PARROT_INTERP, ARGIN(PMC *self))\n# Need:\n# =item C\u003cstatic double bigint_get_double(PARROT_INTERP, PMC *self)\u003e\n# \n# PARROT_WARN_UNUSED_RESULT\n# static int\n# bigint_get_bool(PARROT_INTERP, ARGIN(PMC *self))\n# Need:\n# =item C\u003cstatic int bigint_get_bool(PARROT_INTERP, PMC *self)\u003e\n# \n# PARROT_WARN_UNUSED_RESULT\n# static long\n# bigint_get_long(PARROT_INTERP, ARGIN(PMC *self))\n# Need:\n# =item C\u003cstatic long bigint_get_long(PARROT_INTERP, PMC *self)\u003e\n# \n# static void\n# bigint_abs(PARROT_INTERP, ARGIN(PMC *self), ARGMOD(PMC *dest))\n# Need:\n# =item C\u003cstatic void bigint_abs(PARROT_INTERP, PMC *self, PMC *dest)\u003e\n# \n# static void\n# bigint_add_bigint(PARROT_INTERP, ARGIN(PMC *self), ARGIN(PMC *value), ARGMOD(PMC *dest))\n# Need:\n# =item C\u003cstatic void bigint_add_bigint(PARROT_INTERP, PMC *self, PMC *value, PMC\n# *dest)\u003e\n# \n# static void\n# bigint_add_bigint_int(PARROT_INTERP, ARGIN(PMC *self), INTVAL value, ARGMOD(PMC *dest))\n# Need:\n# =item C\u003cstatic void bigint_add_bigint_int(PARROT_INTERP, PMC *self, INTVAL\n# value, PMC *dest)\u003e\n# \n# static void\n# bigint_check_divide_zero(PARROT_INTERP, ARGIN(PMC *value))\n# Need:\n# =item C\u003cstatic void bigint_check_divide_zero(PARROT_INTERP, PMC *value)\u003e\n# \n# static void\n# bigint_clear(PARROT_INTERP, ARGIN(PMC *self))\n# Need:\n# =item C\u003cstatic void bigint_clear(PARROT_INTERP, PMC *self)\u003e\n# \n# static void\n# bigint_div_bigint(PARROT_INTERP, ARGIN(PMC *self), ARGIN(PMC *value), ARGMOD(PMC *dest))\n# Need:\n# =item C\u003cstatic void bigint_div_bigint(PARROT_INTERP, PMC *self, PMC *value, PMC\n# *dest)\u003e\n# \n# static void\n# bigint_div_bigint_int(PARROT_INTERP, ARGIN(PMC *self), INTVAL value, ARGMOD(PMC *dest))\n# Need:\n# =item C\u003cstatic void bigint_div_bigint_int(PARROT_INTERP, PMC *self, INTVAL\n# value, PMC *dest)\u003e\n# \n# static void\n# bigint_fdiv_bigint(PARROT_INTERP, ARGIN(PMC *self), ARGMOD(PMC *value), ARGMOD(PMC *dest))\n# Need:\n# =item C\u003cstatic void bigint_fdiv_bigint(PARROT_INTERP, PMC *self, PMC *value, PMC\n# *dest)\u003e\n# \n# static void\n# bigint_fdiv_bigint_int(PARROT_INTERP, ARGIN(PMC *self), INTVAL value, ARGMOD(PMC *dest))\n# Need:\n# =item C\u003cstatic void bigint_fdiv_bigint_int(PARROT_INTERP, PMC *self, INTVAL\n# value, PMC *dest)\u003e\n# \n# static void\n# bigint_init(PARROT_INTERP, ARGIN(PMC *self))\n# Need:\n# =item C\u003cstatic void bigint_init(PARROT_INTERP, PMC *self)\u003e\n# \n# static void\n# bigint_mod_bigint(PARROT_INTERP, ARGIN(PMC *self), ARGMOD(PMC *value), ARGMOD(PMC *dest))\n# Need:\n# =item C\u003cstatic void bigint_mod_bigint(PARROT_INTERP, PMC *self, PMC *value, PMC\n# *dest)\u003e\n# \n# static void\n# bigint_mod_bigint_int(PARROT_INTERP, ARGIN(PMC *self), INTVAL value, ARGMOD(PMC *dest))\n# Need:\n# =item C\u003cstatic void bigint_mod_bigint_int(PARROT_INTERP, PMC *self, INTVAL\n# value, PMC *dest)\u003e\n# \n# static void\n# bigint_mul_bigint(PARROT_INTERP, ARGIN(PMC *self), ARGIN(PMC *value), ARGMOD(PMC *dest))\n# Need:\n# =item C\u003cstatic void bigint_mul_bigint(PARROT_INTERP, PMC *self, PMC *value, PMC\n# *dest)\u003e\n# \n# static void\n# bigint_mul_bigint_int(PARROT_INTERP, ARGIN(PMC *self), INTVAL value, ARGMOD(PMC *dest))\n# Need:\n# =item C\u003cstatic void bigint_mul_bigint_int(PARROT_INTERP, PMC *self, INTVAL\n# value, PMC *dest)\u003e\n# \n# static void\n# bigint_neg(PARROT_INTERP, ARGIN(PMC *self), ARGMOD(PMC *dest))\n# Need:\n# =item C\u003cstatic void bigint_neg(PARROT_INTERP, PMC *self, PMC *dest)\u003e\n# \n# static void\n# bigint_pow_bigint_int(PARROT_INTERP, ARGIN(PMC *self), INTVAL value, ARGMOD(PMC *dest))\n# Need:\n# =item C\u003cstatic void bigint_pow_bigint_int(PARROT_INTERP, PMC *self, INTVAL\n# value, PMC *dest)\u003e\n# \n# static void\n# bigint_set(PARROT_INTERP, ARGMOD(PMC *dest), ARGIN(PMC *src))\n# Need:\n# =item C\u003cstatic void bigint_set(PARROT_INTERP, PMC *dest, PMC *src)\u003e\n# \n# static void\n# bigint_set_self(PARROT_INTERP, ARGMOD(PMC *self), ARGIN(BIGINT *value))\n# Need:\n# =item C\u003cstatic void bigint_set_self(PARROT_INTERP, PMC *self, BIGINT *value)\u003e\n# \n# static void\n# bigint_set_str(PARROT_INTERP, ARGMOD(PMC *self), ARGIN(const char *value), int base)\n# Need:\n# =item C\u003cstatic void bigint_set_str(PARROT_INTERP, PMC *self, const char *value,\n# int base)\u003e\n# \n# static void\n# bigint_sub_bigint(PARROT_INTERP, ARGIN(PMC *self), ARGIN(PMC *value), ARGMOD(PMC *dest))\n# Need:\n# =item C\u003cstatic void bigint_sub_bigint(PARROT_INTERP, PMC *self, PMC *value, PMC\n# *dest)\u003e\n# \n# static void\n# bigint_sub_bigint_int(PARROT_INTERP, ARGIN(PMC *self), INTVAL value, ARGMOD(PMC *dest))\n# Need:\n# =item C\u003cstatic void bigint_sub_bigint_int(PARROT_INTERP, PMC *self, INTVAL\n# value, PMC *dest)\u003e\n# \n# static void\n# int_check_divide_zero(PARROT_INTERP, INTVAL value)\n# Need:\n# =item C\u003cstatic void int_check_divide_zero(PARROT_INTERP, INTVAL value)\u003e\n# \n# Boilerplate only:\n# =item C\u003cstatic void bigint_set_double(PARROT_INTERP, PMC *self, double value)\u003e\n# \n```","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1281344917,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3NDc=","github-url":"https://github.com/parrot/parrot/issues/613#issuecomment-3503747"},"message":"\u003cp\u003e\nmikehh:\n\u003c/p\u003e\n\n\u003cp\u003e\nCan you review \u003ci\u003et/codingstd/pmc_docs.t\u003c/i\u003e in the \u003ci\u003ett1726_pmc_pod\u003c/i\u003e branch?\n\u003c/p\u003e\n\n\u003cp\u003e\nI began by cloning \u003ci\u003et/codingstd/c_function_docs.t\u003c/i\u003e.  It went remarkably smoothly.  (Why didn't we do this a long time ago?)  \u003ci\u003epmc_docs.t\u003c/i\u003e detected 3 more \u003ci\u003e.pmc\u003c/i\u003e files lacking documentation than did \u003ci\u003eheaderizer.t\u003c/i\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\nBut, of course, I couldn't leave it there.  I decided to do some refactoring of the internals of \u003ci\u003epmc_docs.t\u003c/i\u003e to create a hash in which the documentation status of each function in each \u003ci\u003e.pmc\u003c/i\u003e file was recorded.  Then the tests amounted to iterating through this hash.  I also made a few modifications to the output that will appear under \u003ci\u003eprove -v\u003c/i\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1281344973,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3NDg=","github-url":"https://github.com/parrot/parrot/issues/613#issuecomment-3503748"},"message":"\u003cp\u003e\nExample of new output:  perl t/codingstd/pmc_docs.t src/pmc/bigint.pmc\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"96fb2e2e33b59677e3a85ec74746c085275c50d1"},"timestamp":1281424090,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3NDk=","github-url":"https://github.com/parrot/parrot/issues/613#issuecomment-3503749"},"message":"\u003cp\u003e\nRan the test with prove -v in the branch - I did notice 3 boilerplate only functions and that src/pmc/bigint.pmc is the biggest culprit, followed by maybe src/pmc/callcontext.pmc\n\u003c/p\u003e\n\n\u003cp\u003e\n23 TODO'd tests out of 95.\n\u003c/p\u003e\n\n\u003cp\u003e\nIn terms of removing the missing POD message in make headerizer, if we have the test its is fine for pmc files, but I think we should retain the message for other files.\n\u003c/p\u003e\n\n\u003cp\u003e\nCheers, Michael (mikehh)\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1281431548,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3NTA=","github-url":"https://github.com/parrot/parrot/issues/613#issuecomment-3503750"},"message":"\u003cp\u003e\nI have merged the \u003ci\u003ett1726_pmc_pod\u003c/i\u003e branch into trunk.  This adds \u003ci\u003et/codingstd/pmc_docs.t\u003c/i\u003e which works very much like \u003ci\u003et/codingstd/c_function_docs.t\u003c/i\u003e, \u003ci\u003eviz.,\u003c/i\u003e a \u003ctt\u003e__DATA__\u003c/tt\u003e section in the test file holds a list of \u003ci\u003e.pmc\u003c/i\u003e files which as yet have functions which are either entirely undocumented ('missing') or which just have POD \u003ctt\u003e=item\u003c/tt\u003e placeholders ('boilerplate').\n\u003c/p\u003e\n\n\u003cp\u003e\nAs time permits, I am going to do an \u003ctt\u003esvn annotate\u003c/tt\u003e on these \u003ci\u003e.pmc\u003c/i\u003e files and try to figure out who would be most qualified to write documentation on particular functions.  I will then email the lucky individuals to request that they write documentation.\n\u003c/p\u003e\n\n\u003cp\u003e\nKeep your fingers crossed!\n\u003c/p\u003e\n\n\u003cp\u003e\n(Though the branch has been merged, this ticket will remain open until we clear up this backlog of missing documentation.  Mike, if you would like to put this list on a wiki page, please go right ahead.  I have not yet made any changes in \u003ci\u003etools/build/headerizer.pl\u003c/i\u003e; those can wait for what I have to do in TT \u003ca class=\"closed ticket\" href=\"http://trac.parrot.org/parrot/ticket/1725\" title=\"todo: tools/build/headerizer.pl:  documentation is confusing (closed: fixed)\"\u003e#1725\u003c/a\u003e.)\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e$ perl t/harness t/codingstd/pmc_docs.t\nt/codingstd/pmc_docs.t .. 1/95\nnot ok 8 - src/dynpmc/rational.pmc # TODO Missing function docs\nnot ok 13 - src/pmc/bigint.pmc # TODO Missing function docs\nnot ok 14 - src/pmc/bignum.pmc # TODO Missing function docs\nnot ok 17 - src/pmc/callcontext.pmc # TODO Missing function docs\nnot ok 19 - src/pmc/class.pmc # TODO Missing function docs\nnot ok 21 - src/pmc/complex.pmc # TODO Missing function docs\nnot ok 23 - src/pmc/coroutine.pmc # TODO Missing function docs\nnot ok 26 - src/pmc/eval.pmc # TODO Missing function docs\nnot ok 34 - src/pmc/fixedintegerarray.pmc # TODO Missing function docs\nnot ok 40 - src/pmc/hashiterator.pmc # TODO Missing function docs\nnot ok 42 - src/pmc/imageio.pmc # TODO Missing function docs\nnot ok 43 - src/pmc/imageiosize.pmc # TODO Missing function docs\nnot ok 45 - src/pmc/integer.pmc # TODO Missing function docs\nnot ok 52 - src/pmc/namespace.pmc # TODO Missing function docs\nnot ok 53 - src/pmc/nci.pmc # TODO Missing function docs\nnot ok 54 - src/pmc/null.pmc # TODO Missing function docs\nnot ok 55 - src/pmc/object.pmc # TODO Missing function docs\nnot ok 58 - src/pmc/orderedhash.pmc # TODO Missing function docs\nnot ok 60 - src/pmc/packfile.pmc # TODO Missing function docs\nnot ok 80 - src/pmc/role.pmc # TODO Missing function docs\nnot ok 90 - src/pmc/sub.pmc # TODO Missing function docs\nnot ok 92 - src/pmc/threadinterpreter.pmc # TODO Missing function docs\nnot ok 95 - src/pmc/unmanagedstruct.pmc # TODO Missing function docs\nt/codingstd/pmc_docs.t .. ok\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1281520946,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3NTE=","github-url":"https://github.com/parrot/parrot/issues/613#issuecomment-3503751"},"message":"\u003cp\u003e\nAs of r48406, 3 down, 20 to go.  Have emailed 4 contributors requesting PMC function documentation.\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1281864391,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3NTI=","github-url":"https://github.com/parrot/parrot/issues/613#issuecomment-3503752"},"message":"\u003cp\u003e\nReplying to \u003ca class=\"assigned ticket\" href=\"http://trac.parrot.org/parrot/ticket/1726\" title=\"todo: Missing POD in .pmc files (and a couple of others) (assigned)\"\u003emikehh\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cp\u003e\nNon-vtable functions in .pmc files are usually (always?) static. This means they are of no use to anyone outside of these files (eg: the user reading the docs).\n\u003c/p\u003e\n\n\u003cp\u003e\nWhat purpose does documenting these functions, which are little more than implementation details, with POD serve?\n\u003c/p\u003e","files":null}]}