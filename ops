{"version":1,"ops":[{"type":1,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1256948729,"metadata":{"github-id":"MDU6SXNzdWUyODQ4NjIy","github-url":"https://github.com/parrot/parrot/issues/416","origin":"github"},"title":"need ability to dispatch to parent's method or vtable from PIR","message":"If you write a class in PIR, you can access certain ancestral methods/vtables by getting the 'proxy' attribute for that ancestor, with two big limitations.\n\nyou need to know the name of the ancestor that implements the vtable (this isn't always your direct parent.)\n\nthat ancestor MUST be a PMC (not another class.)\n\nSince there is no generic mechanism to invoke a vtable by name, we should probably continue to use a proxy object to access this functionality.\n\nperhaps:\n\n```\n# INT values only!\n.sub set_pmc_keyed :vtable\n    .param pmc key\n    .param pmc value\n    $I0 = value\n    .local pmc proxy\n    proxy = get_proxy self\n    proxy[key] = $I0\n.end\n```\n\nBikeshed away. Tcl needs this or something like it to fully implement the trace builtin. (which basically lets us run code before and after each vtable access.)\n\nOriginally http://trac.parrot.org/parrot/ticket/1165","files":null}]}