{"version":1,"ops":[{"type":1,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1257800992,"metadata":{"github-id":"MDU6SXNzdWUyODQ4ODYy","github-url":"https://github.com/parrot/parrot/issues/653","origin":"github"},"title":"handle ARM mixed-endian doubles","message":"This ticket moves discussion into Trac from [http://rt.perl.org/rt3/Ticket/Display.html?id=37461 RT #37461].\n\nLeopold Toetsch opened the ticket in October 2005:\n\nParrot bytecode (PBC) is designed to be portable. Therefore we need\nsome code to convert ARM-generated PBCs to machine-native doubles and\nARM architectures must be able to read other already supported float\ntypes.\n\nA PBC header has a 'floattype' field, which identifies known FLOATVAL\nlayouts.\n\nWe have currently:\n\n0 ... 8 byte IEEE double\n1 ... 12 byte IEEE double (both according to endianess)\n\nWe need additionally (at least and AFAIK):\n\n2 ... 8 byte (ARM) mixed-endian\n\nwhich is according to Nicholas a LE double with 2 BE arranged words.\n\nAnd Nicholas Clark commented:\n\nand totally legal IEEE.\n\n(Mozilla thought that it could cheat. And it was wrong)\n\nThe mixed endian is the old soft float, as I understand it, and will be\nreplaced by something less surprising, but that's a C ABI change.\n\n... and that's where things stand.\n\nOriginally http://trac.parrot.org/parrot/ticket/1251","files":null}]}