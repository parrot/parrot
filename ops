{"version":1,"ops":[{"type":3,"author":{"id":"8c86ede03c8e80b0dad5131138f96e957a4ee66b"},"timestamp":1254274319,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3Njc=","github-url":"https://github.com/parrot/parrot/issues/618#issuecomment-3503767"},"message":"\u003cp\u003e\nIn #parrotsketch, \u003ca   href=\"http://irclog.perlgeek.de/parrotsketch/2009-09-22#i_1527763\"\u003e\u003cspan class=\"icon\"\u003eÂ \u003c/span\u003ehttp://irclog.perlgeek.de/parrotsketch/2009-09-22#i_1527763\u003c/a\u003e , Allison asked me to put together a first draft of what I think might need to be done.\nI see two distinct needs that shape the issue:\n\u003c/p\u003e\n\n\u003cp\u003e\n1) Now that Packfile PMCs work, some tests, written in PIR, will need to create or manipulate a separate piece of bytecode, and need to run the resulting .pbc using the same parrot.exe that is running the test PIR. The .pbc never has no true equivalent .pir source on disk.\nFor example, examples/pir/make_hello_pbc.pir creates its own \u003ctt\u003egenerated_hello.pbc\u003c/tt\u003e, then exercises it by \u003ctt\u003eload_bytecode 'generated_hello.pbc'\u003c/tt\u003e. How should this be converted into a t/.t test? What services should the test framework provide to support this kind of testing, to reduce redundant code?\nIs it healthy to run that last step via \u003ctt\u003eload_bytecode\u003c/tt\u003e, or should a separate invocation of \u003ctt\u003e./parrot generated_hello.pbc\u003c/tt\u003e be used?\nOne landmine to avoid is (just) compiling make_hello_pbc.pir to .pbc; that is, conflating this with part (2), below.\n\u003c/p\u003e\n\n\u003cp\u003e\n2) Because IMCC can load-and-run .pir without writing bytecode to a file, a (possible?) gap exists between the codepaths of running \u003ctt\u003e./parrot FOO.pir\u003c/tt\u003e vs \u003ctt\u003e./parrot -o FOO.pbc FOO.pir \u0026amp;\u0026amp; ./parrot FOO.pbc\u003c/tt\u003e. It is possible for the output of these two cases to disagree, although this would always indicate a bug.\nWe need to be able to run any .pir test in either codepath (direct .pir, or .pir-\u0026gt;.pbc-then-run).\n\u003c/p\u003e\n\n\u003cp\u003e\nHow to approach? What API?\n\u003c/p\u003e\n\n\u003cul\u003e\u003cli\u003eExtend current testing framework to have a flag that means \"invisibly compile this PIR to .pbc, and run the .pbc instead of the .pir\"?\n\u003c/li\u003e\u003cli\u003eENV var to force everything that would have been run as .pir to be run as .pbc?\n\u003c/li\u003e\u003cli\u003eENV var to force everything that would have been run as .pir to be run and tested _twice_, once as .pir and once as .pbc?\n\u003c/li\u003e\u003cli\u003eMagic setting in \u003ctt\u003euse Test::More\u003c/tt\u003e line?\n\u003c/li\u003e\u003cli\u003eMake a new dimension in the \u003ctt\u003emake\u003c/tt\u003e testing targets? (\u003ctt\u003emake testc\u003c/tt\u003e vs \u003ctt\u003emake testc-pbc\u003c/tt\u003e)\n\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\n.t needs to do the right thing.\n\u003c/p\u003e\n\n\u003cp\u003e\nActual coding seems straightforward, except for the hierarchal aspect of exceptions, which might not be captureable.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1254302805,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3Njg=","github-url":"https://github.com/parrot/parrot/issues/618#issuecomment-3503768"},"message":"\u003cp\u003e\nI think both codepaths should always be run, so I would vote for each test that tests bytecode to try both paths.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1254882709,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3Njk=","github-url":"https://github.com/parrot/parrot/issues/618#issuecomment-3503769"},"message":"\u003cp\u003e\nIn light of this talk on #parrotsketch\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e\u0026lt;Util\u0026gt;: TT#600  (bytecode testing framework) - only progress is a vote from dukeleto++\n for running both .pir and .pbc versions of the testing as the default. I need to\ncarry it into #parrot; among other issues, running both will more than double our\ncurrent `make test` time\n\u0026lt;allison\u0026gt; Util: aye, it's something that should be an option for fulltest, but not part of the default tests\n\u003c/pre\u003e\u003cp\u003e\nI think that if both version were run on fulltest, and only one on a normal test run, that would be fine. An optional flag is also fine.\n\u003c/p\u003e\n\n\u003cp\u003e\nI would just like to note that getting 100% test coverage should always be more important than making our test suite slower.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"96fb2e2e33b59677e3a85ec74746c085275c50d1"},"timestamp":1256693431,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3NzA=","github-url":"https://github.com/parrot/parrot/issues/618#issuecomment-3503770"},"message":"\u003cp\u003e\nperhaps I have the wrong end of the stick, but is this not what testr does.\n\u003c/p\u003e\n\n\u003cp\u003e\nIt compiles to bytecode and then tests the bytecode: .pir -\u0026gt; .pbc files and test .pbc\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"2f4f3e471325ff5d2fc5b4ba5a49ae75afdee8c8"},"timestamp":1257302976,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3NzE=","github-url":"https://github.com/parrot/parrot/issues/618#issuecomment-3503771"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/600#comment:6\" title=\"Comment 6 for Ticket #600\"\u003emikehh\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n perhaps I have the wrong end of the stick, but is this not what testr does.\n It compiles to bytecode and then tests the bytecode: .pir -\u0026gt; .pbc files and test .pbc\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nActually 'make testr' does something a little bit different.\nIt creates a '*.pbc' File, converts it into an executable and runs the\nexecutable.\n\u003c/p\u003e\n\n\u003cp\u003e\nIt doesn't run the pbc-File directly.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1257303186,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3NzI=","github-url":"https://github.com/parrot/parrot/issues/618#issuecomment-3503772"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/600#comment:2\" title=\"Comment 2 for Ticket #600\"\u003eUtil\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n 2) Because IMCC can load-and-run .pir without writing bytecode to a file, a (possible?) gap exists between the codepaths of running \u003ctt\u003e./parrot FOO.pir\u003c/tt\u003e vs \u003ctt\u003e./parrot -o FOO.pbc FOO.pir \u0026amp;\u0026amp; ./parrot FOO.pbc\u003c/tt\u003e. It is possible for the output of these two cases to disagree, although this would always indicate a bug.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nGiven :immediate, I'm not sure this true.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1261000185,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM3NzM=","github-url":"https://github.com/parrot/parrot/issues/618#issuecomment-3503773"},"message":"\u003cp\u003e\nBumping milestone to 2.0; This should be reviewed in light of the recent roadmap meeting.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1336524658,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1OTA0NDE=","github-url":"https://github.com/parrot/parrot/issues/625#issuecomment-5590441"},"message":"I agree with @bacek. Ordered destruction in general is a no-go. What we can do instead, an idea that @moritz recommended, is to use something like a 2-pass sweep. The first pass executes destroy vtables while everything is still alive, the second pass reclaims the memory. That would make many of these kinds of problems go away, although there could possibly be a negative effect from making multiple cache-unfriendly passes over memory.\n\nI suggest we close this ticket and start brain-storming new ideas on a wiki page or something. Any ideas?","files":null},{"type":3,"author":{"id":"099af60226e2576bd4ff0f5c2614b710c745cab6"},"timestamp":1336526167,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1OTA3OTU=","github-url":"https://github.com/parrot/parrot/issues/625#issuecomment-5590795"},"message":"Ste^W Borrow it from PyPy. They are using exactly this approach for finalizers. We probably have to separate .destroy from .finalize VTABLE entries to properly implement it.","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1336569135,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1OTk2MDM=","github-url":"https://github.com/parrot/parrot/issues/625#issuecomment-5599603"},"message":"I've created a new wiki page https://github.com/parrot/parrot/wiki/Tasklist:-GC to hold details about GC wishlist and tasklist items. I've linked to this ticket on that page and we can continue the discussion there. I'm closing this ticket.","files":null},{"type":4,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1336569135,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTUwODA0OTA="},"status":2}]}