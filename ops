{"version":1,"ops":[{"type":5,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1395510104,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDEwNDUwOTc0NQ=="},"added":["Component-GC"],"removed":[]},{"type":2,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1395510119,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50MTA0NTA5Nzgx"},"title":"Analyse unsafe CallContext_mark via pcc_reuse_continuation","was":"Analyse unsafe CallContext_mark via pcc_reuse_continuation"},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1415174312,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxNzcxNjM4","github-url":"https://github.com/parrot/parrot/issues/1067#issuecomment-61771638"},"message":"The reason is that the pool allocator does not initialize its pool area with 0, and later checks for bitmasks in unitialized areas. Using the `_zeroed_` variants should fix that. There might be real problems lurking behind uninitialized areas with `--optimized`.\n\nbut `valgrind --track-origins=yes` blames stack allocation in runops(`src/call/ops.c`) (_volatile int offset_), and item in `gc_gms_allocate_pmc_header` (_good catch_).\nSome of those stack vars are normal integers, which can only be fixed with a precise GC, which ignores non pointers or foreign pointers on the stack.","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1415283904,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYxOTg1NTY0","github-url":"https://github.com/parrot/parrot/issues/1067#issuecomment-61985564"},"message":"Improve the easy bits with `smoke-me/valgrind-stack-gh1067`","files":null},{"type":4,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1415289368,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTg5MzgzMTIy"},"status":2}]}