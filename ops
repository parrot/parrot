{"version":1,"ops":[{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1298172503,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM0Mzc=","github-url":"https://github.com/parrot/parrot/issues/514#issuecomment-3503437"},"message":"\u003cp\u003e\nReplying to \u003ca class=\"new ticket\" href=\"http://trac.parrot.org/parrot/ticket/545\" title=\"bug: PackFile_unpack followed by PackFile_pack produces wrong results. (new)\"\u003ebacek\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n PackFile_pack for previously unpacked PBC reuses old PackFile_Header which leads to creating incorrect PBC.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nbacek,\n\u003c/p\u003e\n\n\u003cp\u003e\nDoes this still occur?  If so, can you provide some sample of the failure?\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"099af60226e2576bd4ff0f5c2614b710c745cab6"},"timestamp":1298176023,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM0Mzg=","github-url":"https://github.com/parrot/parrot/issues/514#issuecomment-3503438"},"message":"\u003cp\u003e\nHello.\n\u003c/p\u003e\n\n\u003cp\u003e\nYes, it's still exist.\n\u003c/p\u003e\n\n\u003cp\u003e\nPackFile_pack function reuse old PackFile* which Directory contains wrong information about byteorder, sizes of ints and floats, etc.\n\u003c/p\u003e\n\n\u003cp\u003e\n--\nBacek\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1336522560,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1ODk5OTQ=","github-url":"https://github.com/parrot/parrot/issues/514#issuecomment-5589994"},"message":"@bacek can you tell me what the expected behavior is here? Do we expect PackFile_pack to clear old data out of the packfile before attempting to re-pack it?\n\nOr, should we throw some kind of error that a non-writable PackFile is being written to? In that case, we're going to need a flag on the PackFile to indicate that we cannot write to it.\n\nThanks","files":null},{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1336524267,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU1OTAzNzA=","github-url":"https://github.com/parrot/parrot/issues/514#issuecomment-5590370"},"message":"Disallowing repacking is an acceptable behavior.  Once doing so throws a proper error, this issue can be closed.","files":null},{"type":3,"author":{"id":"f95043a9cf3e68ba98773e39249e7a5364a30203"},"timestamp":1372260434,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDIwMDU1NDM3","github-url":"https://github.com/parrot/parrot/issues/520#issuecomment-20055437"},"message":"It appears the problem is bigger , and the dependency on using `perldoc` means that if `perldoc` is detected, it will try to build documentation in `/doc/*`\n\nHowever, if `make install-dev` is run as `UID=0`, `perldoc` drops to `UID=nobody` and can no-longer write to `/doc/`.\n\nI have a patch for downstream's (gentoo) install/build system, which nobody seems bothered enough to even try themselves, but it works for me... but its rather nasty, because \n- It requires modifying the entire parent-path so that `UID=nobody` can read and execute directories ( or else perldoc explodes trying to chdir into various things because the parent path is no longer visible )\n- It requires modifiying the `doc` dir and its children so that `UID=nobobdy` can write to them **just** because of perldoc's behaviour. \n\nI'm not sure if this indicates a design failure in `perldoc`, or that `parrot` shouldn't be using `perldoc` to create documentation from source files.\n\nhttps://bugs.gentoo.org/show_bug.cgi?id=454058\n\nhttps://454058.bugs.gentoo.org/attachment.cgi?id=348498","files":null},{"type":3,"author":{"id":"f95043a9cf3e68ba98773e39249e7a5364a30203"},"timestamp":1372265475,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDIwMDYyNzc5","github-url":"https://github.com/parrot/parrot/issues/520#issuecomment-20062779"},"message":"Actually, a slight variation of above patch seems to work.\n\nI'm not sure why doing this suppresses the problem with read access I hit earlier, but it does appear to work.\n\n``` diff\ndiff -Naur parrot-5.5.0/config/auto/perldoc.pm parrot-5.5.0/config/auto/perldoc.pm\n--- parrot-5.5.0/config/auto/perldoc.pm 2013-04-30 19:11:28.000000000 +0000\n+++ parrot-5.5.0/config/auto/perldoc.pm 2013-06-26 15:44:31.031675583 +0000\n@@ -38,7 +38,7 @@\n\n     my $cmd = File::Spec-\u003ecatfile($conf-\u003edata-\u003eget('scriptdirexp_provisional'), q{perldoc});\n     my ( $fh, $filename ) = tempfile( UNLINK =\u003e 1 );\n-    my $content = capture_output(\"$cmd -ud $filename perldoc\") || undef;\n+    my $content = capture_output(\"$cmd -u perldoc \u003e $filename\") || undef;\n\n     return 1 unless defined( $self-\u003e_initial_content_check($conf, $content) );\n\n@@ -67,7 +67,7 @@\n         if ( $new_perldoc ) {\n             $TEMP_pod_build .= \u003c\u003c\"END\";\n ops/$pod: ../src/ops/$ops\n-\\t\\$(PERLDOC) -ud ops/$pod ../src/ops/$ops\n+\\t\\$(PERLDOC) -u ../src/ops/$ops \u003e ops/$pod\n \\t\\$(CHMOD) 0644 ops/$pod\n \\t\\$(ADDGENERATED) \"docs/\\$\\@\" \"[doc]\"\n\ndiff -Naur parrot-5.5.0/config/gen/makefiles/docs.in parrot-5.5.0/config/gen/makefiles/docs.in\n--- parrot-5.5.0/config/gen/makefiles/docs.in   2013-06-15 17:36:41.000000000 +0000\n+++ parrot-5.5.0/config/gen/makefiles/docs.in   2013-06-26 15:39:41.109881123 +0000\n@@ -63,7 +63,7 @@\n    $(TOUCH) doc-prep\n\n packfile-c.pod: ../src/packfile/api.c\n-#IF(new_perldoc):  $(PERLDOC) -ud packfile-c.pod ../src/packfile/api.c\n+#IF(new_perldoc):  $(PERLDOC) -u ../src/packfile/api.c \u003e packfile-c.pod\n #ELSE: $(PERLDOC) -u ../src/packfile/api.c \u003e packfile-c.pod\n    $(ADDGENERATED) \"docs/$@\" \"[doc]\"\n```","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1372277273,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDIwMDc2MTg4","github-url":"https://github.com/parrot/parrot/issues/520#issuecomment-20076188"},"message":"Thanks so much for all that information, @kentfredric ! Can you submit that patch as a pull request ? That will make it easier for people to review and test.","files":null},{"type":3,"author":{"id":"f95043a9cf3e68ba98773e39249e7a5364a30203"},"timestamp":1372309901,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDIwMDk3NjMy","github-url":"https://github.com/parrot/parrot/issues/520#issuecomment-20097632"},"message":"I'm not sure the patch is even right yet, I mean, it looks like it was intended to use '-ud' and fallback to '-u' if its a \"new_perldoc\" , my patch is just blind and makes it work ubiquitiously the same way everywhere, which is fine if you're on a fixed target such as *nix. \n\nI'll try with just the perldoc.pm patch and see if that also works, because it may.","files":null},{"type":3,"author":{"id":"f95043a9cf3e68ba98773e39249e7a5364a30203"},"timestamp":1372368373,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDIwMTU2MDc1","github-url":"https://github.com/parrot/parrot/issues/520#issuecomment-20156075"},"message":"PR #973","files":null},{"type":3,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1392741046,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1NDAyNTUy","github-url":"https://github.com/parrot/parrot/issues/520#issuecomment-35402552"},"message":"Merged #1028 for the 6.1.0 release","files":null},{"type":4,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1392741046,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50OTQ1ODc1NTI="},"status":2}]}