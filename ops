{"version":1,"ops":[{"type":3,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1269942590,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMyMDY=","github-url":"https://github.com/parrot/parrot/issues/453#issuecomment-3503206"},"message":"\u003cp\u003e\nThis does not appear in DEPRECATED.pod - allison, do want this to go into the list for 2.3 so we can remove it after that?\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1283592619,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMyMDc=","github-url":"https://github.com/parrot/parrot/issues/453#issuecomment-3503207"},"message":"\u003cpre class=\"wiki\"\u003egrep -in EVAL DEPRECATED.pod\n\u003c/pre\u003e\u003cp\u003e\nAs of today it still does not appear in \u003ci\u003eDEPRECATED.pod\u003c/i\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\nAllison, can you update?\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0c1ee4af33970ee80260d659da672a9306b51181"},"timestamp":1284212656,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMyMDg=","github-url":"https://github.com/parrot/parrot/issues/453#issuecomment-3503208"},"message":"\u003cp\u003e\nYes, I'm still in favor of the deprecation. It's easy enough to decide what to do when the eval is a single subroutine, trickier when it's a whole list of subroutines. As much as possible, we want it to act similar to a normal compile, perhaps return a sub object corresponding to the :main sub of the eval (if there is one).\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1284246684,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDMyMDk=","github-url":"https://github.com/parrot/parrot/issues/453#issuecomment-3503209"},"message":"\u003cp\u003e\nJust to present a possible counter-argument; one of the possible advantages of the current \"return an Eval PMC\" approach is that it's possible for a HLL to introspect the returned Eval PMC and do any additional linking or setup that may be needed on the newly-compiled subs.  If compiling source code instead chooses to return only a single Sub PMC, we lose that capability.\n\u003c/p\u003e\n\n\u003cp\u003e\nIn particular, in Rakudo the eval() function has to compile a string which may create one or more subs, and then set the :outer context on the things that come back.... and it's definitely *not* the Sub marked :main that gets its outer context set (nor should it be, as that sub is not the HLL mainline code).\n\u003c/p\u003e\n\n\u003cp\u003e\nPm\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1333328267,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ4NzEwMDA=","github-url":"https://github.com/parrot/parrot/issues/453#issuecomment-4871000"},"message":"I'm going to close this issue, it's basically a duplicate of #567. The Eval PMC is being deprecated and removed. Following pmichaud's counter-argument, the new PackfileView PMC has an interface for introspecting the compiled result and is used for that purpose in several places.","files":null}]}