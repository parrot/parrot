{"version":1,"ops":[{"type":3,"author":{"id":"e7ab5189123b7e95617e8f8ef8dc5de0f0eb9b46"},"timestamp":1233970054,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4MzQ=","github-url":"https://github.com/parrot/parrot/issues/352#issuecomment-3502834"},"message":"2317 byte attachment from ronaldxs\nat http://trac.parrot.org/parrot/raw-attachment/ticket/285/vtableoverride.patch\n\n# ```Index: t/oo/vtableoverride.t\n\n--- t/oo/vtableoverride.t   (revision 36383)\n+++ t/oo/vtableoverride.t   (working copy)\n@@ -18,11 +18,12 @@\n\n .sub main :main\n     .include 'test_more.pir'\n-    plan(12)\n-    plan(15)\n  \n   newclass_tests()\n   subclass_tests()\n   vtable_implies_self_tests()\n-    mmd_override_not_proxied()\n  .end\n  \n  .sub 'newclass_tests'\n  @@ -86,6 +87,43 @@\n  ok( $I0, ':vtable should imply the self parameter' )\n  .end\n\n+.sub 'mmd_override_not_proxied'\n-    .local pmc integer_cl, three_cl, three_obj\n  +\n-    get_class integer_cl, 'Integer'\n-    subclass three_cl, integer_cl, 'Three'\n-    three_cl.'add_attribute'('marker')\n-    three_cl.'add_attribute'('zero_marker')\n-    three_cl.'add_attribute'('one_marker')\n-    three_obj = new 'Three'\n  +\n-    # zero_marker/one_marker initialization should go in init vtable method\n-    # -- todo because seems to seg fault now\n-    $P0 = new ['Integer']\n-    $P0 = 0\n-    setattribute three_obj, 'zero_marker', $P0\n-    $P0 = new ['Integer']\n-    $P0 = 1\n-    setattribute three_obj, 'one_marker', $P0\n-   \n-    # not mmd but basic test\n-    three_obj.'clear_marker'()\n-    $I0 = three_obj\n-    three_obj.'verify_marker'('assign to int register calls vtable get_integer override')\n  +\n-    .local pmc i\n-    i = new 'Integer'\n-    i = 2\n  +\n-    three_obj.'clear_marker'()\n-    $P0 = sub three_obj, i\n-    three_obj.'verify_marker'('subtract calls vtable get_integer override')\n-   \n-    three_obj.'clear_marker'()\n-    $I0 = cmp_num three_obj, i\n-    three_obj.'verify_marker'('cmp_num with calls vtable get_integer override')\n  +.end\n  +\n  .namespace [ 'MyObject' ]\n  \n  .sub '__onload' :anon :init\n  @@ -169,6 +207,27 @@\n   .return( 1 )\n  .end\n\n+.namespace ['Three']\n+\n+.sub '' :vtable('get_integer') :method\n-    $P0 = getattribute self, 'one_marker'\n-    setattribute self, 'marker', $P0\n-    .return (3)\n  +.end\n  +\n  +.sub clear_marker :method\n-    $P0 = getattribute self, 'zero_marker'\n-    setattribute self, 'marker', $P0\n  +.end\n  +\n  +.sub verify_marker :method\n-    .param string test_description\n-    .local pmc get_integer_marker\n  +\n-    get_integer_marker = getattribute self, 'marker'\n-    is(get_integer_marker, 1, test_description)\n  +.end\n  +\n  # Local Variables:\n  #   mode: pir\n  #   fill-column: 100\n\n```\n```","files":null},{"type":3,"author":{"id":"e7ab5189123b7e95617e8f8ef8dc5de0f0eb9b46"},"timestamp":1233991654,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4MzU=","github-url":"https://github.com/parrot/parrot/issues/352#issuecomment-3502835"},"message":"\u003cp\u003e\nPatch to test script relevant to feature.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1309648378,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4MzY=","github-url":"https://github.com/parrot/parrot/issues/352#issuecomment-3502836"},"message":"2429 byte attachment from jkeenan\nat http://trac.parrot.org/parrot/raw-attachment/ticket/285/tt285.vtableoverride.diff\n\n```diff --git a/t/oo/vtableoverride.t b/t/oo/vtableoverride.t\nindex de2625d..a6b3724 100644\n--- a/t/oo/vtableoverride.t\n+++ b/t/oo/vtableoverride.t\n@@ -17,11 +17,12 @@ Tests the behavior of VTABLE interfaces that have been overriden from PIR.\n\n .sub main :main\n     .include 'test_more.pir'\n-    plan(15)\n-    plan(18)\n  \n   newclass_tests()\n   subclass_tests()\n   vtable_implies_self_tests()\n-     mmd_override_not_proxied()\n   anon_vtable_tests()\n   invalid_vtable()\n   get_pmc_keyed_int_Null()\n  @@ -122,6 +123,43 @@ CODE\n   ok($I0, \"Override get_pmc_keyed_int without .return - TT #1593\")\n  .end\n\n+.sub 'mmd_override_not_proxied'\n-    .local pmc integer_cl, three_cl, three_obj\n  +\n-    get_class integer_cl, 'Integer'\n-    subclass three_cl, integer_cl, 'Three'\n-    three_cl.'add_attribute'('marker')\n-    three_cl.'add_attribute'('zero_marker')\n-    three_cl.'add_attribute'('one_marker')\n-    three_obj = new 'Three'\n  +\n-    # zero_marker/one_marker initialization should go in init vtable method\n-    # -- todo because seems to seg fault now\n-    $P0 = new ['Integer']\n-    $P0 = 0\n-    setattribute three_obj, 'zero_marker', $P0\n-    $P0 = new ['Integer']\n-    $P0 = 1\n-    setattribute three_obj, 'one_marker', $P0\n-   \n-    # not mmd but basic test\n-    three_obj.'clear_marker'()\n-    $I0 = three_obj\n-    three_obj.'verify_marker'('assign to int register calls vtable get_integer override')\n  +\n-    .local pmc i\n-    i = new 'Integer'\n-    i = 2\n  +\n-    three_obj.'clear_marker'()\n-    $P0 = sub three_obj, i\n-    three_obj.'verify_marker'('subtract calls vtable get_integer override')\n-   \n-    three_obj.'clear_marker'()\n-    $I0 = cmp_num three_obj, i\n-    three_obj.'verify_marker'('cmp_num with calls vtable get_integer override')\n  +.end\n  +\n  .namespace [ 'MyObject' ]\n  \n  .sub '__onload' :anon :init\n  @@ -220,6 +258,27 @@ yes:\n   # No .return\n  .end\n\n+.namespace ['Three']\n+\n+.sub '' :vtable('get_integer') :method\n-    $P0 = getattribute self, 'one_marker'\n-    setattribute self, 'marker', $P0\n-    .return (3)\n  +.end\n  +\n  +.sub clear_marker :method\n-    $P0 = getattribute self, 'zero_marker'\n-    setattribute self, 'marker', $P0\n  +.end\n  +\n  +.sub verify_marker :method\n-    .param string test_description\n-    .local pmc get_integer_marker\n  +\n-    get_integer_marker = getattribute self, 'marker'\n-    is(get_integer_marker, 1, test_description)\n  +.end\n  +\n  # Local Variables:\n  #   mode: pir\n  #   fill-column: 100\n\n```\n```","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1309666378,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4Mzc=","github-url":"https://github.com/parrot/parrot/issues/352#issuecomment-3502837"},"message":"\u003cp\u003e\nAttempt at updating patch submitted by ronaldws\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1309666534,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4Mzg=","github-url":"https://github.com/parrot/parrot/issues/352#issuecomment-3502838"},"message":"\u003cp\u003e\nSince vtableoverride.patch no longer applies cleanly, I tried to rework the patch and apply it to \u003ci\u003et/oo/vtableoverride.t\u003c/i\u003e.  However, I got a test failure:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e$ prove  -v t/oo/vtableoverride.t\nt/oo/vtableoverride.t ..\n1..18\nok 1 - get_string VTABLE override\nok 2 - attribute sideeffect of get_string\nok 3 - check first does, ok\nok 4 - check second does, ok\nok 5 - no it doesn't\nok 6 - Morph VTABLE override 1\nok 7 - Morph VTABLE override 1\nok 8 - check first does, ok\nok 9 - check second does, ok\nok 10 - no it doesn't\nok 11 - inherited does\nok 12 - :vtable should imply the self parameter\nok 13 - assign to int register calls vtable get_integer override\nok 14 - subtract calls vtable get_integer override\nnot ok 15 - cmp_num with calls vtable get_integer override\n\n# Have: 0\n\n# Want: 1\n\nok 16 - can have :vtable :anon\nok 17 - invalid :vtable throws an exception\nok 18 - Override get_pmc_keyed_int without .return - TT #1593\nFailed 1/18 subtests\n\n## Test Summary Report\n\nt/oo/vtableoverride.t (Wstat: 0 Tests: 18 Failed: 1)\n  Failed test:  15\nFiles=1, Tests=18,  0 wallclock secs\n  ( 0.02 usr  0.01 sys +  0.01 cusr  0.00 csys =  0.04 CPU)\nResult: FAIL\n\u003c/pre\u003e\u003cp\u003e\nSuggestions?\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"e7ab5189123b7e95617e8f8ef8dc5de0f0eb9b46"},"timestamp":1309738331,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI4Mzk=","github-url":"https://github.com/parrot/parrot/issues/352#issuecomment-3502839"},"message":"\u003cp\u003e\nIt is now two years later and it would take me a week or two to get back up to speed on the status of this ticket.  In the meantime undef has essentially become obsolete in Rakudo.  The currently active equivalents like Int.new() don't have the same problem.  There is probably no solid requirement for Perl 6 filled at this point by these patches.\n\u003c/p\u003e\n\n\u003cp\u003e\nMore theoretically/abstractly the idea of the patch is to have cmp behave more like other math functions with respect to its use of proxy pmcs.  There may be some performance or simplicity advantage to doing it that way but off the top of my head I am not at all in a position to try and make or even guide that sort of judgement call.  Looking back it was chromatic who thought the issue worth further thought \u003ca   href=\"http://irclog.perlgeek.de/parrot/2009-02-05#i_888476\"\u003e\u003cspan class=\"icon\"\u003eÂ \u003c/span\u003eon IRC\u003c/a\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\nIt looks like there was an attempt to apply the patch to the tests without the change to PMC processing which I would not have expected to be workable.  Over the next week or two I can probably attend to the nuts and bolts of making the patches applicable but it would help for someone more familiar with the path of parrot development to assess whether basic idea is still of interest.\n\u003c/p\u003e\n\n\u003cp\u003e\nThanks,\nRon\n\u003c/p\u003e","files":null}]}