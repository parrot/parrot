{"version":1,"ops":[{"type":1,"author":{"id":"e6ebaecce565c58b3e91ddb32c09e93c5f646822"},"timestamp":1277871209,"metadata":{"github-id":"MDU6SXNzdWUyODQ4NzY1","github-url":"https://github.com/parrot/parrot/issues/557","origin":"github"},"title":"Investigate SAFECode","message":"http://safecode.cs.illinois.edu/\n\nThe purpose of the SAFECode project is to enable program safety without garbage collection and with minimal run-time checks using static analysis when possible and run-time checks when necessary. SAFECode defines a code representation with minimal semantic restrictions designed to enable static enforcement of safety, using aggressive compiler techniques developed in this project.\n\nSAFECode is designed to provide the following safety guarantees:\n\n```\n* Array bounds checking (prevents pointers from overflowing from one memory object into another)\n* Loads and stores only access valid memory objects\n* Type safety for a subset of memory objects proven to be type-safe\n* Sound operational semantics in the face of dangling pointer errors (i.e., all safety guarantees hold even when dangling pointers are dereferenced).\n* Optional dangling pointer detection (induces more overhead)\n```\n\nOriginally http://trac.parrot.org/parrot/ticket/1698","files":null}]}