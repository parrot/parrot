{"version":1,"ops":[{"type":1,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1357245849,"metadata":{"github-id":"MDU6SXNzdWU5NjU1NTI4","github-url":"https://github.com/parrot/parrot/issues/909","origin":"github"},"title":"socket.read($bytes) - \"returns $bytes bytes\" vs \"returns UP TO $bytes bytes\"","message":"Lots of rakudo modules broke with io_cleanup1 socket changes:\nhttps://github.com/perl6/specs/issues/26\n\nThere was socket behavior change between Rakudo 2012.11 and 2012.12.\n\nPreviously .read(2048) returned 2048 bytes if available, currently it returns 512 (one chunk).\nIf chunk is smaller than $limit - for example .read(2) - then previous and current version returns 2 bytes.\n\nSo param changed its meaning from \"desired amount of bytes\" to \"no more than bytes\". That led to discussion about which one is correct. \n\nSpec says\n    Reads and returns $bytes bytes from the handle\n\nperl6 IRC discussion disagrees\n\u003csorear\u003e bbkr: you're supposed to keep calling .read until either it returns zero or you have all the bytes\n \u003cbbkr\u003e sorear, what is the point of length argument then?\n \u003csorear\u003e bbkr: 256 seems a little buggy but in general, packet size limits will prevent you from getting all the data at once, and Berkeley sockets systems will return partial data rather than wait for future packets\n \u003csorear\u003e bbkr: allows you to set an upper limit on the amount to read\n...\n\u003cbbkr\u003e so is it spec bug (the param means upper limit), or rakudo bug ?\n \u003csorear\u003e bbkr: my hubris is telling me the spec is wrong and sockets should always follow a Berkeley-esque interface","files":null}]}