{"version":1,"ops":[{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1324344019,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMyMTI3Mzg=","github-url":"https://github.com/parrot/parrot/issues/232#issuecomment-3212738"},"message":"This seems reasonable and does not appear to cause any test failures.  But while we're looking at this, could we also evaluate these other instances of '%u':\n\n```\n$ ack '%u' src\nsrc/debug.c\n3269:    Parrot_io_eprintf(interp, \"%c%u = no such register\\n\",\n3339:    Parrot_io_eprintf(debugger, \"\\n  %c%u = \", reg_type_id, register_num);\n\nsrc/exceptions.c\n552:    fprintf(stderr, \"%s:%u: failed assertion '%s'\\n\", file, line, cond);\n700:    fprintf(stderr, \"C file %s, line %u\\n\",\n\nsrc/gc/string_gc.c\n551:    fprintf(stderr, \"new_block (%s) size %u -\u003e %u\\n\",\n\nsrc/runcore/subprof.c\n908:                            \"%d %u %llu\\n\",\n919:                    fprintf(stderr, \"calls=%u %d\\n\", (unsigned int) ci-\u003ecount, (int) csp-\u003esrcline);\n921:                            \"%d %u %llu\\n\",\n947:            fprintf(stderr, \"calls=%u %d\\n\", (unsigned int) ci-\u003ecount, (int) csp-\u003esrcline);\n949:                    \"%d %u %llu\\n\",\n\nsrc/spf_render.c\n278:            p += sprintf(p, \"%u\", (unsigned)info-\u003ewidth);\n286:            p += sprintf(p, \"%u\", (unsigned)info-\u003eprec);\n\nsrc/platform/generic/socket.c\n436:    return Parrot_str_format_data(interp, \"%s:%u\", buf, ntohs(sa-\u003esin_port));\n[li11-226:parrot] 512 $ ack -C1 '%u' src\nsrc/debug.c\n3268-\n3269:    Parrot_io_eprintf(interp, \"%c%u = no such register\\n\",\n3270-        register_type, register_num);\n--\n3338-    }\n3339:    Parrot_io_eprintf(debugger, \"\\n  %c%u = \", reg_type_id, register_num);\n3340-    Parrot_io_eprintf(debugger, \"%Ss\\n\", GDB_print_reg(debugee, reg_type, register_num));\n\nsrc/exceptions.c\n551-    ASSERT_ARGS(Parrot_confess)\n552:    fprintf(stderr, \"%s:%u: failed assertion '%s'\\n\", file, line, cond);\n553-    Parrot_print_backtrace();\n--\n699-\n700:    fprintf(stderr, \"C file %s, line %u\\n\",\n701-               file ? file : \"(not available)\", line);\n\nsrc/gc/string_gc.c\n550-#if RESOURCE_DEBUG\n551:    fprintf(stderr, \"new_block (%s) size %u -\u003e %u\\n\",\n552-        why, size, alloc_size);\n\nsrc/runcore/subprof.c\n907-                    fprintf(stderr,\n908:                            \"%d %u %llu\\n\",\n909-                            (int) srcline,\n--\n918-                    fprintf(stderr, \"\\n\");\n919:                    fprintf(stderr, \"calls=%u %d\\n\", (unsigned int) ci-\u003ecount, (int) csp-\u003esrcline);\n920-                    fprintf(stderr,\n921:                            \"%d %u %llu\\n\",\n922-                            (int) srcline,\n--\n946-            fprintf(stderr, \"\\n\");\n947:            fprintf(stderr, \"calls=%u %d\\n\", (unsigned int) ci-\u003ecount, (int) csp-\u003esrcline);\n948-            fprintf(stderr,\n949:                    \"%d %u %llu\\n\",\n950-                    0,\n\nsrc/spf_render.c\n277-\n278:            p += sprintf(p, \"%u\", (unsigned)info-\u003ewidth);\n279-        }\n--\n285-            *p++ = '.';\n286:            p += sprintf(p, \"%u\", (unsigned)info-\u003eprec);\n287-        }\n\nsrc/platform/generic/socket.c\n435-\n436:    return Parrot_str_format_data(interp, \"%s:%u\", buf, ntohs(sa-\u003esin_port));\n437-#endif /* PARROT_HAS_IPV6 */\n```\n\nThank you very much.\nJim Keenan","files":null},{"type":3,"author":{"id":"3771fd696fba286f6d0b9544dc89da489f0c740e"},"timestamp":1338546719,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDYwNTc2NTQ=","github-url":"https://github.com/parrot/parrot/issues/232#issuecomment-6057654"},"message":"Pull Request #704 has been merged, close this issue.","files":null},{"type":4,"author":{"id":"3771fd696fba286f6d0b9544dc89da489f0c740e"},"timestamp":1338546722,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTY3MzU2NDI="},"status":2}]}