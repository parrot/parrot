{"version":1,"ops":[{"type":1,"author":{"id":"8c86ede03c8e80b0dad5131138f96e957a4ee66b"},"timestamp":1383419245,"metadata":{"github-id":"MDU6SXNzdWUyMjAwNzQ1Mg==","github-url":"https://github.com/parrot/parrot/issues/1017","origin":"github"},"title":"Object IDs not persistent","message":"Reported by: zefram@fysh.org\n\nThe get_id op is documented to return an ID for any object. The IDs returned don't actually function as IDs, because different ID values are returned from multiple calls for a single object. Specifically, the IDs seem to be per thread:\n\n```\n$ cat t60.pir\n.sub foo\n        $P0 = get_global \"wibble\"\n        $S0 = typeof $P0\n        say $S0\n        $I0 = get_id $P0\n        say $I0\n        .return ()\n.end\n.sub main :main\n        $P0 = new \"ResizablePMCArray\"\n        set_global \"wibble\", $P0\n        .const \"Sub\" foo = \"foo\"\n        $P1 = new \"Task\", foo\n        schedule $P1\n        sleep 0.1\n        $S0 = typeof $P0\n        say $S0\n        $I0 = get_id $P0\n        say $I0\n.end\n```\n\n```\n$ ./parrot t60.pir\nResizablePMCArray\n5106441376529261666\nResizablePMCArray\n5106441376529297014\n```\n\nThe two threads are apparently dealing with the same object, confirmed by them seeing it having the same type, but they get different IDs for it. This breaks most of the interesting uses for object IDs.\n\nObserve that the example also falls within the scope of the documentation's guarantee about ID uniqueness: threads that share data, during the object's lifetime. Persistence of an object's ID is the counterpart to uniqueness, required to make the ID useful. (Indeed, required for it to qualify as an ID.)\n\n-zefram\n\n```\nSummary of my parrot 5.7.0 configuration:\n  configdate='Sat Oct  5 12:42:43 2013 GMT'\n  Platform:\n    osname=linux, archname=x86_64-linux-gnu-thread-multi\n    perl=/usr/bin/perl\n```","files":null}]}