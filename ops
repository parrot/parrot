{"version":1,"ops":[{"type":3,"author":{"id":"aeaa659130ab92a2084a11638a6eb1a6beb03360"},"timestamp":1295405994,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NDY=","github-url":"https://github.com/parrot/parrot/issues/581#issuecomment-3503646"},"message":"\u003cp\u003e\nThis is fixed, but I've added a reference to the fix in 248434ef in case anyone wants to diagnose this further.  NotFound came up with the fix, but said that he doesn't entirely understand why it works.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1295412824,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NDc=","github-url":"https://github.com/parrot/parrot/issues/581#issuecomment-3503647"},"message":"\u003cp\u003e\nI think the test is wrong.  It does, in essence, the following:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e    $P1 = new ['Float']\n    $P1 = 123.45\n    $P2 = new ['String']\n    $P2 = \"123.45\"\n    $I0 = cmp_num $P1, $P2\n    is($I0, 0, 'comparison ops: cmp_p_p: equality')\n\u003c/pre\u003e\u003cp\u003e\nI gather that the intent is to check whether the conversion of the string \"123.45\" to a Float is the same, whether that string comes in as literal text in the PIR file, or as a \"String\" that gets converted to a number.\n\u003c/p\u003e\n\n\u003cp\u003e\nComparing those two code paths is sensible, but the problem is the choice of number.  Since 123.45 can't be represented exactly in binary, the precise representation depends on how many bits are used.  On the x86 family of processors using the x87 math coprocessor, that might be 80 bits.  Using 'volatile' forces the compiler to reload the contents from memory.  Without the volatile keyword, the compiler is free to use a copy that might be in a register.  In the general case, we don't want to force the compiler to always refetch floating point numbers from memory.  The compiler ought to be able to use registers.\n\u003c/p\u003e\n\n\u003cp\u003e\nI think this fix should be reverted, and the test should be changed to pick a number that can be represented exactly in binary.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"aef4977f5ea786238d7c9581a2f192f4adc3f39d"},"timestamp":1295413218,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NDg=","github-url":"https://github.com/parrot/parrot/issues/581#issuecomment-3503648"},"message":"\u003cp\u003e\nBetter yet, Parrot should have a better and more robust way to compare floats using a delta or some other algorithm. Directly comparing floating-point representations in memory is fraught with danger no matter what values we pick.\n\u003c/p\u003e\n\n\u003cp\u003e\nI suggest we either modify cmp_num to take a third argument for a delta value, or we simply build in a much more robust algorithm into cmp_num.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1295413920,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NDk=","github-url":"https://github.com/parrot/parrot/issues/581#issuecomment-3503649"},"message":"\u003cp\u003e\nI don't think that picking a number that pass the tests solves anything. If the exact equality isn't supported we should use an epsilon instead.\n\u003c/p\u003e\n\n\u003cp\u003e\nAnd if we don't support exact equality we'll get that comparing $P1 and $P2 gives a result different than converting them to number registers and comparing. This may be confusing.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1295414218,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NTA=","github-url":"https://github.com/parrot/parrot/issues/581#issuecomment-3503650"},"message":"\u003cp\u003e\nExact equality is needed sometimes. If cmp_num says they are equal but the difference is zero, or the contrary, will not be good. If someone wants comparison within a margin he should ask for that.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1295416273,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NTE=","github-url":"https://github.com/parrot/parrot/issues/581#issuecomment-3503651"},"message":"\u003cp\u003e\nAgreed, floating point is complicated.  How \"close\" is \"close enough\" is strongly dependent on context.  There is no single universal answer.  It all depends on context.  The context here is test 102 of t/pmc/float.t, not a generic discussion of floating point equality.\n\u003c/p\u003e\n\n\u003cp\u003e\nIn this particular case, we have to ask what, precisely, we wish to test.  I indicated above what I thought this test was testing.  Assuming that is correct, then for this specific test, I think picking a number that can be represented exactly is sensible.\n\u003c/p\u003e\n\n\u003cp\u003e\nOf course, perhaps that test was intended to test something else.  In that case, depending on what that \"something else\" is, it might be that the test is simply wrong and should be deleted.  Without knowing what that \"something else\" is, I have no opinion.\n\u003c/p\u003e\n\n\u003cp\u003e\nIn either case, I think forcing the compiler to fetch a fresh value from memory is suboptimal and should be reverted.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1295418090,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NTI=","github-url":"https://github.com/parrot/parrot/issues/581#issuecomment-3503652"},"message":"\u003cp\u003e\nNote that the cmp_num vtable is used in a lot of places, so the impact of changing its meaning is unpredictable. I don't think we should risk that because of an optimization that no one is going to be able to measure.\n\u003c/p\u003e\n\n\u003cp\u003e\nAbout what the test does: I think that ff we want to improve it we should check for a variety of values the result of cpm_num with the PMCs is the same as the comparison of the number values obtained from them. Given that the implementation of the vtable cmp_num in several PMCs uses the vtable get_number, looks like the appropriate behavior to me.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"96fb2e2e33b59677e3a85ec74746c085275c50d1"},"timestamp":1295425693,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NTM=","github-url":"https://github.com/parrot/parrot/issues/581#issuecomment-3503653"},"message":"\u003cp\u003e\nI agree with most of the comments related to floating point testing for equality - it is a very hazardous activity.\n\u003c/p\u003e\n\n\u003cp\u003e\nHowever, one of the main points of this ticket, was that we had a situation where the optimizing g++ compiler on a 32 bit platform, generated a different result, from the  non-optimizing g++ compiler and from both the optimizing and non-optimizing gcc compiler and that an earlier version of that compiler did not, and furthermore, the problem did not occur on a 64 bit platform.\n\u003c/p\u003e\n\n\u003cp\u003e\nIs this a compiler bug, a parrot bug in which the later g++ compilers have more efficient optimizers, and where can this effect us in future.\n\u003c/p\u003e\n\n\u003cp\u003e\nCheers, Michael (mikehh)\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"099af60226e2576bd4ff0f5c2614b710c745cab6"},"timestamp":1295426343,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NTQ=","github-url":"https://github.com/parrot/parrot/issues/581#issuecomment-3503654"},"message":"\u003cp\u003e\nHello.\n\u003c/p\u003e\n\n\u003cp\u003e\nJust my $0.02. We should at least start with something like this - change 0.0 equality test to use epsilon value.\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003ediff --git a/include/parrot/misc.h b/include/parrot/misc.h\nindex e81ff80..488739b 100644\n--- a/include/parrot/misc.h\n+++ b/include/parrot/misc.h\n@@ -20,7 +20,8 @@\n #include \"parrot/parrot.h\"\n-#define FLOAT_IS_ZERO(f) ((f) == 0.0)\n+#include \u0026lt;float.h\u0026gt;\n+#define FLOAT_IS_ZERO(f) (((f) \u0026lt;= DBL_EPSILON) \u0026amp;\u0026amp; (f) \u0026gt;= -DBL_EPSILON )\n #ifndef PARROT_HAS_C99_SNPRINTF\n #  define snprintf Parrot_secret_snprintf\ndiff --git a/src/pmc/float.pmc b/src/pmc/float.pmc\nindex 55708a3..f265dd8 100644\n--- a/src/pmc/float.pmc\n+++ b/src/pmc/float.pmc\n@@ -260,13 +260,13 @@ The C\u0026lt;cmp\u0026gt; operation.\n     MULTI INTVAL cmp(Float value) {\n         const FLOATVAL diff = SELF.get_number() - VTABLE_get_number(INTERP, value);\n-        return diff \u0026gt; 0 ? 1 : diff \u0026lt; 0 ? -1 : 0;\n-        return FLOAT_IS_ZERO(diff) ? 0 : diff \u0026lt; 0 ? -1 : 1;\n   }\n   MULTI INTVAL cmp(DEFAULT value) {\n       const FLOATVAL diff =\n               SELF.get_number() - VTABLE_get_number(INTERP, value);\n-        return diff \u0026gt; 0 ? 1 : diff \u0026lt; 0 ? -1 : 0;\n-        return FLOAT_IS_ZERO(diff) ? 0 : diff \u0026lt; 0 ? -1 : 1;\n   }\n  /*\n  @@ -281,7 +281,7 @@ Returns the result of comparing the number with C\u0026lt;*value\u0026gt;.\n   MULTI INTVAL cmp_num(Float value) {\n       const FLOATVAL diff = SELF.get_number() - VTABLE_get_number(INTERP, value);\n-        return diff \u0026gt; 0 ? 1 : diff \u0026lt; 0 ? -1 : 0;\n-        return FLOAT_IS_ZERO(diff) ? 0 : diff \u0026lt; 0 ? -1 : 1;\n   }\n   MULTI INTVAL cmp_num(DEFAULT value) {\n  @@ -291,7 +291,7 @@ Returns the result of comparing the number with C\u0026lt;*value\u0026gt;.\n       volatile FLOATVAL n1 = SELF.get_number();\n       volatile FLOATVAL n2 = VTABLE_get_number(INTERP, value);\n       const FLOATVAL diff = n1 - n2;\n-        return diff \u0026gt; 0 ? 1 : diff \u0026lt; 0 ? -1 : 0;\n-        return FLOAT_IS_ZERO(diff) ? 0 : diff \u0026lt; 0 ? -1 : 1;\n   }\n  /*\n  \u003c/pre\u003e\u003cp\u003e\n  --\n  Bacek\n  \u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1295429885,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NTU=","github-url":"https://github.com/parrot/parrot/issues/581#issuecomment-3503655"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1978#comment:8\" title=\"Comment 8 for Ticket #1978\"\u003emikehh\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n I agree with most of the comments related to floating point testing for equality - it is a very hazardous activity.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nSimilarly, defining what parrot will and will not guarantee is also a very tricky  activity.\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n However, one of the main points of this ticket, was that we had a situation where the optimizing g++ compiler on a 32 bit platform, generated a different result, from the  non-optimizing g++ compiler and from both the optimizing and non-optimizing gcc compiler and that an earlier version of that compiler did not, and furthermore, the problem did not occur on a 64 bit platform.\n Is this a compiler bug, a parrot bug in which the later g++ compilers have more efficient optimizers, and where can this effect us in future.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nI don't think it's a compiler bug.  It's easy to imagine different versions of the compiler deciding to keep different items in registers.  On x86 systems using the x87 coprocessor with the extended 80-bit precision, this can lead to the sort of problem you encountered.  This does not affect x86_64 systems (nor SPARC nor PPC), since they don't use 80-bit extended precision registers for floating point.\n\u003c/p\u003e\n\n\u003cp\u003e\nI think it's an area where parrot's desired behavior hasn't been explicitly defined, so it's unclear whether the test, the pmc code, or both are in error.\n\u003c/p\u003e\n\n\u003cp\u003e\nEither choice can lead to surprises.  For example, allowing the 80-bit registers led to the problem here.  Not allowing 80-bit registers at all (gcc offers several ways to do this) might cause problems with external libraries that expect to use the 80-bit registers.  (As just one example, a parrot-based program and an \"equivalent\" C program might no longer get the same answer.  Perl 5 certainly has received a number of bug reports of just this sort.)\n\u003c/p\u003e\n\n\u003cp\u003e\nAs a virtual machine that hopes to interact both with higher level languages and with external libraries, both choices are reasonable, but neither is ideal.\n\u003c/p\u003e\n\n\u003cp\u003e\nMy personal bias is that the original test was in error -- parrot shouldn't make such promises of equality -- but it's also reasonable to take the opposite point of view.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"18879c4084549ff2c7022dc058bcf4940fadd0f2"},"timestamp":1296032840,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2Njc=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503667"},"message":"\u003cp\u003e\nShould be fixed in \u003ca   href=\"https://github.com/parrot/parrot/commit/958c51a370\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003ehttps://github.com/parrot/parrot/commit/958c51a370\u003c/a\u003e\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1296033226,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2Njg=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503668"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1989#comment:1\" title=\"Comment 1 for Ticket #1989\"\u003enwellnhof\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n Should be fixed in \u003ca   href=\"https://github.com/parrot/parrot/commit/958c51a370\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003ehttps://github.com/parrot/parrot/commit/958c51a370\u003c/a\u003e\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nYes, it is now passing for me on linux/i386.  Let's watch for smoke results on other OSes.  Then we can close it.\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1296192631,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2Njk=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503669"},"message":"\u003cp\u003e\nStill failing as of RELEASE_3_0_0-294-g2057f20 on Solaris 8/SPARC with\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e$ prove -v t/pmc/socket_ipv6.t\nt/pmc/socket_ipv6.t ..\n1..11\n# This Parrot is IPv6-aware\nok 1 - A TCP ipv6 sockaddr to localhost was set isa Sockaddr\nok 2 - A TCP ipv6 sockaddr to ::1 was set isa Sockaddr\nok 3 - A UDP ipv6 sockaddr to localhost was set: isa Sockaddr\nok 4 - A UDP ipv6 sockaddr to ::1 was set: isa Sockaddr\nconnect failed: 126\ncurrent instr.: 'test_bind' pc 114 (t/pmc/socket_ipv6.t:47)\ncalled from Sub 'main' pc 65 (t/pmc/socket_ipv6.t:34)\nDubious, test returned 1 (wstat 256, 0x100)\nFailed 7/11 subtests\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1296193239,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NzA=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503670"},"message":"\u003cp\u003e\nThis could be related to the fact that some people will not be able to create raw sockets.\n\u003c/p\u003e\n\n\u003cp\u003e\nWe need a good way to detect if raw sockets can be created and then skip the appropriate tests if needed.\n\u003c/p\u003e\n\n\u003cp\u003e\nI am not sure what PIO_SOCK_ERRNO=126 means.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"18879c4084549ff2c7022dc058bcf4940fadd0f2"},"timestamp":1296283694,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NzE=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503671"},"message":"\u003cp\u003e\nI had to remove the raw socket tests because they simply didn't work after I implemented strict error checking for the socket functions.\n\u003c/p\u003e\n\n\u003cp\u003e\nI also have some upcoming changes to enable system error messages instead of error codes.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"18879c4084549ff2c7022dc058bcf4940fadd0f2"},"timestamp":1296288361,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NzI=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503672"},"message":"\u003cp\u003e\nNow it seems that Configure.pl doesn't detect IPv6 support on Solaris. I kind of expected that after I changed the feature detection code. We should find out why config/auto/ipv6/test.in fails. The output from \"perl Configure.pl --verbose\" should contain that information.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1296294491,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NzM=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503673"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1989#comment:6\" title=\"Comment 6 for Ticket #1989\"\u003enwellnhof\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n We should find out why config/auto/ipv6/test.in fails. The output from \"perl Configure.pl --verbose\" should contain that information.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nSee if commit 17f46f5 helps.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1296393966,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NzQ=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503674"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1989#comment:4\" title=\"Comment 4 for Ticket #1989\"\u003edukeleto\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n This could be related to the fact that some people will not be able to create raw sockets.\n We need a good way to detect if raw sockets can be created and then skip the appropriate tests if needed.\n I am not sure what PIO_SOCK_ERRNO=126 means.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nAssuming that's an errno (I haven't looked at the parrot code to see where it comes from), it corresponds to:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e    EADDRNOTAVAIL   126     /\\* Can't assign requested address */\n\u003c/pre\u003e\u003cp\u003e\non Solaris.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1296394118,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NzU=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503675"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1989#comment:6\" title=\"Comment 6 for Ticket #1989\"\u003enwellnhof\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n Now it seems that Configure.pl doesn't detect IPv6 support on Solaris. I kind of expected that after I changed the feature detection code. We should find out why config/auto/ipv6/test.in fails. The output from \"perl Configure.pl --verbose\" should contain that information.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nOdd.  The Configure.pl test works for me on Solaris 8 (the only thing handy at the moment to test).  I see\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003eauto::ipv6 -          Determine IPV6 capabilities.........................yes.\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1296445820,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2NzY=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503676"},"message":"\u003cp\u003e\nAs of RELEASE_3_0_0-317-g0e83c3b\nthis is still failing on Solaris 10 at what looks like the same bind() call:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003et/pmc/socket_ipv6.t ..\n1..11\n# This Parrot is IPv6-aware\nok 1 - A TCP ipv6 sockaddr to localhost was set isa Sockaddr\nok 2 - A TCP ipv6 sockaddr to ::1 was set isa Sockaddr\nok 3 - A UDP ipv6 sockaddr to localhost was set: isa Sockaddr\nok 4 - A UDP ipv6 sockaddr to ::1 was set: isa Sockaddr\nbind failed: Cannot assign requested address\ncurrent instr.: 'test_bind' pc 114 (t/pmc/socket_ipv6.t:47)\ncalled from Sub 'main' pc 65 (t/pmc/socket_ipv6.t:34)\nDubious, test returned 1 (wstat 256, 0x100)\nFailed 7/11 subtests\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"18879c4084549ff2c7022dc058bcf4940fadd0f2"},"timestamp":1296627935,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2Nzc=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503677"},"message":"\u003cp\u003e\nI googled a bit and my hunch is that getaddrinfo returns multiple IPv6 addresses and some of them are invalid for some reason. I added some debug output to the IPv6 test in 2cdf5dd.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1296758932,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2Nzg=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503678"},"message":"1472 byte attachment from doughera\nat http://trac.parrot.org/parrot/raw-attachment/ticket/1989/tt1989-passive.patch\n\n```diff --git a/t/pmc/socket_ipv6.t b/t/pmc/socket_ipv6.t\nindex 0c6a882..cbd3280 100644\n--- a/t/pmc/socket_ipv6.t\n+++ b/t/pmc/socket_ipv6.t\n@@ -43,7 +43,7 @@ IPv6-related tests for the Socket PMC.\n\n```\n sock = new 'Socket'\n sock.'socket'(.PIO_PF_INET6, .PIO_SOCK_STREAM, .PIO_PROTO_TCP)\n```\n-    addrinfo = sock.'getaddrinfo'(null_string, 1234, .PIO_PROTO_TCP, .PIO_PF_INET6, 0)\n-    addrinfo = sock.'getaddrinfo'(null_string, 1234, .PIO_PROTO_TCP, .PIO_PF_INET6, 1)\n  \n   # output addresses for debugging\n   it = iter addrinfo\n  @@ -73,7 +73,7 @@ IPv6-related tests for the Socket PMC.\n   sock.'close'()\n  \n   sock.'socket'(.PIO_PF_INET, .PIO_SOCK_STREAM, .PIO_PROTO_TCP)\n-    addrinfo = sock.'getaddrinfo'(null_string, 1234, .PIO_PROTO_TCP, .PIO_PF_INET, 0)\n-    addrinfo = sock.'getaddrinfo'(null_string, 1234, .PIO_PROTO_TCP, .PIO_PF_INET, 1)\n   sock.'bind'(addrinfo)\n  \n   str = sock.'local_address'()\n  diff --git a/t/pmc/testlib/test_server_ipv6.pir b/t/pmc/testlib/test_server_ipv6.pir\n  index 7e39f80..cd8fba1 100644\n  --- a/t/pmc/testlib/test_server_ipv6.pir\n  +++ b/t/pmc/testlib/test_server_ipv6.pir\n  @@ -28,7 +28,7 @@ in case of test failures.\n  \n   sock = new 'Socket'\n   sock.'socket'(.PIO_PF_INET6, .PIO_SOCK_STREAM, .PIO_PROTO_TCP)\n-    address = sock.'getaddrinfo'(null_string, 1234, .PIO_PROTO_TCP, .PIO_PF_INET6, 0)\n-    address = sock.'getaddrinfo'(null_string, 1234, .PIO_PROTO_TCP, .PIO_PF_INET6, 1)\n   sock.'bind'(address)\n   sock.'listen'(5)\n\n```\n```","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1296780474,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2Nzk=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503679"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1989#comment:11\" title=\"Comment 11 for Ticket #1989\"\u003enwellnhof\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n I googled a bit and my hunch is that getaddrinfo returns multiple IPv6 addresses and some of them are invalid for some reason. I added some debug output to the IPv6 test in 2cdf5dd.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nThank you for the attempt.  I think the problems are elsewhere, however.\n\u003c/p\u003e\n\n\u003cp\u003e\nI've never done any socket programming, but based on reading the man pages, it looks like the call to getaddrinfo() is wrong in the cases where the result is going to be passed to bind.  According to the man page, AI_PASSIVE should be set in those cases.  I've attached a patch to the tests to fix that.\n\u003c/p\u003e\n\n\u003cp\u003e\nThat patch leads to new failures in tests 5 and 6 in the returned strings.  I now suspect the those tests were wrong as well, but I'd appreciate confirmation from someone who actually knows anything about socket programming.\n\u003c/p\u003e\n\n\u003cp\u003e\nWith my patch applied, and ignoring the errors from the \"expected\" names in tests 5 and 6, I still get failures on both Solaris 8 and 10 at the connect() stage:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e$ ./parrot t/pmc/socket_ipv6.t\n1..11\n\n# This Parrot is IPv6-aware\n\nok 1 - A TCP ipv6 sockaddr to localhost was set isa Sockaddr\nok 2 - A TCP ipv6 sockaddr to ::1 was set isa Sockaddr\nok 3 - A UDP ipv6 sockaddr to localhost was set: isa Sockaddr\nok 4 - A UDP ipv6 sockaddr to ::1 was set: isa Sockaddr\n\n# address 1: family 26, type 2, protocol 0\n\nnot ok 5 - local address of bound socket is ::1\n\n# Have: :::1234\n\n# Want: ::1:1234\n\nnot ok 6 - local address of bound socket is 127.0.0.1\n\n# Have: 0.0.0.0:1234\n\n# Want: 127.0.0.1:1234\n\nok 7 - Server process started\nconnect failed: Network is unreachable\ncurrent instr.: 'test_server' pc 365 (t/pmc/socket_ipv6.t:111)\ncalled from Sub 'main' pc 74 (t/pmc/socket_ipv6.t:36)\n\u003c/pre\u003e\u003cp\u003e\nAt this point I'm _way_ beyond my sphere of knowledge, so I have no idea what to do next.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1296780532,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2ODA=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503680"},"message":"\u003cp\u003e\nset AI_PASSIVE on getaddrinfo() calls prior to bind()\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"18879c4084549ff2c7022dc058bcf4940fadd0f2"},"timestamp":1296786156,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2ODE=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503681"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1989#comment:12\" title=\"Comment 12 for Ticket #1989\"\u003edoughera\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n I've never done any socket programming, but based on reading the man pages, it looks like the call to getaddrinfo() is wrong in the cases where the result is going to be passed to bind.  According to the man page, AI_PASSIVE should be set in those cases.  I've attached a patch to the tests to fix that.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nYes, that seems to be the reason. Can you give b12ac89 a try?\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1296886253,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2ODI=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503682"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1989#comment:13\" title=\"Comment 13 for Ticket #1989\"\u003enwellnhof\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n Yes, that seems to be the reason. Can you give b12ac89 a try?\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nThat seems to be worse.  It's back to failing after test 4.  As of RELEASE_3_0_0-448-gb12ac89, I get:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003et/pmc/socket_ipv6.t ..\n1..11\n# This Parrot is IPv6-aware\nok 1 - A TCP ipv6 sockaddr to localhost was set isa Sockaddr\nok 2 - A TCP ipv6 sockaddr to ::1 was set isa Sockaddr\nok 3 - A UDP ipv6 sockaddr to localhost was set: isa Sockaddr\nok 4 - A UDP ipv6 sockaddr to ::1 was set: isa Sockaddr\n# address 1: family 26, type 2, protocol 0\nbind failed: Cannot assign requested address\ncurrent instr.: 'test_bind' pc 158 (t/pmc/socket_ipv6.t:68)\ncalled from Sub 'main' pc 65 (t/pmc/socket_ipv6.t:34)\nDubious, test returned 1 (wstat 256, 0x100)\nFailed 7/11 subtests\nTest Summary Report\n-------------------\nt/pmc/socket_ipv6.t (Wstat: 256 Tests: 4 Failed: 0)\n  Non-zero exit status: 1\n  Parse errors: Bad plan.  You planned 11 tests but ran 4.\nFiles=1, Tests=4,  0 wallclock secs ( 0.02 usr  0.01 sys +  0.02 cusr  0.02 csys =  0.07 CPU)\nResult: FAIL\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"18879c4084549ff2c7022dc058bcf4940fadd0f2"},"timestamp":1296946567,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2ODM=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503683"},"message":"\u003cp\u003e\nOK, then we should try your patch on top. I applied it in fd01a858b1.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1296954089,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2ODQ=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503684"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1989#comment:15\" title=\"Comment 15 for Ticket #1989\"\u003enwellnhof\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n OK, then we should try your patch on top. I applied it in fd01a858b1.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nOh, do you mean b12ac89 didn't include my patch?  No wonder it didn't work.\nI'll test this the next chance I have, but that might not be for a while.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1298264621,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDM2ODU=","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-3503685"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1989#comment:16\" title=\"Comment 16 for Ticket #1989\"\u003edoughera\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n Replying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/1989#comment:15\" title=\"Comment 15 for Ticket #1989\"\u003enwellnhof\u003c/a\u003e:\n\u003c/p\u003e\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n OK, then we should try your patch on top. I applied it in fd01a858b1.\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n Oh, do you mean b12ac89 didn't include my patch?  No wonder it didn't work.\n I'll test this the next chance I have, but that might not be for a while.\n\u003c/p\u003e\n\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nTesting today on Solaris 8/SPARC, I get the exact same error message I reported most recently -- the bind call fails after test 4.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1355293767,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExMjc4MzU4","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-11278358"},"message":"Nobody has complained in 2 years. I think we can close the ticket.","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1355358156,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDExMzE2NzQ2","github-url":"https://github.com/parrot/parrot/issues/588#issuecomment-11316746"},"message":"I concur that it was good to close.  This is current output on both Darwin/PPC and Linux/i386:\n\n```\n$ prove -lv t/pmc/socket_ipv6.t\nt/pmc/socket_ipv6.t .. \n1..11\n# This Parrot is IPv6-aware\nok 1 - A TCP ipv6 sockaddr to localhost was set isa Sockaddr\nok 2 - A TCP ipv6 sockaddr to ::1 was set isa Sockaddr\nok 3 - A UDP ipv6 sockaddr to localhost was set: isa Sockaddr\nok 4 - A UDP ipv6 sockaddr to ::1 was set: isa Sockaddr\n# address 1: family 10, type 1, protocol 6\nok 5 - local address of bound socket is ::1\nok 6 - local address of bound socket is 127.0.0.1\nok 7 - Server process started\nok 8 - Server got a connection\nok 9 - send\nok 10 - recv\nok 11 - Exit status of server process\nok\nAll tests successful.\nFiles=1, Tests=11,  1 wallclock secs ( 0.03 usr  0.00 sys +  0.01 cusr  0.00 csys =  0.04 CPU)\nResult: PASS\n```","files":null}]}