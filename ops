{"version":1,"ops":[{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1248072859,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5MzU=","github-url":"https://github.com/parrot/parrot/issues/383#issuecomment-3502935"},"message":"\u003cp\u003e\nNote:  There is a \u003ca   href=\"http://rt.perl.org/rt3/Ticket/Display.html?id=41496\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003eclosed RT ticket, #41496\u003c/a\u003e, which called for putting determination of compiler-specific profiling values in its own configuration step.  I closed that ticket because we seemed to be getting along fine without it.  But if we do get a better idea of what other C compilers need in that regard, we can consider creating a specific configuration step.  Or perhaps it can go into \u003ci\u003econfig/inter/progs.pm\u003c/i\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1288773358,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5MzY=","github-url":"https://github.com/parrot/parrot/issues/383#issuecomment-3502936"},"message":"\u003cp\u003e\nResearching this older ticket, I found the following information for the Intel C compiler:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003eWindows:       /Qprof-gen\nMac and Linux: -prof_gen\n\u003c/pre\u003e\u003cp\u003e\nSources: \u003ca   href=\"http://en.wikipedia.org/wiki/Intel_C%2B%2B_Compiler\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003eWikipedia\u003c/a\u003e and \u003ca   href=\"http://software.intel.com/sites/products/documentation/hpc/compilerpro/en-us/cpp/lin/compiler_c/optaps/common/optaps_pgo_expl.htm\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003esoftware.intel.com\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nCan someone verify that these would be appropriate?\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1288773823,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5Mzc=","github-url":"https://github.com/parrot/parrot/issues/383#issuecomment-3502937"},"message":"\u003cp\u003e\nResearching this older ticket, I found the following information for Solaris and Sun Studio: \u003ctt\u003e-g\u003c/tt\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nSources:  \u003ca   href=\"http://developers.sun.com/solaris/articles/options.html\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003eSun Solaris docs\u003c/a\u003e and \u003ca   href=\"http://developers.sun.com/sunstudio/documentation/techart/gc_options.html\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003eSun Studio docs\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003e\nCan someone verify that these would be appropriate?\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1288774382,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5Mzg=","github-url":"https://github.com/parrot/parrot/issues/383#issuecomment-3502938"},"message":"\u003cp\u003e\nFor the record, here's what the GCC docs have to say about this (excerpts):\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e-g\nProduce debugging information in the operating system's native\nformat (stabs, COFF, XCOFF, or DWARF 2). GDB can work with this\ndebugging information.\n-p\nGenerate extra code to write profile information suitable for\nthe analysis program prof.\n-pg\nGenerate extra code to write profile information suitable for\nthe analysis program gprof.\n\u003c/pre\u003e\u003cp\u003e\nSources: \u003ca   href=\"http://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003egcc Debugging Options\u003c/a\u003e.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1288816167,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5Mzk=","github-url":"https://github.com/parrot/parrot/issues/383#issuecomment-3502939"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/855#comment:3\" title=\"Comment 3 for Ticket #855\"\u003ejkeenan\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n Researching this older ticket, I found the following information for Solaris and Sun Studio: \u003ctt\u003e-g\u003c/tt\u003e\n Sources:  \u003ca   href=\"http://developers.sun.com/solaris/articles/options.html\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003eSun Solaris docs\u003c/a\u003e and \u003ca   href=\"http://developers.sun.com/sunstudio/documentation/techart/gc_options.html\"\u003e\u003cspan class=\"icon\"\u003e \u003c/span\u003eSun Studio docs\u003c/a\u003e\n Can someone verify that these would be appropriate?\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nIt all depends on what you want to do.  There are different things one might do, all of which might be considered \"profiling\".  For Sun Studio compilers, \u003ctt\u003e-g\u003c/tt\u003e will produce data suitable for analysis with the \u003ctt\u003e analyzer(1) \u003c/tt\u003e program.  \u003ctt\u003e-xpg\u003c/tt\u003e will produce data suitable for \u003ctt\u003e prof \u003c/tt\u003e or \u003ctt\u003e gprof \u003c/tt\u003e.  \u003ctt\u003e -xprofile={collect|use} \u003c/tt\u003e will collect and use data suitable for the compiler itself to use for optimizations, and \u003ctt\u003e-xprofile=tcov\u003c/tt\u003e will collect data suitable for \u003ctt\u003e tcov(1) \u003c/tt\u003e.  All of these should be specified both at the compile phase and at the link phase.\n\u003c/p\u003e\n\n\u003cp\u003e\nNote too that these flags depend on the compiler, not on the operating system, so they don't really belong in an operating-system-specific hints file.  (This would also be the case for Intel's compiler.)  If Configure.pl wants to test for them at all, it should be after the compiler is known.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1288852846,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5NDA=","github-url":"https://github.com/parrot/parrot/issues/383#issuecomment-3502940"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/855#comment:5\" title=\"Comment 5 for Ticket #855\"\u003edoughera\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cp\u003e\nHow about if, on the KISS principle, we said that for Parrot at this stage of its development, we defined \u003ci\u003eprofiling\u003c/i\u003e as \u003ci\u003e\"... [producing] data suitable for analysis with prof or gprof\"\u003c/i\u003e?\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1288898687,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5NDE=","github-url":"https://github.com/parrot/parrot/issues/383#issuecomment-3502941"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/855#comment:6\" title=\"Comment 6 for Ticket #855\"\u003ejkeenan\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n How about if, on the KISS principle, we said that for Parrot at this stage of its development, we defined \u003ci\u003eprofiling\u003c/i\u003e as \u003ci\u003e\"... [producing] data suitable for analysis with prof or gprof\"\u003c/i\u003e?\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nSounds sensible to me. For Sun Studio, all three flags, cc_debug, ld_debug, and link_debug, should be set to -xpg.  For gcc, all three should be set to -pg.  Since you don't know which compiler you have until the config::inter:progs step, this code should probably all be moved there from its current home of init::defaults.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1288938872,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5NDI=","github-url":"https://github.com/parrot/parrot/issues/383#issuecomment-3502942"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/855#comment:7\" title=\"Comment 7 for Ticket #855\"\u003edoughera\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003eSince you don't know which compiler you have until the\nconfig::inter:progs step, this code should probably all\nbe moved there from its current home of init::defaults.\n\u003c/pre\u003e\u003cp\u003e\nAndy, I noticed that in inter::progs we \u003cstrong\u003ealready\u003c/strong\u003e have some code for doing a \"debugging build\" of Parrot:\n\u003c/p\u003e\n\u003cpre class=\"wiki\"\u003e    143 sub _get_debug {\n    144     my ($conf, $ask) = @_;\n    145     my $debug = 'n';\n    146     $debug = 'y' if $conf-\u0026gt;options-\u0026gt;get('debugging');\n    147     $debug = prompt( \"Do you want a debugging build of Parrot?\", $debug         )\n    148         if $ask;\n    149     return $debug;\n    150 }\n...\n    157 sub _set_debug_and_warn {\n    158     my ($conf, $debug) = @_;\n    159     if ( $debug =~ /n/i ) {\n    160         $conf-\u0026gt;data-\u0026gt;set(\n    161             cc_debug   =\u0026gt; '',\n    162             link_debug =\u0026gt; '',\n    163             ld_debug   =\u0026gt; ''\n    164         );\n    165     }\n\u003c/pre\u003e\u003cp\u003e\nSo it seems that whatever is currently being set in \u003ctt\u003einit::defaults\u003c/tt\u003e, it is being overwritten in \u003ctt\u003einter::progs\u003c/tt\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\nIs there any meaningful distinction between the \u003ctt\u003eprofile\u003c/tt\u003e configuration option handled in \u003ctt\u003einit::defaults\u003c/tt\u003e and the \u003ctt\u003edebugging\u003c/tt\u003e option handled in \u003ctt\u003einter::progs\u003c/tt\u003e?  Couldn't we collapse the two into each other?  And if we do so, which should be the name of the option: 'profile' or 'debugging'?\n\u003c/p\u003e\n\n\u003cp\u003e\n(Also will the regex \u003ctt\u003em/sun|solaris/i\u003c/tt\u003e suffice for recognizing those compilers?)\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1289249864,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5NDM=","github-url":"https://github.com/parrot/parrot/issues/383#issuecomment-3502943"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/855#comment:8\" title=\"Comment 8 for Ticket #855\"\u003ejkeenan\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n Is there any meaningful distinction between the \u003ctt\u003eprofile\u003c/tt\u003e configuration option handled in \u003ctt\u003einit::defaults\u003c/tt\u003e and the \u003ctt\u003edebugging\u003c/tt\u003e option handled in \u003ctt\u003einter::progs\u003c/tt\u003e?  Couldn't we collapse the two into each other?  And if we do so, which should be the name of the option: 'profile' or 'debugging'?\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nI would favor collapsing the two into \"debugging\", even though they are logically distinct.  There are very many different things one might imagine asking a compiler to do; it doesn't make sense to make up separate Configure.pl ones for each.  Ultimately, as long as there is some way to pass arbitrary options to the compiler through Configure.pl, people will be able to do whatever it is they are trying to do.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1289250970,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5NDQ=","github-url":"https://github.com/parrot/parrot/issues/383#issuecomment-3502944"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/855#comment:8\" title=\"Comment 8 for Ticket #855\"\u003ejkeenan\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n (Also will the regex \u003ctt\u003em/sun|solaris/i\u003c/tt\u003e suffice for recognizing those compilers?)\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nRunning\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e    $cc -V\n\u003c/pre\u003e\u003cp\u003e\non Solaris 10 produces this output:\n\u003c/p\u003e\n\u003cpre class=\"wiki\"\u003ecc: Sun C 5.11 SunOS_i386 2010/08/13\nusage: cc [ options ] files.  Use 'cc -flags' for details\n\u003c/pre\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1289895058,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5NDU=","github-url":"https://github.com/parrot/parrot/issues/383#issuecomment-3502945"},"message":"\u003cp\u003e\nThe more I look at this ticket, the more of a morass it seems.  Assignments to the various \u003ctt\u003e*_debug\u003c/tt\u003e attributes are strewn over several configuration steps.\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003efind config -type f | xargs grep -n debug | grep -vE '(debug(|/gen)'\nconfig/init/defaults.pm:90:        debugging =\u0026gt; $conf-\u0026gt;options-\u0026gt;get('debugging') ? 1 : 0,\nconfig/init/defaults.pm:140:        cc_debug   =\u0026gt; '-g',\nconfig/init/defaults.pm:141:        link_debug =\u0026gt; '',\nconfig/init/defaults.pm:161:        # include debug info in executable\nconfig/init/defaults.pm:162:        ld_debug =\u0026gt; '',\nconfig/init/defaults.pm:245:        # debugging internals.\nconfig/init/defaults.pm:256:#            cc_debug =\u0026gt; \" -pg \",\nconfig/init/defaults.pm:257:#            ld_debug =\u0026gt; \" -pg \",\nconfig/init/hints/mswin32.pm:91:            cc_debug            =\u0026gt; '-Zi',\nconfig/init/hints/mswin32.pm:92:            ld_debug            =\u0026gt; '-debug',\nconfig/init/hints/mswin32.pm:125:        # We can't use -opt: and -debug together.\nconfig/init/hints/mswin32.pm:126:        if ( $conf-\u0026gt;data-\u0026gt;get('ld_debug') =~ /-debug/ ) {\nconfig/init/hints/mswin32.pm:143:            cc_debug            =\u0026gt; '-Zi',\nconfig/init/hints/mswin32.pm:146:            ld_debug            =\u0026gt; '-debug',\nconfig/init/hints/mswin32.pm:164:        # We can't use -opt: and -debug together.\nconfig/init/hints/mswin32.pm:165:        if ( $conf-\u0026gt;data-\u0026gt;get('ld_debug') =~ /-debug/ ) {\nconfig/init/hints/mswin32.pm:182:            cc_debug   =\u0026gt; '-v',\nconfig/init/hints/mswin32.pm:188:            ld_debug       =\u0026gt; '-v',\nconfig/inter/progs.pm:10:lexical analyzer generator and parser generator to use. Also whether debugging\nconfig/inter/progs.pm:42:    return unless defined $debug;\nconfig/inter/progs.pm:144:sub _get_debug {\nconfig/inter/progs.pm:146:    my $debug = 'n';\nconfig/inter/progs.pm:147:    $debug = 'y' if $conf-\u0026gt;options-\u0026gt;get('debugging');\nconfig/inter/progs.pm:148:    $debug = prompt( \"Do you want a debugging build of Parrot?\", $debug )\nconfig/inter/progs.pm:150:    ( $debug =~ /^[yn]$/i ) ? return $debug : return;\nconfig/inter/progs.pm:153:sub _set_debug {\nconfig/inter/progs.pm:154:    my ($conf, $debug) = @_;\nconfig/inter/progs.pm:155:    if ( $debug =~ /n/i ) {\nconfig/inter/progs.pm:157:            cc_debug   =\u0026gt; '',\nconfig/inter/progs.pm:158:            link_debug =\u0026gt; '',\nconfig/inter/progs.pm:159:            ld_debug   =\u0026gt; ''\nconfig/init/optimize.pm:68:    # disable debug flags.\nconfig/init/optimize.pm:69:    $conf-\u0026gt;data-\u0026gt;set( cc_debug =\u0026gt; '' );\n\u003c/pre\u003e\u003cp\u003e\nLet's translate this into humanspeak.  \u003ctt\u003einit::defaults\u003c/tt\u003e sets a key \u003ctt\u003edebugging\u003c/tt\u003e if the command-line option \u003ctt\u003edebugging\u003c/tt\u003e has been set.  Then, regardless of the setting of \u003ctt\u003edebugging\u003c/tt\u003e, it sets \u003ctt\u003e-g\u003c/tt\u003e as the default value for \u003ctt\u003ecc_debug\u003c/tt\u003e, an empty string as the default value for \u003ctt\u003elink_debug\u003c/tt\u003e and \u003ctt\u003eld_debug\u003c/tt\u003e.  Then, if command-line option \u003ctt\u003eprofile\u003c/tt\u003e has been set, \u003ctt\u003e-pg\u003c/tt\u003e is set as the value for \u003ctt\u003ecc_debug\u003c/tt\u003e and \u003ctt\u003eld_debug\u003c/tt\u003e -- but not \u003ctt\u003elink_debug\u003c/tt\u003e!  (I'm looking at code in the \u003ci\u003ett855_debugging_options\u003c/i\u003e branch here.)\n\u003c/p\u003e\n\n\u003cp\u003e\nNext, if and only if you're on Win32, \u003ci\u003einit::hints::mswin32\u003c/i\u003e sets values for \u003ctt\u003ecc_debug\u003c/tt\u003e and \u003ctt\u003eld_debug\u003c/tt\u003e depending -- to oversimplify -- on which C compiler you're using.  It also makes use of \u003ctt\u003e-opt\u003c/tt\u003e and \u003ctt\u003e-debug\u003c/tt\u003e mutually exclusive.\n\u003c/p\u003e\n\n\u003cp\u003e\nNext, \u003ctt\u003einter::progs\u003c/tt\u003e allows interactive setting of debugging options.  Or, to be more precise, it permits the user to interactively request debugging.  If at this point the user explicitly defines a debugging build, all previous settings to the three attributes are wiped out.\n\u003c/p\u003e\n\n\u003cp\u003e\nFinally, in \u003ctt\u003einit::optimize\u003c/tt\u003e, \u003ci\u003eConfigure.pl\u003c/i\u003e asks whether the user has requested an optimized build.  If so, then \u003ctt\u003ecc_debug\u003c/tt\u003e is set to an empty string, regardless of any earlier settings -- but \u003ctt\u003elink_debug\u003c/tt\u003e and \u003ctt\u003eld_debug\u003c/tt\u003e are untouched.\n\u003c/p\u003e\n\n\u003cp\u003e\nConfused?  You're not alone.\n\u003c/p\u003e\n\n\u003cp\u003e\nOne thing that has become apparent to me is that we have to distinguish between the user's \u003cstrong\u003erequest for a debugging build\u003c/strong\u003e and the \u003cstrong\u003eassignment of correct values to the 3 debugging attributes\u003c/strong\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\nAnother thing that has become apparent to me is that we have \u003cstrong\u003eone\u003c/strong\u003e determination of which operating system we're on in or prior to \u003ctt\u003einit::hints\u003c/tt\u003e, but we do not set definitive values for \u003ctt\u003eosname\u003c/tt\u003e until a later configuration step, \u003ctt\u003eauto::arch\u003c/tt\u003e.\n\u003c/p\u003e\n\n\u003cp\u003e\nThat's where my understanding of the issues currently stands.  Thank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1294105670,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5NDY=","github-url":"https://github.com/parrot/parrot/issues/383#issuecomment-3502946"},"message":"\u003cp\u003e\nI've stared at this ticket from time to time over the past two months.  Some further observations:\n\u003c/p\u003e\n\n\u003cp\u003e\n1. It's interesting that the config step which makes the final determination re a debugging build, \u003ctt\u003einit::optimize\u003c/tt\u003e (step 17), occurs long after the next-to-last step in this process, \u003ctt\u003einter::progs\u003c/tt\u003e (step 5).\n\u003c/p\u003e\n\n\u003cp\u003e\n2. It's also interesting that the POD to \u003ci\u003econfig/init/optimize.pm\u003c/i\u003e asks the question:\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003eShould this be part of config/inter/progs.pm? XXX\n\u003c/pre\u003e\u003cp\u003e\nIf the answer to that question were \u003ci\u003eYes,\u003c/i\u003e then we could handle our debugging and optimization concerns much earlier in the process.\n\u003c/p\u003e\n\n\u003cp\u003e\n3. Unfortunately, \u003ctt\u003einit::optimize\u003c/tt\u003e relies on two config data that are determined between steps 5 and 15:\n\u003c/p\u003e\n\n\u003cp\u003e\na. Are we using \u003ci\u003egcc\u003c/i\u003e and, if so, which version?\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e    my $gccversion = $conf-\u0026gt;data-\u0026gt;get( 'gccversion' );\n\u003c/pre\u003e\u003cp\u003e\n(determined in Step 9, \u003ctt\u003eauto::gcc\u003c/tt\u003e)\n\u003c/p\u003e\n\n\u003cp\u003e\nb. Are we on AMD64?\n\u003c/p\u003e\n\n\u003cpre class=\"wiki\"\u003e    if ($conf-\u0026gt;data-\u0026gt;get('cpuarch') eq 'amd64') {\n        $conf-\u0026gt;data-\u0026gt;set('optimize::src/gc/system.c','');\n    }\n\u003c/pre\u003e\u003cp\u003e\n(\u003ctt\u003ecpuarch\u003c/tt\u003e is determined in Step 15, \u003ctt\u003eauto::arch\u003c/tt\u003e)\n\u003c/p\u003e\n\n\u003cp\u003e\n4. This raises the possibility that the best way to proceed might be to use step 17 more explicitly for making the final determinations for \u003cstrong\u003eboth\u003c/strong\u003e debugging and optimization.  After all, if we're requesting optimization, we don't want the debugging information.  And (I think) vice versa.\n\u003c/p\u003e\n\n\u003cp\u003e\nThat would imply consolidating assignments to \u003ctt\u003ecc_debug\u003c/tt\u003e, \u003ctt\u003eld_debug\u003c/tt\u003e and \u003ctt\u003elink_debug\u003c/tt\u003e in step 17 -- and not doing them earlier.  What we would do earlier is to define appropriate values for appropriate OS/compiler/platform combinations.\n\u003c/p\u003e\n\n\u003cp\u003e\nHow does that sound?\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"d9b4aee65ce8c18d4a43eced1eecb0d154e1eebb"},"timestamp":1294106997,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5NDc=","github-url":"https://github.com/parrot/parrot/issues/383#issuecomment-3502947"},"message":"\u003cp\u003e\nFollow-up question:\n\u003c/p\u003e\n\n\u003cp\u003e\nIf a user has requested an optimized build, does it make any sense to have values for \u003ctt\u003elink_debug\u003c/tt\u003e and \u003ctt\u003eld_debug\u003c/tt\u003e?  In the optimize case, shouldn't they be set to empty strings just like \u003ctt\u003ecc_debug\u003c/tt\u003e?\n\u003c/p\u003e\n\n\u003cp\u003e\nThank you very much.\n\u003c/p\u003e\n\n\u003cp\u003e\nkid51\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"bbd4d30061de10095711e4b50c199671231129a5"},"timestamp":1294110763,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5NDg=","github-url":"https://github.com/parrot/parrot/issues/383#issuecomment-3502948"},"message":"\u003cp\u003e\nReplying to \u003ca href=\"http://trac.parrot.org/parrot/ticket/855#comment:13\" title=\"Comment 13 for Ticket #855\"\u003ejkeenan\u003c/a\u003e:\n\u003c/p\u003e\n\n\u003cblockquote class=\"citation\"\u003e\n\u003cp\u003e\n Follow-up question:\n If a user has requested an optimized build, does it make any sense to have values for \u003ctt\u003elink_debug\u003c/tt\u003e and \u003ctt\u003eld_debug\u003c/tt\u003e?  In the optimize case, shouldn't they be set to empty strings just like \u003ctt\u003ecc_debug\u003c/tt\u003e?\n\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\nThe answer to that depends on wether you consider building an optimized parrot should exclude the possibility of building a debug-able parrot.  While it's true that the configure system has no direct provisions for this, it is (or used to be, I haven't tried in som time) relatively simple to build an optimized parrot with debugging symbols. IIRC chromatic used to do this regularly so that he could get line number information out of gdb when debugging optimized builds, it's likely we should take this use case into consideration when evaluating the impact of changes to the debug flags in optimized builds.\n\u003c/p\u003e","files":null},{"type":3,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1294124074,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDM1MDI5NDk=","github-url":"https://github.com/parrot/parrot/issues/383#issuecomment-3502949"},"message":"\u003cpre class=\"wiki\"\u003eOn Mon, Jan 3, 2011 at 2:12 PM, Parrot \u0026lt;parrot-tickets@lists.parrot.org\u0026gt; wrote:\n\u0026gt; #855: config/init/defaults.pm:  Profiling options are too specific to GCC\n\u0026gt; -----------------------+----------------------------------------------------\n\u0026gt;  Reporter:  jkeenan    |       Owner:  jkeenan\n\u0026gt;     Type:  bug        |      Status:  assigned\n\u0026gt;  Priority:  minor      |   Milestone:\n\u0026gt; Component:  configure  |     Version:  1.3.0\n\u0026gt;  Severity:  medium     |    Keywords:  profile gcc debug\n\u0026gt;     Lang:             |       Patch:\n\u0026gt;  Platform:  all        |\n\u0026gt; -----------------------+----------------------------------------------------\n\u0026gt;\n\u0026gt; Comment(by darbelo):\n\u0026gt;\n\u0026gt;  Replying to [comment:13 jkeenan]:\n\u0026gt;  \u0026gt; Follow-up question:\n\u0026gt;  \u0026gt;\n\u0026gt;  \u0026gt; If a user has requested an optimized build, does it make any sense to\n\u0026gt;  have values for `link_debug` and `ld_debug`?  In the optimize case,\n\u0026gt;  shouldn't they be set to empty strings just like `cc_debug`?\n\u0026gt;\n\u0026gt;  The answer to that depends on wether you consider building an optimized\n\u0026gt;  parrot should exclude the possibility of building a debug-able parrot.\n\u0026gt;  While it's true that the configure system has no direct provisions for\n\u0026gt;  this, it is (or used to be, I haven't tried in som time) relatively simple\n\u0026gt;  to build an optimized parrot with debugging symbols. IIRC chromatic used\n\u0026gt;  to do this regularly so that he could get line number information out of\n\u0026gt;  gdb when debugging optimized builds, it's likely we should take this use\n\u0026gt;  case into consideration when evaluating the impact of changes to the debug\n\u0026gt;  flags in optimized builds.\n\u0026gt;\nAnd others; I regularly build with --optimize and --cflags=\"-g\" ; this\nshould continue to work.\nRegards.\n--\nWill \"Coke\" Coleda\n\u003c/pre\u003e","files":null}]}