{"version":1,"ops":[{"type":1,"author":{"id":"4277d85693ce7ae3559eb0a94f3b50be93446600"},"timestamp":1324421792,"metadata":{"github-id":"MDU6SXNzdWUyNjE5NDM2","github-url":"https://github.com/parrot/parrot/issues/236","origin":"github"},"title":"config/auto/memalign.pm is broken","message":"`config/auto/memalign.pm` determines the type for pointer-sized integers and creates the configuration value `ptrcast`.\n\nCurrently, the code only checks if pointers have the same size as `int` and assumes `long` otherwise. However, this assumption does not hold in general, and is wrong for Win64 specifically.\n\nA preliminary patch could look like this:\n\n```\ndiff --git a/config/auto/memalign.pm b/config/auto/memalign.pm\nindex 9cf5408..95fb6f4 100644\n--- a/config/auto/memalign.pm\n+++ b/config/auto/memalign.pm\n@@ -76,12 +76,27 @@ sub _set_malloc_header {\n\n sub _set_ptrcast {\n     my $conf = shift;\n-    if ( $conf-\u003edata-\u003eget('ptrsize') == $conf-\u003edata-\u003eget('intsize') ) {\n-        $conf-\u003edata-\u003eset( ptrcast =\u003e 'int' );\n+\n+    my $ptrsize = $conf-\u003edata-\u003eget('ptrsize');\n+    my $ptrcast = $conf-\u003edata-\u003eget(\"int${ptrsize}_t\");\n+\n+    # FIXME: find out if this actually does the right thing if intXX_t is\n+    # not available\n+    if ( defined $ptrcast ) {}\n+    elsif ( $ptrsize == $conf-\u003edata-\u003eget('intsize') ) {\n+        $ptrcast = 'int';\n+    }\n+    elsif ( $ptrsize == $conf-\u003edata-\u003eget('longsize') ) {\n+        $ptrcast = 'long';\n+    }\n+    elsif ( $ptrsize == $conf-\u003edata-\u003eget('longlongsize') ) {\n+        $ptrcast = 'long long';\n     }\n     else {\n-        $conf-\u003edata-\u003eset( ptrcast =\u003e 'long' );\n+        # TODO: fail properly\n     }\n+\n+    $conf-\u003edata-\u003eset( ptrcast =\u003e $ptrcast );\n }\n\n sub _set_memalign {\n```","files":null}]}