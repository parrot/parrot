{"version":1,"ops":[{"type":1,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1336181906,"metadata":{"github-id":"MDU6SXNzdWU0NDMzNzg4","github-url":"https://github.com/parrot/parrot/issues/766","origin":"github"},"title":"resizablepmcarray splice heap-buffer-overflow with negative count arg","message":"`perl6 -e'my @a=splice([], 1);` (latest git versions both)\nsplice at `src/pmc/resizablepmcarray.pmc:673`\nreading 8 byte left of a 64byte buffer, but in which? A PMC has 32 AFAIK (64-bit)\n8 byte in user-data looks pretty security-relevant to me.\n\nThere must be strange logical error in the memmove(item + offset + elems1, ...\n\nI added\n\n```\n        if (tail \u003e 0 \u0026\u0026 count \u003e elems1) {\nParrot_io_printf(interp, \"XXX splice item(%x,%d)+offset(%d)+elems1(%d)=%x, count=%d, tail=%d, from=0x%x,%d\\n\",\n                 item,PMC_size(SELF), offset,elems1,item + offset + elems1,count,tail,from,sizeof(PMC));\n            /* we're shrinking the array, so first move the tail left */\n            memmove(item + offset + elems1, item + offset + count,\n                 tail * sizeof (PMC *));\n        }\n```\n\nand get:\n\n```\n$ PERL6LIB=lib ./perl6 -e'my @a=splice([], 1);'\nXXX splice item(d0d5fc80,2)+offset(0)+elems1(0)=d0d5fc80, count=1, tail=1, from=0xd04709d0,32    (pass!)\nXXX splice item(d0da0080,2)+offset(0)+elems1(0)=d0da0080, count=1, tail=1, from=0xd0470d90,32 (fail!)\n\n==31516== ERROR: AddressSanitizer heap-buffer-overflow on address 0x7f555ce78a78 at pc 0x7f556ea75394 bp 0x7fffd8fa57f0 sp 0x7fffd8fa57e8\nREAD of size 1 at 0x7f555ce78a78 thread T0\n\n    #0  0000000000ff8394 \u003cParrot_ResizablePMCArray_splice_orig+0x1e14\u003e:\n    VTABLE_set_integer_native(interp, _self, offset + elems1 + tail);\n    item = PMC_array(_self);\n    if (tail \u003e 0 \u0026\u0026 count \u003c elems1) {\n        /* the array grew, so move the tail to the right */\n        memmove(item + offset + elems1, item + offset + count,\n  ff8394:   48 8b 44 24 40          mov    0x40(%rsp),%rax\n    #1  Parrot_ResizablePMCArray_splice+0x2fb\n    #2  Parrot_splice_p_p_i_i+0x717\n    #3  runops_fast_core+0x4ad\n    #4  runops_int+0x6b5\n    #5  runops+0xe1f\n    #6  Parrot_pcc_invoke_from_sig_object+0xa76\n    #7  Parrot_ext_call+0x765\n    #8  Parrot_Task_invoke+0xc2b\n    #9  Parrot_pcc_invoke_from_sig_object+0x812\n    #10  Parrot_ext_call+0x765\n    #11  Parrot_cx_next_task+0x8d0\n    #12  Parrot_cx_outer_runloop+0x581\n    #13  Parrot_cx_begin_execution+0x8fd\n    #14  Parrot_pf_execute_bytecode_program+0x9a4\n    #15  Parrot_api_run_bytecode+0xa96\n    #16  main+0x841\n    #17  __libc_start_main+0xfd\n0x7f555ce78a78 is located 8 bytes to the left of 64-byte region [0x7f555ce78a80,0x7f555ce78ac0)\n```","files":null}]}