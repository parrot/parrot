{"version":1,"ops":[{"type":1,"author":{"id":"099af60226e2576bd4ff0f5c2614b710c745cab6"},"timestamp":1249532458,"metadata":{"github-id":"MDU6SXNzdWUyODQ4NjUz","github-url":"https://github.com/parrot/parrot/issues/446","origin":"github"},"title":"[RFC] Deprecate Keys at all.","message":"Hello.\n\n(Background: I've spent few months trying to make Keys and Iterators more sane)\n\nThere is excerpt from IRC log:\n\n```\n\u003cbacek\u003e chromatic: I've got excellent (fsvo) idea. Deprecate Keys at all.\n\u003cchromatic\u003e What would replace them?\n\u003cbacek\u003e Create NamespaceKey which will be used for Namespaces.\n\u003cbacek\u003e Navigating over \"ordinary\" aggregates will be \"manual\"\n\u003cchromatic\u003e The idea has merit.\n\u003cbacek\u003e indeed.\n No one uses $P0[foo;bar;baz]\n It's almost impossible to implement and used correctly.\n And behaviour is very dependant on HLL\n\u003cchromatic\u003e It's not easy to manage in IMCC either.\n\u003cbacek\u003e e.g. autovivify vs throwing exception.\n So, NamespaceKey will has-a RSA\n Simple, clean, comprehensible.\n Remove a lot of code in Hash and Array to support Keys.\n Simplify IMCC and future of PIRC (which doesn't support complex keys)\n\u003cchromatic\u003e It's worth considering.\n```\n\nActually NamespaceKey can be is-a RSA. Then creating it in pir will be something like\n\n```\n   $P0 = split ';', 'foo;bar;baz'\n   $P1 = new [NamespaceKey]\n   $P1 = $P0\n```\n## \n\nBacek\n\nOriginally http://trac.parrot.org/parrot/ticket/903","files":null}]}