{"version":1,"ops":[{"type":1,"author":{"id":"8c86ede03c8e80b0dad5131138f96e957a4ee66b"},"timestamp":1383419377,"metadata":{"github-id":"MDU6SXNzdWUyMjAwNzQ5MQ==","github-url":"https://github.com/parrot/parrot/issues/1020","origin":"github"},"title":"Built-in roles are meaningless names","message":"Reported by: zefram@fysh.org\n\nThere are some built-in roles such as \"invokable\" that can be referred to by name, but there isn't any substance to the role beyond its name. There are no Role metaobjects representing them, and so a user-defined class can't compose them.\n\nFirst, try introspecting the Sub PMC class:\n\n```\n$ cat t55.pir\n.sub main :main\n        $P0 = get_global \"main\"\n        $I1 = does $P0, \"invokable\"\n        say $I1\n        $P1 = typeof $P0\n        say $P1\n        $P2 = inspect $P1, \"roles\"\n        $I0 = $P2\n        say $I0\n.end\n```\n\n```\n$ ./parrot t55.pir\n1\nSub\n0\n```\n\nAlthough a Sub \"does\" the \"invokable\" role, introspecting the Sub class clearly shows a list of no composed roles. Sub has some built-in recognition for the _name_ \"invokable\", but no relationship to any Role object that goes by that name.\n\nThis is a problem if one wants to compose the built-in \"invokable\" role. Doing so is mandatory in at least one situation: adding a method to a MultiSub. The MultiSub will reject the addition of anything that doesn't \"do\" \"invokable\". However, because \"invokable\" is no more than a name, MultiSub will actually be satisfied by a class composing any Role that is labelled with that name. Its test corresponds to the test in this code:\n\n```\n$ cat t54.pir\n.sub main :main\n        $P0 = newclass \"Foo\"\n        $P1 = new $P0\n        $I0 = does $P1, \"invokable\"\n        say $I0\n        $P2 = new \"Role\"\n        $P2.\"name\"(\"invokable\")\n        addrole $P0, $P2\n        $I1 = does $P1, \"invokable\"\n        say $I1\n.end\n```\n\n```\n$ ./parrot t54.pir\n0\n1\n```\n\nSo MultiSub can actually be satisfied by an empty formality. Empty because it is entirely unrelated to whether an object is actually invokable: one can override the \"invoke\" vtable entry without touching roles, or (as above) satisfy the role name test without touching the vtable entry.\n\nDo roles achieve anything at all in Parrot?\n\n-zefram\n\n```\nSummary of my parrot 5.7.0 configuration:\n  configdate='Sat Oct  5 12:42:43 2013 GMT'\n  Platform:\n    osname=linux, archname=x86_64-linux-gnu-thread-multi\n    perl=/usr/bin/perl\n```","files":null}]}