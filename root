{"version":1,"ops":[{"type":1,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1319473545,"metadata":{"github-id":"MDU6SXNzdWUyMDM1NTEz","github-url":"https://github.com/parrot/parrot/issues/183","origin":"github"},"title":"-t4 no longer gives sub-level output","message":"Using 3e1bbd4ebc15968638afe3409a5a10f839ae783f, I am seeing the following output:\n\nGiven foo.pir:\n\n``` pir\n.sub main :main\n  test()\n.end\n\n.sub test\n  say \"in test\"\n.end\n```\n\n``` sh\nparrot -t1 foo.pir 2\u003e t1.out\nparrot -t4 foo.pir 2\u003e t4.out\n```\n\nI would expect the -t4 output to be showing me the sub level traces, not the individual code. Instead, I get very similar (but not identical) output.\n\nt1.out:\n\n``` log\n014a get_params PC2 (1), P4                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P4=PMCNULL\n014d set P5, PC8                                        P5=PMCNULL PC8=Sub=PMC(0x8fac24c pc:0)\n0150 set P6, PC14                                        P6=PMCNULL PC14=Sub=PMC(0x8fac440 pc:533)\n0153 new P3, \"ExceptionHandler\"                                        P3=PMCNULL \n0156 set_label P3, 30                                        P3=ExceptionHandler=PMC(0x8ffc4a8) \n0159 push_eh P3                                        P3=ExceptionHandler=PMC(0x8ffc4a8)\n015b set_args PC2 (1), P4                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P4=ResizableStringArray=PMC(0x8fabf54)\n015e invokecc P5                                        P5=Sub=PMC(0x8fac24c pc:0)\n0000 get_params PC2 (1), P4                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P4=PMCNULL\n0003 set P5, PC15                                        P5=PMCNULL PC15=Sub=PMC(0x8fac490 pc:722)\n0006 set P6, PC20                                        P6=PMCNULL PC20=Sub=PMC(0x8fb5818 pc:780)\n0009 set P7, PC23                                        P7=PMCNULL PC23=Sub=PMC(0x8fb5908 pc:798)\n000c set P8, PC12                                        P8=PMCNULL PC12=Sub=PMC(0x8fac38c pc:470)\n000f set P9, PC21                                        P9=PMCNULL PC21=Sub=PMC(0x8fb5868 pc:787)\n0012 set P10, PC10                                        P10=PMCNULL PC10=Sub=PMC(0x8fac2ec pc:388)\n0015 null S0                                        S0=\"\"\n0017 shift S0, P4                                        S0=\"\" P4=ResizableStringArray=PMC(0x8fabf54)\n001a null S1                                        S1=\"\"\n001c null I0                                        I0=0\n001e null S2                                        S2=\"\"\n0020 null P0                                        P0=PMCNULL\n0022 null S3                                        S3=\"\"\n0024 null I1                                        I1=0\n0026 elements I2, P4                                        I2=0 P4=ResizableStringArray=PMC(0x8fabf54)\n0029 le I2, 0, 106                                        I2=1  \n002d set S4, P4[0]                                        S4=\"\" P4=ResizableStringArray=PMC(0x8fabf54) \n0031 set S6, S4                                        S6=\"\" S4=\"foo.pir\"\n0034 set S7, \"-o\"                                        S7=\"\" \n0037 eq S6, S7, 41                                        S6=\"foo.pir\" S7=\"-o\" \n003b set S7, \"-c\"                                        S7=\"-o\" \n003e eq S6, S7, 42                                        S6=\"foo.pir\" S7=\"-c\" \n0042 set S7, \"-r\"                                        S7=\"-c\" \n0045 eq S6, S7, 43                                        S6=\"foo.pir\" S7=\"-r\" \n0049 set S7, \"-E\"                                        S7=\"-r\" \n004c eq S6, S7, 44                                        S6=\"foo.pir\" S7=\"-E\" \n0050 set S7, \"-V\"                                        S7=\"-E\" \n0053 eq S6, S7, 45                                        S6=\"foo.pir\" S7=\"-V\" \n0057 set S7, \"-h\"                                        S7=\"-V\" \n005a eq S6, S7, 44                                        S6=\"foo.pir\" S7=\"-h\" \n005e branch 46\n008c set S1, S4                                        S1=\"\" S4=\"foo.pir\"\n008f branch 4\n0093 isnull I2, S1                                        I2=1 S1=\"foo.pir\"\n0096 if I2, 7                                        I2=0 \n0099 iseq I2, S1, \"\"                                        I2=0 S1=\"foo.pir\" \n009d unless I2, 10                                        I2=0 \n00a7 ne I1, 1, 18                                        I1=0  \n00b9 if I0, 28                                        I0=0 \n00bc set_args PC1 (1), S1                                        PC1=FixedIntegerArray=PMC(0x8fac01c) S1=\"foo.pir\"\n00bf invokecc P8                                        P8=Sub=PMC(0x8fac38c pc:470)\n01d6 get_params PC1 (1), S1                                        PC1=FixedIntegerArray=PMC(0x8fac01c) S1=\"\"\n01d9 length I1, S1                                        I1=0 S1=\"foo.pir\"\n01dc sub I0, I1, 4                                        I0=0 I1=7 \n01e0 lt I0, 0, 10                                        I0=3  \n01e4 substr S0, S1, I0                                        S0=\"\" S1=\"foo.pir\" I0=3\n01e8 branch 5\n01ed ne S0, \".pir\", 8                                        S0=\".pir\"  \n01f1 set_returns PC11 (1), 2\n01f4 returncc\n00c1 get_results PC2 (1), P2                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P2=PMCNULL\n00c4 set I0, P2                                        I0=0 P2=Integer=PMC(0x8ffc520: 2)\n00c7 if I0, 14                                        I0=2 \n00d5 ne I1, 2, 54                                        I1=0  \n010b unless_null P0, 12                                        P0=PMCNULL \n010e set_args PC4 (2), S1, I0                                        PC4=FixedIntegerArray=PMC(0x8fac10c) S1=\"foo.pir\" I0=2\n0112 invokecc P10                                        P10=Sub=PMC(0x8fac2ec pc:388)\n0184 get_params PC4 (2), S0, I0                                        PC4=FixedIntegerArray=PMC(0x8fac10c) S0=\"\" I0=0\n0188 set I1, I0                                        I1=0 I0=2\n018b set I2, 2                                        I2=0 \n018e eq I1, I2, 20                                        I1=2 I2=2 \n01a2 compreg P0, \"PIR\"                                        P0=PMCNULL \n01a5 set_args PC5 (2), P0, S0                                        PC5=FixedIntegerArray=PMC(0x8fac15c) P0=IMCCompiler=PMC(0x8fabf18) S0=\"foo.pir\"\n01a9 callmethodcc P0, \"compile_file\"                                        P0=IMCCompiler=PMC(0x8fabf18) \n01ac get_results PC2 (1), P1                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P1=PMCNULL\n01af set_returns PC2 (1), P1                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P1=PackfileView=PMC(0x8ffc598)\n01b2 returncc\n0114 get_results PC2 (1), P0                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P0=PMCNULL\n0117 if_null S2, 14                                        S2=\"\" \n0125 set_args PC3 (2), P0, \"init\"                                        PC3=FixedIntegerArray=PMC(0x8fac0bc) P0=PackfileView=PMC(0x8ffc598) \n0129 callmethodcc P0, \"subs_by_tag\"                                        P0=PackfileView=PMC(0x8ffc598) \n012c get_results PC2 (1), P2                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P2=Integer=PMC(0x8ffc520: 2)\n012f if_null P2, 23                                        P2=ResizablePMCArray=PMC(0x8ffc6c4) \n0132 iter P3, P2                                        P3=PMCNULL P2=ResizablePMCArray=PMC(0x8ffc6c4)\n0135 set P3, 0                                        P3=ArrayIterator=PMC(0x8ffc6ec) \n0138 unless P3, 14                                        P3=ArrayIterator=PMC(0x8ffc6ec) \n0146 set_returns PC2 (1), P0                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P0=PackfileView=PMC(0x8ffc598)\n0149 returncc\n0160 get_results PC2 (1), P0                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P0=PMCNULL\n0163 set_args PC2 (1), P0                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P0=PackfileView=PMC(0x8ffc598)\n0166 callmethodcc P0, \"main_sub\"                                        P0=PackfileView=PMC(0x8ffc598) \n0169 get_results PC2 (1), P1                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P1=PMCNULL\n016c set_args PC2 (1), P4                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P4=ResizableStringArray=PMC(0x8fabf54)\n016f tailcall P1                                        P1=Sub=PMC(0x8ffc5c0 pc:0)\n0000 set_args PC0\n0002 set P0, PC2                                        P0=PMCNULL PC2=Sub=PMC(0x8ffc624 pc:12)\n0005 invokecc P0                                        P0=Sub=PMC(0x8ffc624 pc:12)\n000c say \"in test\"\n000e set_returns PC0\n0010 returncc\n0007 get_results PC0\n0009 set_returns PC0\n000b returncc\nFileHandle objects (like stdout and stderr)are about to be closed, so clearing trace flags.\n```\n\nt4.out:\n\n``` log\n014a get_params PC2 (1), P4                                        PC2=FixedIntegerArray=PMC(0x880d06c) P4=PMCNULL\n014d set P5, PC8                                        P5=PMCNULL PC8=Sub=PMC(0x880d24c pc:0)\n0150 set P6, PC14                                        P6=PMCNULL PC14=Sub=PMC(0x880d440 pc:533)\n0153 new P3, \"ExceptionHandler\"                                        P3=PMCNULL \n0156 set_label P3, 30                                        P3=ExceptionHandler=PMC(0x885d4a8) \n0159 push_eh P3                                        P3=ExceptionHandler=PMC(0x885d4a8)\n015b set_args PC2 (1), P4                                        PC2=FixedIntegerArray=PMC(0x880d06c) P4=ResizableStringArray=PMC(0x880cf54)\n015e invokecc P5                                        P5=Sub=PMC(0x880d24c pc:0)\n0000 get_params PC2 (1), P4                                        PC2=FixedIntegerArray=PMC(0x880d06c) P4=PMCNULL\n0003 set P5, PC15                                        P5=PMCNULL PC15=Sub=PMC(0x880d490 pc:722)\n0006 set P6, PC20                                        P6=PMCNULL PC20=Sub=PMC(0x8816818 pc:780)\n0009 set P7, PC23                                        P7=PMCNULL PC23=Sub=PMC(0x8816908 pc:798)\n000c set P8, PC12                                        P8=PMCNULL PC12=Sub=PMC(0x880d38c pc:470)\n000f set P9, PC21                                        P9=PMCNULL PC21=Sub=PMC(0x8816868 pc:787)\n0012 set P10, PC10                                        P10=PMCNULL PC10=Sub=PMC(0x880d2ec pc:388)\n0015 null S0                                        S0=\"\"\n0017 shift S0, P4                                        S0=\"\" P4=ResizableStringArray=PMC(0x880cf54)\n001a null S1                                        S1=\"\"\n001c null I0                                        I0=0\n001e null S2                                        S2=\"\"\n0020 null P0                                        P0=PMCNULL\n0022 null S3                                        S3=\"\"\n0024 null I1                                        I1=0\n0026 elements I2, P4                                        I2=0 P4=ResizableStringArray=PMC(0x880cf54)\n0029 le I2, 0, 106                                        I2=1  \n002d set S4, P4[0]                                        S4=\"\" P4=ResizableStringArray=PMC(0x880cf54) \n0031 set S6, S4                                        S6=\"\" S4=\"foo.pir\"\n0034 set S7, \"-o\"                                        S7=\"\" \n0037 eq S6, S7, 41                                        S6=\"foo.pir\" S7=\"-o\" \n003b set S7, \"-c\"                                        S7=\"-o\" \n003e eq S6, S7, 42                                        S6=\"foo.pir\" S7=\"-c\" \n0042 set S7, \"-r\"                                        S7=\"-c\" \n0045 eq S6, S7, 43                                        S6=\"foo.pir\" S7=\"-r\" \n0049 set S7, \"-E\"                                        S7=\"-r\" \n004c eq S6, S7, 44                                        S6=\"foo.pir\" S7=\"-E\" \n0050 set S7, \"-V\"                                        S7=\"-E\" \n0053 eq S6, S7, 45                                        S6=\"foo.pir\" S7=\"-V\" \n0057 set S7, \"-h\"                                        S7=\"-V\" \n005a eq S6, S7, 44                                        S6=\"foo.pir\" S7=\"-h\" \n005e branch 46\n008c set S1, S4                                        S1=\"\" S4=\"foo.pir\"\n008f branch 4\n0093 isnull I2, S1                                        I2=1 S1=\"foo.pir\"\n0096 if I2, 7                                        I2=0 \n0099 iseq I2, S1, \"\"                                        I2=0 S1=\"foo.pir\" \n009d unless I2, 10                                        I2=0 \n00a7 ne I1, 1, 18                                        I1=0  \n00b9 if I0, 28                                        I0=0 \n00bc set_args PC1 (1), S1                                        PC1=FixedIntegerArray=PMC(0x880d01c) S1=\"foo.pir\"\n00bf invokecc P8                                        P8=Sub=PMC(0x880d38c pc:470)\n01d6 get_params PC1 (1), S1                                        PC1=FixedIntegerArray=PMC(0x880d01c) S1=\"\"\n01d9 length I1, S1                                        I1=0 S1=\"foo.pir\"\n01dc sub I0, I1, 4                                        I0=0 I1=7 \n01e0 lt I0, 0, 10                                        I0=3  \n01e4 substr S0, S1, I0                                        S0=\"\" S1=\"foo.pir\" I0=3\n01e8 branch 5\n01ed ne S0, \".pir\", 8                                        S0=\".pir\"  \n01f1 set_returns PC11 (1), 2\n01f4 returncc\n00c1 get_results PC2 (1), P2                                        PC2=FixedIntegerArray=PMC(0x880d06c) P2=PMCNULL\n00c4 set I0, P2                                        I0=0 P2=Integer=PMC(0x885d520: 2)\n00c7 if I0, 14                                        I0=2 \n00d5 ne I1, 2, 54                                        I1=0  \n010b unless_null P0, 12                                        P0=PMCNULL \n010e set_args PC4 (2), S1, I0                                        PC4=FixedIntegerArray=PMC(0x880d10c) S1=\"foo.pir\" I0=2\n0112 invokecc P10                                        P10=Sub=PMC(0x880d2ec pc:388)\n0184 get_params PC4 (2), S0, I0                                        PC4=FixedIntegerArray=PMC(0x880d10c) S0=\"\" I0=0\n0188 set I1, I0                                        I1=0 I0=2\n018b set I2, 2                                        I2=0 \n018e eq I1, I2, 20                                        I1=2 I2=2 \n01a2 compreg P0, \"PIR\"                                        P0=PMCNULL \n01a5 set_args PC5 (2), P0, S0                                        PC5=FixedIntegerArray=PMC(0x880d15c) P0=IMCCompiler=PMC(0x880cf18) S0=\"foo.pir\"\n01a9 callmethodcc P0, \"compile_file\"                                        P0=IMCCompiler=PMC(0x880cf18) \n01ac get_results PC2 (1), P1                                        PC2=FixedIntegerArray=PMC(0x880d06c) P1=PMCNULL\n01af set_returns PC2 (1), P1                                        PC2=FixedIntegerArray=PMC(0x880d06c) P1=PackfileView=PMC(0x885d598)\n01b2 returncc\n0114 get_results PC2 (1), P0                                        PC2=FixedIntegerArray=PMC(0x880d06c) P0=PMCNULL\n0117 if_null S2, 14                                        S2=\"\" \n0125 set_args PC3 (2), P0, \"init\"                                        PC3=FixedIntegerArray=PMC(0x880d0bc) P0=PackfileView=PMC(0x885d598) \n0129 callmethodcc P0, \"subs_by_tag\"                                        P0=PackfileView=PMC(0x885d598) \n012c get_results PC2 (1), P2                                        PC2=FixedIntegerArray=PMC(0x880d06c) P2=Integer=PMC(0x885d520: 2)\n012f if_null P2, 23                                        P2=ResizablePMCArray=PMC(0x885d6c4) \n0132 iter P3, P2                                        P3=PMCNULL P2=ResizablePMCArray=PMC(0x885d6c4)\n0135 set P3, 0                                        P3=ArrayIterator=PMC(0x885d6ec) \n0138 unless P3, 14                                        P3=ArrayIterator=PMC(0x885d6ec) \n0146 set_returns PC2 (1), P0                                        PC2=FixedIntegerArray=PMC(0x880d06c) P0=PackfileView=PMC(0x885d598)\n0149 returncc\n0160 get_results PC2 (1), P0                                        PC2=FixedIntegerArray=PMC(0x880d06c) P0=PMCNULL\n0163 set_args PC2 (1), P0                                        PC2=FixedIntegerArray=PMC(0x880d06c) P0=PackfileView=PMC(0x885d598)\n0166 callmethodcc P0, \"main_sub\"                                        P0=PackfileView=PMC(0x885d598) \n0169 get_results PC2 (1), P1                                        PC2=FixedIntegerArray=PMC(0x880d06c) P1=PMCNULL\n016c set_args PC2 (1), P4                                        PC2=FixedIntegerArray=PMC(0x880d06c) P4=ResizableStringArray=PMC(0x880cf54)\n016f tailcall P1                                        P1=Sub=PMC(0x885d5c0 pc:0)\n0000 set_args PC0\n0002 set P0, PC2                                        P0=PMCNULL PC2=Sub=PMC(0x885d624 pc:12)\n0005 invokecc P0                                        P0=Sub=PMC(0x885d624 pc:12)\n000c say \"in test\"\n000e set_returns PC0\n0010 returncc\n0007 get_results PC0\n0009 set_returns PC0\n000b returncc\nFileHandle objects (like stdout and stderr)are about to be closed, so clearing trace flags.\n```\n\ndiff on the 2:\n\n``` diff\n1,3c1,3\n\u003c 014a get_params PC2 (1), P4                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P4=PMCNULL\n\u003c 014d set P5, PC8                                        P5=PMCNULL PC8=Sub=PMC(0x8fac24c pc:0)\n\u003c 0150 set P6, PC14                                        P6=PMCNULL PC14=Sub=PMC(0x8fac440 pc:533)\n\n---\n\u003e 014a get_params PC2 (1), P4                                        PC2=FixedIntegerArray=PMC(0x880d06c) P4=PMCNULL\n\u003e 014d set P5, PC8                                        P5=PMCNULL PC8=Sub=PMC(0x880d24c pc:0)\n\u003e 0150 set P6, PC14                                        P6=PMCNULL PC14=Sub=PMC(0x880d440 pc:533)\n5,15c5,15\n\u003c 0156 set_label P3, 30                                        P3=ExceptionHandler=PMC(0x8ffc4a8) \n\u003c 0159 push_eh P3                                        P3=ExceptionHandler=PMC(0x8ffc4a8)\n\u003c 015b set_args PC2 (1), P4                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P4=ResizableStringArray=PMC(0x8fabf54)\n\u003c 015e invokecc P5                                        P5=Sub=PMC(0x8fac24c pc:0)\n\u003c 0000 get_params PC2 (1), P4                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P4=PMCNULL\n\u003c 0003 set P5, PC15                                        P5=PMCNULL PC15=Sub=PMC(0x8fac490 pc:722)\n\u003c 0006 set P6, PC20                                        P6=PMCNULL PC20=Sub=PMC(0x8fb5818 pc:780)\n\u003c 0009 set P7, PC23                                        P7=PMCNULL PC23=Sub=PMC(0x8fb5908 pc:798)\n\u003c 000c set P8, PC12                                        P8=PMCNULL PC12=Sub=PMC(0x8fac38c pc:470)\n\u003c 000f set P9, PC21                                        P9=PMCNULL PC21=Sub=PMC(0x8fb5868 pc:787)\n\u003c 0012 set P10, PC10                                        P10=PMCNULL PC10=Sub=PMC(0x8fac2ec pc:388)\n\n---\n\u003e 0156 set_label P3, 30                                        P3=ExceptionHandler=PMC(0x885d4a8) \n\u003e 0159 push_eh P3                                        P3=ExceptionHandler=PMC(0x885d4a8)\n\u003e 015b set_args PC2 (1), P4                                        PC2=FixedIntegerArray=PMC(0x880d06c) P4=ResizableStringArray=PMC(0x880cf54)\n\u003e 015e invokecc P5                                        P5=Sub=PMC(0x880d24c pc:0)\n\u003e 0000 get_params PC2 (1), P4                                        PC2=FixedIntegerArray=PMC(0x880d06c) P4=PMCNULL\n\u003e 0003 set P5, PC15                                        P5=PMCNULL PC15=Sub=PMC(0x880d490 pc:722)\n\u003e 0006 set P6, PC20                                        P6=PMCNULL PC20=Sub=PMC(0x8816818 pc:780)\n\u003e 0009 set P7, PC23                                        P7=PMCNULL PC23=Sub=PMC(0x8816908 pc:798)\n\u003e 000c set P8, PC12                                        P8=PMCNULL PC12=Sub=PMC(0x880d38c pc:470)\n\u003e 000f set P9, PC21                                        P9=PMCNULL PC21=Sub=PMC(0x8816868 pc:787)\n\u003e 0012 set P10, PC10                                        P10=PMCNULL PC10=Sub=PMC(0x880d2ec pc:388)\n17c17\n\u003c 0017 shift S0, P4                                        S0=\"\" P4=ResizableStringArray=PMC(0x8fabf54)\n\n---\n\u003e 0017 shift S0, P4                                        S0=\"\" P4=ResizableStringArray=PMC(0x880cf54)\n24c24\n\u003c 0026 elements I2, P4                                        I2=0 P4=ResizableStringArray=PMC(0x8fabf54)\n\n---\n\u003e 0026 elements I2, P4                                        I2=0 P4=ResizableStringArray=PMC(0x880cf54)\n26c26\n\u003c 002d set S4, P4[0]                                        S4=\"\" P4=ResizableStringArray=PMC(0x8fabf54) \n\n---\n\u003e 002d set S4, P4[0]                                        S4=\"\" P4=ResizableStringArray=PMC(0x880cf54) \n49,51c49,51\n\u003c 00bc set_args PC1 (1), S1                                        PC1=FixedIntegerArray=PMC(0x8fac01c) S1=\"foo.pir\"\n\u003c 00bf invokecc P8                                        P8=Sub=PMC(0x8fac38c pc:470)\n\u003c 01d6 get_params PC1 (1), S1                                        PC1=FixedIntegerArray=PMC(0x8fac01c) S1=\"\"\n\n---\n\u003e 00bc set_args PC1 (1), S1                                        PC1=FixedIntegerArray=PMC(0x880d01c) S1=\"foo.pir\"\n\u003e 00bf invokecc P8                                        P8=Sub=PMC(0x880d38c pc:470)\n\u003e 01d6 get_params PC1 (1), S1                                        PC1=FixedIntegerArray=PMC(0x880d01c) S1=\"\"\n60,61c60,61\n\u003c 00c1 get_results PC2 (1), P2                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P2=PMCNULL\n\u003c 00c4 set I0, P2                                        I0=0 P2=Integer=PMC(0x8ffc520: 2)\n\n---\n\u003e 00c1 get_results PC2 (1), P2                                        PC2=FixedIntegerArray=PMC(0x880d06c) P2=PMCNULL\n\u003e 00c4 set I0, P2                                        I0=0 P2=Integer=PMC(0x885d520: 2)\n65,67c65,67\n\u003c 010e set_args PC4 (2), S1, I0                                        PC4=FixedIntegerArray=PMC(0x8fac10c) S1=\"foo.pir\" I0=2\n\u003c 0112 invokecc P10                                        P10=Sub=PMC(0x8fac2ec pc:388)\n\u003c 0184 get_params PC4 (2), S0, I0                                        PC4=FixedIntegerArray=PMC(0x8fac10c) S0=\"\" I0=0\n\n---\n\u003e 010e set_args PC4 (2), S1, I0                                        PC4=FixedIntegerArray=PMC(0x880d10c) S1=\"foo.pir\" I0=2\n\u003e 0112 invokecc P10                                        P10=Sub=PMC(0x880d2ec pc:388)\n\u003e 0184 get_params PC4 (2), S0, I0                                        PC4=FixedIntegerArray=PMC(0x880d10c) S0=\"\" I0=0\n72,75c72,75\n\u003c 01a5 set_args PC5 (2), P0, S0                                        PC5=FixedIntegerArray=PMC(0x8fac15c) P0=IMCCompiler=PMC(0x8fabf18) S0=\"foo.pir\"\n\u003c 01a9 callmethodcc P0, \"compile_file\"                                        P0=IMCCompiler=PMC(0x8fabf18) \n\u003c 01ac get_results PC2 (1), P1                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P1=PMCNULL\n\u003c 01af set_returns PC2 (1), P1                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P1=PackfileView=PMC(0x8ffc598)\n\n---\n\u003e 01a5 set_args PC5 (2), P0, S0                                        PC5=FixedIntegerArray=PMC(0x880d15c) P0=IMCCompiler=PMC(0x880cf18) S0=\"foo.pir\"\n\u003e 01a9 callmethodcc P0, \"compile_file\"                                        P0=IMCCompiler=PMC(0x880cf18) \n\u003e 01ac get_results PC2 (1), P1                                        PC2=FixedIntegerArray=PMC(0x880d06c) P1=PMCNULL\n\u003e 01af set_returns PC2 (1), P1                                        PC2=FixedIntegerArray=PMC(0x880d06c) P1=PackfileView=PMC(0x885d598)\n77c77\n\u003c 0114 get_results PC2 (1), P0                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P0=PMCNULL\n\n---\n\u003e 0114 get_results PC2 (1), P0                                        PC2=FixedIntegerArray=PMC(0x880d06c) P0=PMCNULL\n79,86c79,86\n\u003c 0125 set_args PC3 (2), P0, \"init\"                                        PC3=FixedIntegerArray=PMC(0x8fac0bc) P0=PackfileView=PMC(0x8ffc598) \n\u003c 0129 callmethodcc P0, \"subs_by_tag\"                                        P0=PackfileView=PMC(0x8ffc598) \n\u003c 012c get_results PC2 (1), P2                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P2=Integer=PMC(0x8ffc520: 2)\n\u003c 012f if_null P2, 23                                        P2=ResizablePMCArray=PMC(0x8ffc6c4) \n\u003c 0132 iter P3, P2                                        P3=PMCNULL P2=ResizablePMCArray=PMC(0x8ffc6c4)\n\u003c 0135 set P3, 0                                        P3=ArrayIterator=PMC(0x8ffc6ec) \n\u003c 0138 unless P3, 14                                        P3=ArrayIterator=PMC(0x8ffc6ec) \n\u003c 0146 set_returns PC2 (1), P0                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P0=PackfileView=PMC(0x8ffc598)\n\n---\n\u003e 0125 set_args PC3 (2), P0, \"init\"                                        PC3=FixedIntegerArray=PMC(0x880d0bc) P0=PackfileView=PMC(0x885d598) \n\u003e 0129 callmethodcc P0, \"subs_by_tag\"                                        P0=PackfileView=PMC(0x885d598) \n\u003e 012c get_results PC2 (1), P2                                        PC2=FixedIntegerArray=PMC(0x880d06c) P2=Integer=PMC(0x885d520: 2)\n\u003e 012f if_null P2, 23                                        P2=ResizablePMCArray=PMC(0x885d6c4) \n\u003e 0132 iter P3, P2                                        P3=PMCNULL P2=ResizablePMCArray=PMC(0x885d6c4)\n\u003e 0135 set P3, 0                                        P3=ArrayIterator=PMC(0x885d6ec) \n\u003e 0138 unless P3, 14                                        P3=ArrayIterator=PMC(0x885d6ec) \n\u003e 0146 set_returns PC2 (1), P0                                        PC2=FixedIntegerArray=PMC(0x880d06c) P0=PackfileView=PMC(0x885d598)\n88,93c88,93\n\u003c 0160 get_results PC2 (1), P0                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P0=PMCNULL\n\u003c 0163 set_args PC2 (1), P0                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P0=PackfileView=PMC(0x8ffc598)\n\u003c 0166 callmethodcc P0, \"main_sub\"                                        P0=PackfileView=PMC(0x8ffc598) \n\u003c 0169 get_results PC2 (1), P1                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P1=PMCNULL\n\u003c 016c set_args PC2 (1), P4                                        PC2=FixedIntegerArray=PMC(0x8fac06c) P4=ResizableStringArray=PMC(0x8fabf54)\n\u003c 016f tailcall P1                                        P1=Sub=PMC(0x8ffc5c0 pc:0)\n\n---\n\u003e 0160 get_results PC2 (1), P0                                        PC2=FixedIntegerArray=PMC(0x880d06c) P0=PMCNULL\n\u003e 0163 set_args PC2 (1), P0                                        PC2=FixedIntegerArray=PMC(0x880d06c) P0=PackfileView=PMC(0x885d598)\n\u003e 0166 callmethodcc P0, \"main_sub\"                                        P0=PackfileView=PMC(0x885d598) \n\u003e 0169 get_results PC2 (1), P1                                        PC2=FixedIntegerArray=PMC(0x880d06c) P1=PMCNULL\n\u003e 016c set_args PC2 (1), P4                                        PC2=FixedIntegerArray=PMC(0x880d06c) P4=ResizableStringArray=PMC(0x880cf54)\n\u003e 016f tailcall P1                                        P1=Sub=PMC(0x885d5c0 pc:0)\n95,96c95,96\n\u003c 0002 set P0, PC2                                        P0=PMCNULL PC2=Sub=PMC(0x8ffc624 pc:12)\n\u003c 0005 invokecc P0                                        P0=Sub=PMC(0x8ffc624 pc:12)\n\n---\n\u003e 0002 set P0, PC2                                        P0=PMCNULL PC2=Sub=PMC(0x885d624 pc:12)\n\u003e 0005 invokecc P0                                        P0=Sub=PMC(0x885d624 pc:12)\n```\n\nIt looks like the -t4 output is identical to the -t1 output, modulo memory addresses, when it used to just show something closer to enter/leave, which is what I'd still expect given the CL help.\n\n$ parrot --help-debug | tail -4\n--trace -t [Flags] ...\n    0001    opcodes\n    0002    find_method\n    0004    function calls","files":null}]}