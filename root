{"version":1,"ops":[{"type":1,"author":{"id":"79e522df99a95b4213ed16bab387a78e13ed42d8"},"timestamp":1246573250,"metadata":{"github-id":"MDU6SXNzdWUyODQ4NTMz","github-url":"https://github.com/parrot/parrot/issues/334","origin":"github"},"title":"freeze opcode segfaults on working bytecode from Rakudo","message":"The following compiles bytecode from PIR and perl6 source strings and verifies that a subroutine works in both cases. The PIR example can be frozen (and thawed in other tests) but the perl6 example causes freeze to segfault. Tested only on linux/amd64. Fixing this would be assist a project to build a versioned module database for Rakudo (Synopsis 11).\n\n```\n# freeze-test.pir\n# Assumes parrot was installed by Rakudo's Configure --gen-parrot\n# - edit the load_bytecode line otherwise.\n\n.sub 'testmain' :main\n    .local string testPIRsource\n    testPIRsource = \u003c\u003c'    testPIRsource_end'\n        .sub test_PIR\n            .param string x\n            .local string result\n            result = 'test PIR '\n            result .= x\n            .return ( result )\n        .end\n    testPIRsource_end\n    .local pmc PIRcompiler, testPIRbytecode, parrotnamespace, test_PIR\n    PIRcompiler = compreg 'PIR' # parrot/docs/pdds/draft/pdd06_pasm.pod\n    testPIRbytecode = PIRcompiler( testPIRsource )\n    parrotnamespace = get_root_namespace [ 'parrot' ]\n    test_PIR = parrotnamespace.'find_sub' ('test_PIR')\n    $S0 = test_PIR ( '10 b' ) # execute the generated bytecode\n    print $S0\n    say ' PIR code compiled, ready to be frozen'\n\n    .local string testP6source\n    testP6source = \u003c\u003c'    testP6source_end'\n        sub test_P6 ( Str $x ) {\n            return \"test P6 $x\";\n        }\n    testP6source_end\n    # the next line assumes rakudo configured with --gen-parrot\n    load_bytecode '../perl6.pbc' # adjust directory if different\n    .local pmc P6compiler, testP6bytecode, P6namespace, test_P6\n    # see similar code in .sub 'eval' in rakudo/src/builtins/control.pir\n    P6compiler = compreg 'perl6'\n    testP6bytecode = P6compiler.'compile' ( testP6source )\n    P6namespace = get_root_namespace [ 'perl6' ]\n    test_P6 = P6namespace.'find_sub' ('test_P6')\n    $S0 = test_P6 ( '10 c' )\n    print $S0\n    say ' Perl 6 code compiles, ready to be frozen'\n\n    .local string frozenPIR, filename\n    frozenPIR = freeze testPIRbytecode\n    filename  = \"/tmp/bytecode_from_PIR.frozen\"\n    .local pmc filehandle\n    filehandle = open filename, \"w\"\n    print filehandle, frozenPIR\n    close filehandle\n    $I0 = stat filename, 1 # 1 means get file size\n    print $I0\n    say ' bytes frozen from PIR'\n\n    .local string frozenP6\n# Uncomment the next line to see the problem\n#   frozenP6 = freeze testP6bytecode            # segfaults\n    filename  = \"/tmp/bytecode_from_P6.frozen\"\n    filehandle = open filename, \"w\"\n    print filehandle, frozenP6\n    close filehandle\n    $I0 = stat filename, 1 # 1 means get file size\n    print $I0\n    say ' bytes frozen from Perl 6'\n\n.end\n\n# Original problem encountered in:\n# http://gitorious.org/parrot-module-lib/main/blobs/master/t/10-make-bytecode.t\n```\n\nOriginally http://trac.parrot.org/parrot/ticket/802","files":null}]}