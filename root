{"version":1,"ops":[{"type":1,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1413369419,"metadata":{"github-id":"MDU6SXNzdWU0NTg1MjAyMg==","github-url":"https://github.com/parrot/parrot/issues/1103","origin":"github"},"title":"Throw throw_illegal_escape, do not skip them","message":"On parrot Illegal escape chars, like \\o were tolerated and the \\ chars were just skipped.\nHence 'foo\\o' is collapsed to 'fooo'. This is a problem esp. with unharmonized immc quoting rules, and leads to strange perl6 bugs.\n\nSuch as the correctly double-quoted .lex \"foo\\\\o\", $P3 name fails to work, as it is parsed as \"\\o\".\nSee https://rt.perl.org/Public/Bug/Display.html?id=116643\nThis was caused by the switch from globals to lexicals, as this statement is now enclosed in a block.\nSee #1095 for the other imcc problems with wrong quoting and unescaping.\n\nNote that the C standard requires such \"invalid\" escape sequences to be diagnosed i.e., the compiler must print an error message.\nTolerate escaped special chars but not illegal quotes a-zA-Z as in the C standard plus our \\e, \\u,\\U,\\x extensions.\n\nThrow `EXCEPTION_INVALID_CHARACTER` and provide a better error message: \"Unknown escape sequence \\%c in '%Ss'\".\n\nI.e. This printed ok 4 instead ok 3:\n\n```\n.sub 'main' :main\n    $S0 = 'bar\\o'\n    $P1 = box 'ok 1'\n    set_global $S0, $P1\n    $P2 = get_global 'bar\\o'\n    say $P2\n\n    $S1 = \"foo\\\\o\"\n    $P1 = box 'ok 2'\n    set_global \"foo\\\\o\", $P1   # ok, parsed as \"foo\\\\o\"\n    $P2 = get_global \"foo\\\\o\"\n    say $P2\n\n    $S2 = \"foo\\o\"\n    $P1 = box 'ok 3'\n    $S3 = \"fooo\"\n    $P2 = box 'ok 4'\n    set_global \"foo\\o\", $P1    # wrong, parsed as \"fooo\"\n    set_global \"fooo\",  $P2\n    $P3 = get_global \"foo\\o\"\n    say $P3\n\n    $P3 = get_global \"fooo\"\n    say $P3\n.end\n```","files":null}]}