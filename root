{"version":1,"ops":[{"type":1,"author":{"id":"96fb2e2e33b59677e3a85ec74746c085275c50d1"},"timestamp":1295395441,"metadata":{"github-id":"MDU6SXNzdWUyODQ4Nzg5","github-url":"https://github.com/parrot/parrot/issues/581","origin":"github"},"title":"possible problem with g++ --optimize (t/pmc/float.t failure)","message":"In testing t/pmc/float.t it failed a test when built with g++-4.5 with --optimize.\n\nFailed test:  102 - comparison ops: cmp_p_p: equality (passes g++ without --optimize and gcc - Ubuntu 10.10 i386)\n\nkid51 reported that the test passed for him using g++ v4.3.2\n\nI did some further tests with Ubuntu 10.04 i386 and Ubuntu 10.10 i386 and it failed (g++ --optimize only) with g++ v4.4.3 and v4.5.1\n\nNotFound and cotto both managed to reproduce the error using g++ v4.4.5\n\nNotFound proposed a patch, which fixed the problem and cotto committed\n\n```\ndiff --git a/src/pmc/float.pmc b/src/pmc/float.pmc\nindex e31cf55..dc8e06e 100644\n--- a/src/pmc/float.pmc\n+++ b/src/pmc/float.pmc\n@@ -285,8 +285,9 @@ Returns the result of comparing the number with C\u003c*value\u003e.\n     }\n\n     MULTI INTVAL cmp_num(DEFAULT value) {\n-        const FLOATVAL diff =\n-                SELF.get_number() - VTABLE_get_number(INTERP, value);\n+        volatile FLOATVAL n1 = SELF.get_number();\n+        volatile FLOATVAL n2 = VTABLE_get_number(INTERP, value);\n+        const FLOATVAL diff = n1 - n2;\n         return diff \u003e 0 ? 1 : diff \u003c 0 ? -1 : 0;\n     }\n\n```\n\nthis fixed the failure.\n\nThe main reason for creating the ticket (apart from cotto asking me to) is that we had a failure with g++ --optimize 32 bit (later versions) that did not occur without --optimize or with gcc.  The test did not fail on 64 bit (perhaps because of different ways of handling floating point).\n\nOriginally http://trac.parrot.org/parrot/ticket/1978","files":null}]}