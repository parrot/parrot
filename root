{"version":1,"ops":[{"type":1,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1260008009,"metadata":{"github-id":"MDU6SXNzdWUyODQ4NTk1","github-url":"https://github.com/parrot/parrot/issues/391","origin":"github"},"title":"[RFC] Merge freeze/thaw with PBC","message":"= Problems =\n\nfreeze/thaw and PBC are already inter-related:\n- PBC uses freeze/thaw for constants\n- freeze/thaw uses PBC's low level binary IO abstraction\n\nfreeze/thaw currently has issues related to subs. Specifically, the opcodes for the sub aren't frozen with the sub. The reason for this is that, when a sub is a constant in a PBC, the opcodes are stored elsewhere and the sub should be an index into the code segment.\n\nAlso, PBCs as they currently exist are more or less equivalent to frozen Eval PMCs (in function, not format).\n\nThe bottom line is we have 2 formats that are inter-dependant and have overlapping functionality.\n\n= Proposed Solution =\n\nHave freeze/thaw operate on a slight variant of PBC. That is, freeze returns a string containing the contents of a PBC file, and thaw would operate on such strings.\n\n= Required Modifications to PBC =\n\nMinimal. A new segment would need to be added for non-constant objects. For backwards compatibility, we could make the absence of this segment default to creating an Eval PMC.\n\n= Required Modifications to freeze/thaw =\n\nThe IMAGE_IO object (or whatever we replace it with) would need to gain the concept of bytecode management. Sub PMCs would be responsible for adding their bytecode to the image on freeze and obtaining their bytecode on thaw. Eval PMCs would no longer manage the bytecode for all contained subs for freeze/thaw as these are now responsible for handling that themselves.\n\n= Benefits =\n- Elimination of duplicated functionality.\n- Sub PMCs frozen/thawed sanely.\n- PBC becomes more flexible from PIR/HLL perspective:\n  - compilation: just freeze an Eval PMC.\n  - examination: thaw to Eval PMC and poke it\n  - load_bytecode is something like:\n\n```\n.sub 'load_bytecode'\n  .param string filename\n  $S0 = slurp_file(filename)\n  $P0 = thaw $S0\n  $P0()\n.end\n```\n\nOriginally http://trac.parrot.org/parrot/ticket/1359","files":null}]}