{"version":1,"ops":[{"type":1,"author":{"id":"0c9c62332064205b2d799407019fa3e7e2f43862"},"timestamp":1341241149,"metadata":{"github-id":"MDU6SXNzdWU1Mzg3OTIy","github-url":"https://github.com/parrot/parrot/issues/795","origin":"github"},"title":"Parrot chooses to panic instead of GC sweep","message":"Much of this ticket uses the following snippet of PIR code as\na basic test:\n\n```\n    $I0 = 0\n  loop:\n    unless $I0 \u003c N goto done\n    $P0 = new ['ResizablePMCArray']\n    inc $I0\n    goto loop\n  done:\n```\n\nWhat this loop does is perform N allocations of a ResizablePMCArray (RPA).\nAt the end of the loop, only the last RPA is \"active\" -- the rest are available to\nbe garbage collected.\n\nWe can put this into a larger program (copy below) that allows\nus to run the loop for a given value of N and report the resulting\nmemory usage statistics.  So, to find out the amount of memory Parrot\nneeds to run this program when N==1 (allocating exactly one RPA):\n\n```\npmichaud@kiwi:~/p6/parrot$ ./parrot gc.pir 1\ngc_mark_runs=0\ngc_collect_runs=0\ntotal_pmcs=2040\nactive_pmcs=1999\ntotal_mem_alloc=663552\ntotal_mem_used=318342\npmichaud@kiwi:~/p6/parrot$ \n```\n\nRunning with N==1, Parrot allocated a total of 663,552 bytes of\nmemory, and is \"using\" 318,342 bytes.\n\nNow let's have the OS limit the program to 64MB of memory and run it again:\n\n```\npmichaud@kiwi:~/p6/parrot$ ulimit -Sv 64000     # limit processes to 64MB\npmichaud@kiwi:~/p6/parrot$ ./parrot gc.pir 1\ngc_mark_runs=0\ngc_collect_runs=0\ntotal_pmcs=2040\nactive_pmcs=1999\ntotal_mem_alloc=663552\ntotal_mem_used=318342\npmichaud@kiwi:~/p6/parrot$ \n```\n\nWe get the same results, as we would expect.  But watch what\nhappens when we get the loop to create and release a million RPAs:\n\n```\npmichaud@kiwi:~/p6/parrot$ ulimit -v\n64000\npmichaud@kiwi:~/p6/parrot$ ./parrot gc.pir 1000000\nFailed allocation of 4096 bytes\nParrot VM: PANIC: Out of mem!\nC file src/gc/alloc_memory.c, line 75\nParrot file (not available), line (not available)\n[...]\n```\n\nParrot chooses to panic rather than perform a GC that\nwould recover the needed space to allocate a PMC.\n\nNote that this program shouldn't actually need anywhere close\nto 64MB of space to run; at any point in time there's at most 1 or \n2 RPA PMCs \"active\".\n\nThe full program used is:\n\n```\npmichaud@kiwi:~/p6/parrot$ cat gc.pir\n\n## This program reads a number from the command line,\n## then creates that number of RPAs via a loop and reports\n## interpinfo memory statistics at the end.  The RPAs\n## are created with replacement, so that only one RPA\n## is actually \"alive\" at any given time.\n\n.include 'interpinfo.pasm'\n\n.sub 'main' :main\n    .param pmc args\n\n    .local int N\n    N = args[1]\n\n    $I0 = 0\n  loop:\n    unless $I0 \u003c N goto done\n    $P0 = new ['ResizablePMCArray']\n    inc $I0\n    goto loop\n  done:\n\n    # Now display the current memory consumption statistics.\n    print \"gc_mark_runs=\"\n    $I0 = interpinfo .INTERPINFO_GC_MARK_RUNS\n    say $I0\n\n    print \"gc_collect_runs=\"\n    $I0 = interpinfo .INTERPINFO_GC_COLLECT_RUNS\n    say $I0\n\n    print \"total_pmcs=\"\n    $I0 = interpinfo .INTERPINFO_TOTAL_PMCS\n    say $I0\n\n    print \"active_pmcs=\"\n    $I0 = interpinfo .INTERPINFO_ACTIVE_PMCS\n    say $I0\n\n    print \"total_mem_alloc=\"\n    $I0 = interpinfo .INTERPINFO_TOTAL_MEM_ALLOC\n    say $I0\n\n    print \"total_mem_used=\"\n    $I0 = interpinfo .INTERPINFO_TOTAL_MEM_USED\n    say $I0\n.end\n```\n\nI can get a similar result using a program that simply makes\nsubroutine calls and never creates any PMCs directly:\n\n```\npmichaud@kiwi:~/p6/parrot$ cat gc-sub.pir\n.sub 'main' :main\n    .param pmc args\n\n    .local int N\n    N = args[1]\n\n    $I0 = 0\n  loop:\n    unless $I0 \u003c N goto done\n    'no-op'()\n    inc $I0\n    goto loop\n  done:\n.end\n\n.sub 'no-op'\n    noop\n.end\n\npmichaud@kiwi:~/p6/parrot$ ./parrot gc-sub.pir 1000000\npmichaud@kiwi:~/p6/parrot$ ulimit -Sv 64000\npmichaud@kiwi:~/p6/parrot$ ./parrot gc-sub.pir 1000000\nFailed allocation of 4096 bytes\nParrot VM: PANIC: Out of mem!\nC file src/gc/alloc_memory.c, line 105\nParrot file (not available), line (not available)\n```\n\nPm","files":null}]}