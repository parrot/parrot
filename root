{"version":1,"ops":[{"type":1,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1405522178,"metadata":{"github-id":"MDU6SXNzdWUzNzk4OTk3MQ==","github-url":"https://github.com/parrot/parrot/issues/1083","origin":"github"},"title":"export some CallContext methods","message":"Calling CallContext methods internally via the indirect PMC vtable route might be too slow. See http://wknight8111.blogspot.com/2009/10/optimizing-parrot.html\n\nBenchmark this:\n- export the internally needed CallContext vtable methods (not static) and use them in our PCC (`src/call/*.c` only)\n- add a `lib/Parrot/Pmc2c/PMC/CallContext.pm` to special case it (if worthwile)\n- inline the CallContext ATTR accessors to omit the obj check, because there cannot be an override for it, or fix the definition in the header itself\n\ni.e.\n\n```\n/* Generated macro accessors for 'arg_flags' attribute of CallContext PMC. */\n#define GETATTR_CallContext_arg_flags(interp, pmc, dest) \\\n    do { \\\n        if (!PObj_is_object_TEST(pmc)) { \\\n            (dest) = ((Parrot_CallContext_attributes *)PMC_data(pmc))-\u003earg_flags; \\\n        } \\\n        else { \\\n            (dest) = VTABLE_get_attr_str(interp, \\\n                              pmc, Parrot_str_new_constant(interp, \"arg_flags\")); \\\n        } \\\n    } while (0)\n```\n\n=\u003e\n\n```\n#define GETATTR_CallContext_arg_flags(interp, pmc, dest) \\\n            (dest) = PARROT_CALLCONTEXT(pmc)-\u003earg_flags;\n```\n\nto get benchmark numbers just fix `include/pmc/pmc_callcontext.h` and `src/pmc/callcontext.c` manually","files":null}]}