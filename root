{"version":1,"ops":[{"type":1,"author":{"id":"bda1c2af6cf86f8312c0380d1f34dd4288076995"},"timestamp":1258456519,"metadata":{"github-id":"MDU6SXNzdWUyODQ4NDQz","github-url":"https://github.com/parrot/parrot/issues/246","origin":"github"},"title":"method overload in pir subclass of pmc pccmethod leaves object undefined","message":"while creating a subclass of Exporter to test inter-language exports,\ni stumbled across a bug that i can't seem to fix.\n\ni've created a subclass of Exporter called MyExporter. MyExporter has\nan overridden 'add_global' method, which adds a '\u0026' sigil to each\nglobal specified by the user and calls the method in the superclass.\n\ni've also created a high-level language that uses the '\u0026' sigil on\nsubs, and i import and aim to call the hll sub. however, the code\nnever finishes 'add_method', as it segfaults inside the supermethod\nwith an undefined 'exp' object. that is, from src/pmc/exporter.pmc,\nline 260:\n\nParrot_Exporter *exp = PARROT_EXPORTER(SELF);\n\nafter this line, 'exp' is NULL, but 'SELF' (or after macro expansion\n'pmc') is not. this is not the case when 'add_method' has not been\noverridden. here's the pir code that exposes the bug:\n\n.sub 'main' :main\n.local pmc exp, ns\n\nexp = new 'MyExporter'\n\nns = get_root_namespace ['foo']\nexp.'source'( ns )\n\nexp.'add_global'('bar')\n\nsay \"NEVER REACHES HERE\"\n\nexp.'import'()\n\n'\u0026bar'() ## THIS WILL SUCCEED!\n'bar'() ## THIS WILL FAIL!\n## THAT'S NOT WHAT I WANT!!!\n\n.end\n## create a subclass of Exporter that overrides 'add_global'\n## it adds a '\u0026' sigil to each requested global\n\n.namespace ['MyExporter']\n.sub 'onload' :load :init :anon\n.local pmc class\nclass = subclass 'Exporter', 'MyExporter'\n.return ()\n.end\n\n.sub 'add_global' :method\n.param string glb :optional\n.param int has_glb :opt_flag\n\n.local pmc args, super\nargs = new .Hash\nsuper = new .Super, self\n\nunless has_glb goto no_global\nglb = concat '\u0026', glb\n.return super.'add_global'( glb )\nno_global:\n.return super.'add_global'()\n.end\n# create a high-level language that uses '\u0026' sigil for sub names\n\n.HLL 'foo', ''\n.sub '\u0026bar'\nsay 'hello, world!'\n.end\n\nnote that switching from a tail method call to a regular method call\nhas no effect.\n\nalso note that my code also exposes a problem with the current\nExporter implementation: the imported sub name does not match the\nrequested name. i have yet to address this as the current bug is\nblocking progress.\n\n~jerry\n\nOriginally http://trac.parrot.org/parrot/ticket/1286","files":null}]}