{"version":1,"ops":[{"type":1,"author":{"id":"0a92d3f9f01a5a4514d86646f7597e2b20e9fd61"},"timestamp":1341988130,"metadata":{"github-id":"MDU6SXNzdWU1NTQxODU4","github-url":"https://github.com/parrot/parrot/issues/798","origin":"github"},"title":"Parrot interpreter segfaults in embedding context upon sleep","message":"A fresh morning, gives us a fresh segmentation violation. And, I even know where.\nWhen (in the embedded context of mod_parrot) I call upon 'sleep(1)' to wait for a second I receive a segmentation violation, with the following backtrace:\n#0  0xb78269b7 in Parrot_cx_stop_task (interp=0x80099270, next=0x8059182c)\n\n```\nat src/scheduler.c:328\n```\n#1  0xb7827450 in Parrot_cx_schedule_sleep (interp=0x80099270, time=1,\n\n```\nnext=0x8059182c) at src/scheduler.c:641\n```\n#2  0xb77b3467 in Parrot_sleep_ic (cur_opcode=0x80591824, interp=0x80099270)\n\n```\nat src/ops/core_ops.c:22117\n```\n#3  0xb78201d7 in runops_fast_core (interp=0x80099270,\n\n```\nruncore_unused=0x8016e660, pc=0x80591824) at src/runcore/cores.c:499\n```\n#4  0xb781f719 in runops_int (interp=0x80099270, offset=0)\n\n```\nat src/runcore/main.c:220\n```\n#5  0xb77f6be0 in runops (interp=0x80099270, offs=0) at src/call/ops.c:126\n#6  0xb77f001c in Parrot_pcc_invoke_from_sig_object (interp=0x80099270,\n\n```\nsub_obj=0x801c1a30, call_object=0x801aebbc) at src/call/pcc.c:338\n```\n#7  0xb77d2823 in Parrot_api_pmc_invoke (\n\n```\ninterp_pmc=interp_pmc@entry=0x8016a400, sub=0x801c1a30,\nsignature=0x801aebbc) at src/embed/pmc.c:544\n```\n#8  0xb7fda7b4 in mod_parrot_run (interp=interp@entry=0x8016a400,\n\n```\nreq=req@entry=0x800f9390, compilerName=0x80086348 \"winxed\")\nat mod_parrot_run.c:66\n```\n\n(The rest is all apache). Closer inspection gives us that interp-\u003ecur_task is 0x0, and the local task variable is the same. Thus we crash at exactly line 328 of src/scheduler.c, which looks like this:\n#327    PMC \\* const task = Parrot_cx_current_task(interp);\n#328    Parrot_Task_attributes \\* const tdata = PARROT_TASK(task);\n\nMy gut feeling is that this is an embedding API issue. Any comments are greatly appreciated.","files":null}]}