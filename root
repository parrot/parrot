{"version":1,"ops":[{"type":1,"author":{"id":"2da6485217cbb88ff96be8f3dcc7f9ae44cf6bf0"},"timestamp":1344476656,"metadata":{"github-id":"MDU6SXNzdWU2MTE3ODQ0","github-url":"https://github.com/parrot/parrot/issues/808","origin":"github"},"title":"t/pmc/nci.t tests are fragile and broken by design","message":"Currently the NCI tests in t/pmc/nci.t are fragile and are blocking the merging of the very important threads branch.\n\nOriginally it was thought that the threads branch on Darwin/PPC was the only platform that broke the NCI tests, but it has come to light that the test failures can be reproduced on various \"slow\" machines as well as clang with address sanitation turned on.\n\nThe fact that the NCI tests use \"sleep\" currently is very broken and fragile and only works on \"faster\" machines.\nFor more details, see http://lists.parrot.org/pipermail/parrot-dev/2012-August/007106.html\n\nThe NCI tests should be refactored so they do not depend on peppering various \"sleep\" calls in each test.\n(done in 56c96dd)\n\nrurban:\nI'm with Andy that sleep() is the real problem here.\n  1st the tests are way too fragile, and\n  2nd sleep() itself got more instable in the threads branch.\n\nEsp. this section loops in while. How can we ensure that the alarm signal\nis ever delivered, that the timer thread is not also waiting? Is sleep disturbed by another alarm?\n\n```\nthread.c-Parrot_thread_wait_for_notification(PARROT_INTERP)\nthread.c-{\nthread.c-    ASSERT_ARGS(Parrot_thread_wait_for_notification)\nthread.c-\nthread.c-#ifdef PARROT_HAS_THREADS\nthread.c:    LOCK(interp-\u003esleep_mutex);\nthread.c-    while (interp-\u003ewake_up == 0)\nthread.c:        COND_WAIT(interp-\u003esleep_cond, interp-\u003esleep_mutex);\nthread.c-    interp-\u003ewake_up = 0;\nthread.c:    UNLOCK(interp-\u003esleep_mutex);\nthread.c-#else\nthread.c-    Parrot_alarm_wait_for_next_alarm(interp);\nthread.c-#endif\nthread.c-}\n```\n\nThe backtraces of the sleep-alarm deadlock are:\n\n```\n2304 Thread_2503\n  2304 start\n    2304 main\n      2304 Parrot_api_run_bytecode\n        2304 Parrot_pf_execute_bytecode_program\n          2304 Parrot_cx_begin_execution\n            2304 Parrot_cx_outer_runloop\n              2304 Parrot_thread_wait_for_notification\n                2304 _pthread_cond_wait\n                  2304 __semwait_signal\n                    2304 __semwait_signal\n2304 Thread_2603\n  2304 _pthread_start\n    2304 Parrot_alarm_runloop\n      2304 _pthread_cond_wait\n        2304 __semwait_signal\n          2304 __semwait_signal\n```\n\ne.g. If I remove the sleep 0.01 line in `t/pmc/nci_37.pasm` the nci tests succeed.\nOn linux amd64 also repro with tsan. See http://pastebin.com/gKRDTkh3\n\n```\ncd ~/bin\nwget http://build.chromium.org/p/client.tsan/binaries/tsan-r4356-amd64-linux-self-contained.sh\nchmod +x tsan-r4356-amd64-linux-self-contained.sh\ncd - # threads branch\n\ntsan-r4356-amd64-linux-self-contained.sh ./parrot t/pmc/nci_37.pasm\ntsan-r4356-amd64-linux-self-contained.sh ./parrot t/pmc/task.t\n```\n\nSo the sleep implementation with threads is racy. \nrurban assumes the sleep thread blocks signals which arrive during the sleep, and the sleep loop never finishes.\nI think that there's a design limitation that only one signal can be accepted per thread.","files":null}]}