{"version":1,"ops":[{"type":1,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1347674758,"metadata":{"github-id":"MDU6SXNzdWU2ODkxODY3","github-url":"https://github.com/parrot/parrot/issues/828","origin":"github"},"title":"va_list and unusual floatval types","message":"print_n/nc/i/ic and the say variants go through a full Parrot_io_printf with 3 va_start/va_end \nscenarios and a custom format string parser , and through char\\* -\u003e STRING-\u003echar\\* \nconversion until the fixed FLOATVAL_FMT or INTVAL_FMT printf is done.\nJust to print a single int or number.\n\nThis is \n1. horrible unoptimized. We can shortcut through via \n\n```\n    inline op print(in NUM) :base_io {\n        char buf[128];\n    #ifdef PARROT_HAS_SNPRINTF\n        snprintf(buf, 128, FLOATVAL_FMT, $1);\n    #else\n        sprintf(buf, FLOATVAL_FMT, $1);\n    #endif\n    #ifdef PARROT_HAS_NEGATIVE_ZERO\n        Parrot_io_write_b(interp, _PIO_STDOUT(interp), buf, strlen(buf));\n    #else\n        if (!Parrot_is_nzero(NREG(1)))\n            Parrot_io_write_b(interp, _PIO_STDOUT(interp), buf, strlen(buf));\n        else\n            /* Workaround for older msvcrt and openbsd. GH #366 */\n            Parrot_io_write_b(interp, _PIO_STDOUT(interp), \"-0\", 2));\n    #endif\n        return cur_opcode + 2;\n    }\n```\n\nI can see no number exceed 128. \nWe use `%g` which switches to -e format, and with long long integers ditto.\n1. varargs is broken with non-supported floatval's. \n\n`va_start` does not support this, and consequently prints only 0.\n\nhttp://www.eskimo.com/~scs/cclass/int/sx11c.html\n\"Therefore, varargs functions will never receive arguments of type char, short int, or float. Furthermore, it's an error to ``pass'' the type names char, short int, or float as the second argument to the va_arg() macro. Finally, for vaguely related reasons, the last fixed argument (the one whose name is passed as the second argument to the va_start() macro) should not be of type char, short int, or float, either.\"\n\nIt is even not tested in the configure probe.\nIn my case the error happens sometimes with float and long_double, not with __float128.\nIt may depend on the alignment generated by the compiler.\n\nIn the other remaining va_list functions we need to promote a non-double to double. \nAnd we need to probe for it. Some compilers do support float, long double or quad via varargs. \n\nI'm working on this in a `rurban/va_arg_print_n` branch.","files":null}]}