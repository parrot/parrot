{"version":1,"ops":[{"type":1,"author":{"id":"59fd68f3741dd67ff82af0d63e044216a986b680"},"timestamp":1248797109,"metadata":{"github-id":"MDU6SXNzdWUyODQ4NjMy","github-url":"https://github.com/parrot/parrot/issues/425","origin":"github"},"title":"class associated to namespace [\"parrot\";\"Class\"] gets overridden","message":"When running the following code the the class associated to the [\"parrot\";\"Class\"] namespace gets overridden by the Foo9 class obj\n\nnewclass $P1, \"Foo9\"\n\ntypeof $P6, $P1\n\n$P3 = get_root_namespace [\"parrot\";\"Class\"] \n\n$P4 = get_class $P3\n\nprint $P4\n\nreturn \"Foo9\" instead of the expected \"Class\"\n\nthe function get_class in the default.pmc calls the pmc_new_init(interp, enum_class_PMCProxy, type_num); \nwhere the self object points to the Foo9 class obj.\n\nIn init_pmc in pmcproxy.pmc the interp-\u003evtables[self-\u003etype_num = 102 in my case]-\u003e_namespace; points to the parrot;class namespace. Because this function effectually calls \nParrot_PCCINVOKE(interp, interp-\u003evtables[self-\u003etype_num]-\u003e_namespace = parrot;Class, CONST_STRING(interp, \"set_class\"), \"P-\u003e\", SELF = class of Foo9);\nthe class associated to the parrot;Class namespace gets overridden.\n\nI solved this problem by adding following line to init_class_from_hash in the class.pmc\nnew_vtable-\u003e_namespace        = new_namespace; \n\nBut I don't know for what reason the interp-\u003evtables[type_num]-\u003e_namespace is different from the interp-\u003evtables[type_num]-\u003epmc_class-\u003e_namespace\n\nSo I do not know whether this is the right solution to this problem.\n\nBut I added a special ticket for this because there is another bug.\n\n''Test''\n\nThe test in t/pmc/objects.t fails to detect this condition because of the bug described in ticket #879. \nBut adding a special test with the code described above would be good thing to do.\n\nOriginally http://trac.parrot.org/parrot/ticket/880","files":null}]}