{"version":1,"ops":[{"type":1,"author":{"id":"6d59fc378929d99368e023bcfc49aacae1e68aad"},"timestamp":1240077914,"metadata":{"github-id":"MDU6SXNzdWUyODQ4NzU2","github-url":"https://github.com/parrot/parrot/issues/548","origin":"github"},"title":"subclassing basic number types fails to inherit basic ops like add, sub, mul and div","message":"When subclassing base types like Integer, Float and Complex. The ops sub, add, mul and div are not properly inherited by the derived class.\n\nA basic example is provided by the following code: -\n\n```\n.sub '' :main\n    $P0 = subclass 'Integer', 'FooInt'\n\n    print 'Integer: 10 - 1 = '\n    $P0 = new 'Integer'\n    $P0 = 10\n    sub $P1, $P0, 1\n    say $P1\n\n    print 'FooInt: 10 - 1 = '\n    $P0 = new 'FooInt'\n    $P0 = 10\n    #$P1 = new 'FooInt' # uncommenting here does not help\n    sub $P1, $P0, 1\n    say $P1 \n.end\n```\n\noutputs the following: -\n\n```\nInteger: 10 - 1 = 9\nFooInt: 10 - 1 = Multiple Dispatch: No suitable candidate found for 'subtract_int', with signature 'PIP-\u003eP'\n...\n```\n\nThis appears to be related to RT http://rt.perl.org/rt3/Public/Bug/Display.html?id=59630 which outlines the problem for a specific case of a Complex type.\n\nThe attached script proves the bug also affects add, sub, mul, div for Integer, Float and Complex. It could be used as a test case.\n\nOriginally http://trac.parrot.org/parrot/ticket/562 by bsdz","files":null}]}