{"version":1,"ops":[{"type":1,"author":{"id":"8c86ede03c8e80b0dad5131138f96e957a4ee66b"},"timestamp":1380771549,"metadata":{"github-id":"MDU6SXNzdWUyMDQzNTc3MQ==","github-url":"https://github.com/parrot/parrot/issues/990","origin":"github"},"title":"typeof() and isa() inconsistencies","message":"Reported by: zefram@fysh.org\n\nWhen typeof_p_p is used to acquire a PMCProxy object describing a PMC class, the PMCProxy has inconsistent typing behaviour. typeof_s_p on it shows that it's a PMCProxy, but isa_i_p_sc claims both that it is a PMCProxy and (falsely) that it is of the class of the original object from which it was derived. typeof_p_p on the PMCProxy yields a PMCProxy that stringifies as the class name of the original object rather than as \"PMCProxy\".\n\nDemonstration:\n\n```\n$ cat t11a.pir\n.sub main :main\n        $P0 = new \"BigInt\"\n        $S0 = typeof $P0\n        say $S0\n        $P1 = typeof $P0\n        say $P1\n        $I0 = isa $P0, \"BigInt\"\n        say $I0\n        $I1 = isa $P0, \"PMCProxy\"\n        say $I1\n        say \":::\"\n        $S1 = typeof $P1\n        say $S1\n        $P2 = typeof $P1\n        say $P2\n        $I2 = isa $P1, \"BigInt\"\n        say $I2\n        $I3 = isa $P1, \"PMCProxy\"\n        say $I3\n.end\n$ ./parrot t11a.pir\nBigInt\nBigInt\n1\n0\n:::\nPMCProxy\nBigInt\n1\n1\n```\n\nAnalogous things go wrong when acquiring the Class object describing a user-defined class. One additional thing goes wrong in my test: isa_i_p_sc claims that an object of a user-defined class isa Class.\n\nDemonstration:\n\n```\n$ cat t11b.pir\n.sub main :main\n        $P10 = newclass \"Foo\"\n        $P0 = new \"Foo\"\n        $S0 = typeof $P0\n        say $S0\n        $P1 = typeof $P0\n        say $P1\n        $I0 = isa $P0, \"Foo\"\n        say $I0\n        $I1 = isa $P0, \"Class\"\n        say $I1\n        say \":::\"\n        $S1 = typeof $P1\n        say $S1\n        $P2 = typeof $P1\n        say $P2\n        $I2 = isa $P1, \"Foo\"\n        say $I2\n        $I3 = isa $P1, \"Class\"\n        say $I3\n.end\n$ ./parrot t11b.pir\nFoo\nFoo\n1\n1\n:::\nClass\nFoo\n1\n1\n```\n\nEven weirder, if a '$I4 = isa $P0, \"PMCProxy\"' test is added into the above code, anywhere between setting $P0 and setting $P2, then the 'say $P2' yields the correct output \"Class\" instead of the incorrect \"Foo\".\n\n-zefram\n\n```\nSummary of my parrot 5.5.0 configuration:\n  configdate='Sun Sep 22 18:01:32 2013 GMT'\n  Platform:\n    osname=linux, archname=x86_64-linux-gnu-thread-multi\n```","files":null}]}