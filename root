{"version":1,"ops":[{"type":1,"author":{"id":"e6ebaecce565c58b3e91ddb32c09e93c5f646822"},"timestamp":1277609551,"metadata":{"github-id":"MDU6SXNzdWUyODQ4NzIx","github-url":"https://github.com/parrot/parrot/issues/513","origin":"github"},"title":"Look into GCC -flto and -fwhole-program link options","message":"-flto is link-time optimization.\n\n-fwhole-program is optimization for the entire program.\n\nFrom http://lwn.net/Articles/387122/\n\nWhen source files are compiled and linked using -flto, GCC applies optimizations as if all the source code were in a single file. This allows GCC to perform more aggressive optimizations across files, such as inlining the body of a function from one file that is called from a different file, and propagating constants across files. In general, the LTO framework enables all the usual optimizations that work at a higher level than a single function to also work across files that are independently compiled.\n\nThe LTO option works almost like any other optimization flag. First, one needs to use optimization (using one of the -O{1,2,3,s} options). In cases where compilation and linking are done in a single step, adding the option -flto is sufficient\n\n```\ngcc -o myprog -flto -O2 foo.c bar.c\n```\n\nThis effectively deprecates the old -combine option, which was too slow in practice and only supported for C.\n\nWith independent compilation steps, the option -flto must be specified at all steps of the process:\n\n```\ngcc -c -O2 -flto foo.c\n\ngcc -c -O2 -flto bar.c\n\ngcc -o myprog -flto -O2 foo.o bar.o\n```\n\nAn interesting possibility is to combine the options -flto and -fwhole-program. The latter assumes that the current compilation unit represents the whole program being compiled. This means that most functions and variables are optimized more aggressively. Adding -fwhole-program in the final link step in the example above, makes LTO even more powerful.\n\nWhen using multiple steps, it is strongly recommended to use exactly the same optimization and machine-dependent options in all commands, because conflicting options during compilation and link-time may lead to strange errors. In the best case, the options used during compilation will be silently overridden by those used at link-time. In the worst case, the different options may introduce subtle inconsistencies leading to unpredictable results at runtime. This, of course, is far from ideal, and, hence, in the next minor release, GCC will identify such conflicting options and provide appropriate diagnostics. Meanwhile, some extra care should be taken when using LTO. \n\nOriginally http://trac.parrot.org/parrot/ticket/1691","files":null}]}