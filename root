{"version":1,"ops":[{"type":1,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1398194145,"metadata":{"github-id":"MDU6SXNzdWUzMjAwMTY5OA==","github-url":"https://github.com/parrot/parrot/issues/1069","origin":"github"},"title":"Optimize GC write barriers in the pmc's","message":"GSOC task 1 for ZYROz (i.e. Chirag):\n\nStarting from branch `rurban/pmc2_orig` which removes the nested pmc calls to add a \nPARROT_GC_WRITE_BARRIER(interp, _self); before every return from a PMC VTABLE \nmethod call, we want to mark needed or unneeded WB (\"write barriers\") in each method for SELF.\nA PMC write barrier adds the PMC to the root_objects list for mandatory next collecting.\n\nWhen to WB SELF in pmc methods\n- if you change a PMC you didnâ€™t create WB it.\n- any time you save a value to a new PMC in an old PMC, WB the old one.\n- see `src/vtable.tbl` for the `:write` annotation.\n\nHow to annotate WBs for VTABLE methods\n- mark a method as :manual_wb if you added a WB manually, if in the body after all SELF changes were done, or in an inlined macro or in an included function.\n  Or if the last method is a vtable method on SELF, which does the WB then. We don't need to WB SELF twice per method call.\n- mark a method as :no_wb if no WB is needed. See above. Only writers need a WB.\n- check `src/vtable.tbl` for the `:write` annotation.\n- all other methods will get WB added automatically by pmc2c. pmc2c can only do that if there's no or only one return statement. Otherwise you need use a RETURN(decl variable) statement instead as with PCCMETHODs. Note that `return call_function(SELF, ...);` is not allowed. This must be converted to:\n  \n  retdecl ret = call_function(SELF);\n  RETURN(retdecl ret);\n\nso that pmc2c can add the WB line before the return. SELF is the pmc here that was not created by the method.\n\ne.g. capture.pmc:\nCAPTURE_array_CREATE already write barriers SELF.\n\n```\nVTABLE FLOATVAL pop_float() {\n    PMC *array;\n\n    CAPTURE_array_CREATE(INTERP, SELF, array);\n    /* no PARROT_GC_WRITE_BARRIER, already in CAPTURE_array_CREATE */\n    return VTABLE_pop_float(INTERP, array);\n}\n```\n\nand pmc2c will not add the WB before the call. Better annotate it with `:manual_wb.`\nIf there's no such comment add the WB before the return, \nif the return call does not use self.\n\nOtherwise use an intermediate return value. But in this case it would be easier to manually add the WB. See e.g. `class.pmc` which already added all needed WB manually.\n\nmanually:\ni.e.  OrderedHashIterator_shift_string:\n\n```\nVTABLE STRING* shift_string() {\n    PMC * const key = SELF.shift_pmc();\n    return VTABLE_get_string(INTERP, key);\n}\n```\n\n=\u003e\n\n```\nVTABLE STRING* shift_string() :manual_wb {\n    PMC * const key = SELF.shift_pmc();\n    PARROT_GC_WRITE_BARRIER(INTERP, SELF);\n    return VTABLE_get_string(INTERP, key);\n}\n```\n\nThe expected performance gain is 2-3%, see https://github.com/parrot/parrot-bench","files":null}]}