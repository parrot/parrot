{"version":1,"ops":[{"type":1,"author":{"id":"0782f66a529ccd24e18226f5eebab20a90bea166"},"timestamp":1253529993,"metadata":{"github-id":"MDU6SXNzdWUyODQ4Nzk0","github-url":"https://github.com/parrot/parrot/issues/586","origin":"github"},"title":"Free()ing of SymReg variables","message":"From the [http://rt.perl.org/rt3/Ticket/Display.html?id=44993  Original RT]\n\nOn Mon, Aug 27, 2007 at 09:00:42AM -0700, Paul Cochrane wrote:\n\n```\n\u003e In looking through some of the warnings that Coverity Prevent has\n\u003e thrown up one common thing has come up which I'd like some advice\n\u003e about. We are getting \"leaked storage\" errors often associated with\n\u003e variables declared as SymReg[1]. For example, in\n\u003e compilers/imcc/pbc.c, at line 1463, the variable 'r' is assigned and\n\u003e then goes out of scope a few lines afterwards. This Coverity picks up\n\u003e as being leaked storage. However, if I put C\u003cmem_sys_free(r);\u003e at the\n\u003e end of the relevant block, C\u003cmake test\u003e fails. There are other\n\u003e instances as well compilers/imcc/imcparser.c:2964 (i.e.\n\u003e compilers/imcc/imcc.y:598) and compilers/imcc/imcparser.c:675,\n\u003e compilers/imcc/imcparser.c659 (this time with the variable 'r3').\n\nThere are definitely some memory leaks here. I've seen these in Valgrind reports for a while. My best explanation is that we stick these new pointers in memory somewhere, but don't free them appropriately.\n\nI haven't been able to perform sufficient lifetime analysis to track down where they go and where to free them, yet. Patches welcome.\n\n-- c\n```\n\nAs a first step, it would be nice if someone with access to the Coverity reports could verify if this was still being reported as an issue.\n\nOriginally http://trac.parrot.org/parrot/ticket/1031","files":null}]}