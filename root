{"version":1,"ops":[{"type":1,"author":{"id":"c750eb0960e029df836e56dc77bb8c148fcf5723"},"timestamp":1264728585,"metadata":{"github-id":"MDU6SXNzdWUyODQ4Njc1","github-url":"https://github.com/parrot/parrot/issues/468","origin":"github"},"title":"[RFC] zero length FxA behaviour","message":"FixedBooleanArray, FixedStringArray, FixedIntegerArray, and FixedFloatArray do not allow specifying a length of 0, giving a misleading error of \"Fixed${type}Array: can't resize\".\n\nFixedPMCArray ignores being set to zero length, remaining uninitialized.\n\nAllowing for zero lengthed arrays allows code that handles \"0 or more elements\" cases to avoid checking against the zero case. For example:\n\n```\n\n.sub 'fixed_ints_upto'\n    .param int i\n    .local pmc retv\n    retv = new ['FixedIntegerArray']\n    retv = i\n    $I0 = 0\n    loop:\n         if $I0 \u003e= i goto end_loop:\n         retv[$I0] = $I0\n         inc $I0\n         goto loop\n    end_loop:\n\n    .return (retv)\n.end\n\n```\n\nThis will currently fail. To avoid failures, we would have to check for a zero valued argument and handle that case separately.\n\nZero is a valid length for an array, so I propose that we allow FxAs to be set to zero length (and not be subsequently resizable).\n\nAlternatively, the behaviour could be to ignore setting the length to zero (as is done now in FPA). However, this can be seen as violating the set once property of FxA length.\n\nOriginally http://trac.parrot.org/parrot/ticket/1421","files":null}]}