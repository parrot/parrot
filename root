{"version":1,"ops":[{"type":1,"author":{"id":"8c86ede03c8e80b0dad5131138f96e957a4ee66b"},"timestamp":1380772616,"metadata":{"github-id":"MDU6SXNzdWUyMDQzNjE5Nw==","github-url":"https://github.com/parrot/parrot/issues/998","origin":"github"},"title":"Strange constant-namespace lookups","message":"Reported by: zefram@fysh.org\n\nWhere PIR code refers to a subroutine by literal name, the name is looked up by some bizarre rules that are not documented anywhere.\n\nSome test cases:\n\n```\n$ cat t20.pir\n.sub foo\n        say \"original foo\"\n        .return()\n.end\n.sub bar :anon\n        say \"original bar\"\n        .return()\n.end\n.sub xfoo\n        say \"xfoo\"\n        .return()\n.end\n.sub xbar\n        say \"xbar\"\n        .return()\n.end\n.sub xbaz\n        say \"xbaz\"\n        .return()\n.end\n.sub \"\" :anon :init :load\n        $P0 = get_global \"xfoo\"\n        set_global \"foo\", $P0\n        $P0 = get_global \"xbar\"\n        set_global \"bar\", $P0\n        $P0 = get_global \"xbaz\"\n        set_global \"baz\", $P0\n.end\n.sub tc0\n        foo()\n        bar()\n        baz()\n        .return()\n.end\n.sub tc1\n        .const \"Sub\" foo = \"foo\"\n        foo()\n        .const \"Sub\" bar = \"bar\"\n        bar()\n        .const \"Sub\" baz = \"baz\"\n        baz()\n        .return()\n.end\n.namespace [\"zz\"]\n.sub tc2\n        foo()\n        bar()\n        baz()\n        .return()\n.end\n.sub tc3\n        .const \"Sub\" foo = \"foo\"\n        foo()\n        .const \"Sub\" bar = \"bar\"\n        bar()\n        .const \"Sub\" baz = \"baz\"\n        baz()\n        .return()\n.end\n.namespace []\n.sub main :main\n        tc0()\n        say \":::\"\n        tc1()\n        say \":::\"\n        $P0 = get_global [\"zz\"], \"tc2\"\n        $P0()\n        say \":::\"\n        $P0 = get_global [\"zz\"], \"tc3\"\n        $P0()\n.end\n```\n\n```\n$ ./parrot t20.pir\noriginal foo\noriginal bar\nxbaz\n:::\noriginal foo\noriginal bar\nxbaz\n:::\nxfoo\nxbar\nxbaz\n:::\noriginal foo\noriginal bar\nxbaz\n```\n\nThis shows that named calls and names used with .const do not refer only to the names with which subroutines were originally defined. They can use such names, even if the sub name never went into a dynamic namespace. But the \"baz\" case shows that these lookups will also use the dynamic namespace system. Normally the original names take precedence over the contents of the dynamic namespace. But if .namespace is used to select a different dynamic namespace for some code then lookups in that code don't use the original names at all, instead using the names that were put into a dynamic namespace, but a different dynamic namespace from the one selected for that code. But .const looks up by the original rules regardless of selected dynamic namespace.\n\nShort of looking at the implementation, I'm at a loss to describe the rules that actually apply to these name lookups. This is particularly unfortunate considering that this kind of naming seems to be the only way for subroutines compiled together to refer to each other without relying on a dynamic namespace that's liable to be modified at runtime.\n\nSuspect some connection to GH #982 .\n\n-zefram\n\n```\n\n---\nosname= linux\nosvers= 3.2.0-4-amd64\narch=   x86_64-linux-gnu-thread-multi\ncc=     cc\n\n---\nFlags:\n    category=core\n    severity=medium\n    ack=no\n\n---\nSummary of my parrot 5.5.0 configuration:\n  configdate='Sun Sep 22 18:01:32 2013 GMT'\n  Platform:\n    osname=linux, archname=x86_64-linux-gnu-thread-multi\n    perl=/usr/bin/perl\n  Compiler:\n    cc='cc', ccflags='-D_REENTRANT -D_GNU_SOURCE -DDEBIAN -fstack-protector  -pipe -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -DDISABLE_GC_DEBUG=1 -DNDEBUG -DHAS_GETTEXT',\n  Linker and Libraries:\n    link='cc', linkflags=' -fstack-protector -L/usr/local/lib -Wl,-E',\n    ld='cc', ldflags=' -fstack-protector -L/usr/local/lib',\n    cc_ldflags='',\n    libs='-ldl -lm -lpthread -lcrypt -lrt -lgmp -lreadline '\n  Dynamic Linking:\n    cc_shared='-fPIC',\n    link_dynamic='-Wl,-E',\n    ld_share_flags='-shared -L/usr/local/lib -fstack-protector -fPIC',\n    ld_load_flags='-shared -L/usr/local/lib -fstack-protector -fPIC'\n  Extensions:\n    o='.o', a='.a', exe='',\n    share_ext='.so', load_ext='.so'\n  Misc Programs:\n    ar='ar', ranlib=':',\n    make='make', make_set_make='#'\n  Types:\n    iv=long, intvalsize=8, intsize=4, opcode_t=long, opcode_t_size=8,\n    ptrsize=8,  byteorder=12345678,\n    nv=double, numvalsize=8, doublesize=8, longdoublesize=16\n\n---\nEnvironment:\n    HOME =/home/zefram\n    LANG  (unset)\n    LANGUAGE  (unset)\n    LD_LIBRARY_PATH  (unset)\n    LOGDIR  (unset)\n    PATH =/home/zefram/usr/perl/util:/home/zefram/pub/x86_64-unknown-linux-gnu/bin:/home/zefram/pub/common/bin:/usr/bin:/bin:/usr/local/bin:/usr/games\n    SHELL =/usr/bin/zsh\n```","files":null}]}