{"version":1,"ops":[{"type":1,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1417087701,"metadata":{"github-id":"MDU6SXNzdWU1MDI4MTQ1Mw==","github-url":"https://github.com/parrot/parrot/issues/1152","origin":"github"},"title":"use qrpa approach for ResizablePMCArray, add offset attr","message":"i.e. use a moving array start index (=offset) and move this on shift, unshift or delete[0], instead of moving all array elements around.\njust with consistent naming of the attributes. (ssize -\u003e threshold, start -\u003e offset, elems -\u003e size, slots -\u003e array)\n\nqpra from nqp is much faster for the common shift and unshift ops. See http://irclog.perlgeek.de/perl6/2012-06-03/text\nO(1) vs O(n), skipping a big memmove for 7 of 8 cases.\n\nWith this qrpa might be not needed anymore, esp. with its problems with sort within \nthreaded proxy pmcs.\n\nAdvantages over qrpa:\n- resize optimization with offsets, when there's enough room on the left\n- delete [0] with offsets just bumps the offset\n- faster push when there's enough room on the right\n- faster splice shrink when there's enough room on the left\n- does not fill slack elements right and left with PMCNULL, only when a out of bounds (oob) set leaves a hole.\n- sort is thread-safe\n- better over-allocation numbers. advance size by \\* 1.5 (via integer ops), which is close to the ideal golden ratio (better free list handling, see stack overflow). previously it was by \\* 2, as in perl5.\n\nDisadvantages over old rpa's:\n- We cannot use inherited methods from FixedPMCArray (fpa) anymore, as fpa ignores the offset.\n- much more tricky logical cases to cover in the tests.\n\nIt's 15-25% faster in https://github.com/parrot/parrot-bench, 25% on slow machines, 15% on fast ones.\n\nFurther ideas: \n\nWe could add the following optimization thresholds:\n- on resize with move (ie push slow) reserve an offset \u003e 0, maybe 3, for faster shifts.\n- on unshift slow (ie resize) reserve an offset, anticipating subsequent unshifts. \n  we could check alignment inside unshift, which is better than in resize.\n- try initial size 4 instead of 8","files":null}]}