{"version":1,"ops":[{"type":1,"author":{"id":"86141a663c2eb7543d1a51ec6253a1d54de912fd"},"timestamp":1422795854,"metadata":{"github-id":"MDU6SXNzdWU1NjE2Mjg4OA==","github-url":"https://github.com/parrot/parrot/issues/1196","origin":"github"},"title":"Fix --gc ms SEGV with winxed.pbc -c --noan tools/dev/pbc_to_exe.winxed","message":"```\n./parrot -D1 --gc=ms winxed.pbc -c --noan tools/dev/pbc_to_exe.winxed\nGC Mark phase                | total: 17\nPMC: total  51200, active  49611, free   1589, impatient 0\nBUF: total   6400, active   3205\nGC Sweep phase               | total: 17\nPMC: total  51200, active  49611, free   1589, impatient 0\nBUF: total   6400, active   3205\nGC Compact memory            | total: 17\nPMC: total  51200, active  21569, free  29631, impatient 0\nBUF: total   6400, active   2241\nSegmentation fault\n```\n\nThe -D1 stats are with `smoke-me/gcdebug-ms`. I need to add more gc details to the strings, i.e. support -D101.\n\nI have no idea how the string **buffer** is in a wrong memory segment yet.\n\n```\n(gdb) bt\n#0  __memcpy_sse2_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:140\n#1  0x00007ffff7938029 in io_stringhandle_write_b (interp=0x611060, handle=PMC\u003cStringHandle\u003e = {...}, \n    buffer=0x7ffff2e9b958 \u003cerror: Cannot access memory at address 0x7ffff2e9b958\u003e, byte_length=3) at src/io/stringhandle.c:307\n#2  0x00007ffff79347a5 in Parrot_io_buffer_write_b (interp=0x611060, buffer=0x0, handle=PMC\u003cStringHandle\u003e = {...}, \n    vtable=0x7081d8, s=0x7ffff2e9b958 \u003cerror: Cannot access memory at address 0x7ffff2e9b958\u003e, length=3) at src/io/buffer.c:459\n#3  0x00007ffff7931724 in Parrot_io_write_s (interp=0x611060, handle=PMC\u003cStringHandle\u003e = {...}, s=\"$P3\") at src/io/api.c:1071\n#4  0x00007ffff7a20bb6 in Parrot_StringHandle_nci_print (interp=0x611060, _self=PMC\u003cStringHandle\u003e = {...})\n    at ./src/pmc/stringhandle.pmc:262\n```\n\nSee #1143 for the previous --gc=ms issue, and #1141 for the opportunity to get a **30% faster** parrot with ms\n\nLooks like **ms2** has a similar same problem also. There the symptom is \n\n```\nInvalid character in ASCII string\ncurrent instr.: 'parrot;Winxed;Compiler;' pc 188 (ext/winxed/compiler.pir:118)\ncalled from Sub 'parrot;Winxed;Compiler;Emit;vprint' pc 4577 (ext/winxed/compiler.pir:1882)\n```","files":null}]}